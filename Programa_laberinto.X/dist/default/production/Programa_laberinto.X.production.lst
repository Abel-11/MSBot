

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Mon Nov 04 09:49:07 2019

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bitbssCOMRAM,global,bit,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	text0,global,reloc=2,class=CODE,delta=1
    14                           	psect	text1,global,reloc=2,class=CODE,delta=1
    15                           	psect	text2,global,reloc=2,class=CODE,delta=1
    16                           	psect	text3,global,reloc=2,class=CODE,delta=1
    17                           	psect	text4,global,reloc=2,class=CODE,delta=1
    18                           	psect	text5,global,reloc=2,class=CODE,delta=1
    19                           	psect	text6,global,reloc=2,class=CODE,delta=1
    20                           	psect	text7,global,reloc=2,class=CODE,delta=1
    21                           	psect	text8,global,reloc=2,class=CODE,delta=1
    22                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    24                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text12,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text16,global,reloc=2,class=CODE,delta=1
    30                           	psect	text17,global,reloc=2,class=CODE,delta=1
    31                           	psect	text18,global,reloc=2,class=CODE,delta=1
    32                           	psect	text19,global,reloc=2,class=CODE,delta=1
    33                           	psect	text20,global,reloc=2,class=CODE,delta=1
    34                           	psect	text21,global,reloc=2,class=CODE,delta=1
    35                           	psect	text22,global,reloc=2,class=CODE,delta=1
    36                           	psect	text23,global,reloc=2,class=CODE,delta=1
    37                           	psect	text24,global,reloc=2,class=CODE,delta=1
    38                           	psect	text25,global,reloc=2,class=CODE,delta=1
    39                           	psect	text26,global,reloc=2,class=CODE,delta=1
    40                           	psect	text27,global,reloc=2,class=CODE,delta=1
    41                           	psect	text28,global,reloc=2,class=CODE,delta=1
    42                           	psect	text29,global,reloc=2,class=CODE,delta=1
    43                           	psect	text30,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    45                           	psect	text32,global,reloc=2,class=CODE,delta=1
    46                           	psect	text33,global,reloc=2,class=CODE,delta=1
    47                           	psect	text34,global,reloc=2,class=CODE,delta=1
    48                           	psect	text35,global,reloc=2,class=CODE,delta=1
    49                           	psect	text36,global,reloc=2,class=CODE,delta=1
    50                           	psect	text37,global,reloc=2,class=CODE,delta=1
    51                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    52                           	psect	text38,global,reloc=2,class=CODE,delta=1
    53                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    54                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    55  0000                     
    56                           ; Version 1.44
    57                           ; Generated 14/09/2017 GMT
    58                           ; 
    59                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    60                           ; All rights reserved.
    61                           ; 
    62                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    63                           ; 
    64                           ; Redistribution and use in source and binary forms, with or without modification, are
    65                           ; permitted provided that the following conditions are met:
    66                           ; 
    67                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    68                           ;        conditions and the following disclaimer.
    69                           ; 
    70                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    71                           ;        of conditions and the following disclaimer in the documentation and/or other
    72                           ;        materials provided with the distribution.
    73                           ; 
    74                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    75                           ;        software without specific prior written permission.
    76                           ; 
    77                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    78                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    79                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    80                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    81                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    82                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    83                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    84                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    85                           ; 
    86                           ; 
    87                           ; Code-generator required, PIC18F45K22 Definitions
    88                           ; 
    89                           ; SFR Addresses
    90  0000                     
    91                           	psect	idataBANK0
    92  000D8A                     __pidataBANK0:
    93                           	opt stack 0
    94                           
    95                           ;initializer for _KD
    96  000D8A  00                 	db	0
    97  000D8B  20                 	db	32
    98  000D8C  41                 	db	65
    99                           
   100                           ;initializer for _KP
   101  000D8D  CD                 	db	205
   102  000D8E  4C                 	db	76
   103  000D8F  3F                 	db	63
   104  0000                     _T4CONbits	set	3921
   105  0000                     _T4CON	set	3921
   106  0000                     _TMR4	set	3923
   107  0000                     _PR4	set	3922
   108  0000                     _CCPR5H	set	3926
   109  0000                     _CCPR5L	set	3925
   110  0000                     _CCP5CON	set	3924
   111  0000                     _CCPTMRS1bits	set	3912
   112  0000                     _CCPR4H	set	3929
   113  0000                     _CCPR4L	set	3928
   114  0000                     _CCP4CON	set	3927
   115  0000                     _ANSELA	set	3896
   116  0000                     _ANSELE	set	3900
   117  0000                     _ANSELB	set	3897
   118  0000                     _ANSELC	set	3898
   119  0000                     _ANSELD	set	3899
   120  0000                     _RCONbits	set	4048
   121  0000                     _RCREG1	set	4014
   122  0000                     _RCSTA1bits	set	4011
   123  0000                     _TXREG1	set	4013
   124  0000                     _TXSTA1bits	set	4012
   125  0000                     _SPBRGH1	set	4016
   126  0000                     _SPBRG1	set	4015
   127  0000                     _TXSTA1	set	4012
   128  0000                     _RCSTA1	set	4011
   129  0000                     _BAUDCON1	set	4024
   130  0000                     _PIE1bits	set	3997
   131  0000                     _ADCON0bits	set	4034
   132  0000                     _ADRESH	set	4036
   133  0000                     _ADRESL	set	4035
   134  0000                     _ADCON2	set	4032
   135  0000                     _ADCON1	set	4033
   136  0000                     _ADCON0	set	4034
   137  0000                     _PIR5bits	set	3966
   138  0000                     _T2CONbits	set	4026
   139  0000                     _T2CON	set	4026
   140  0000                     _PIR1bits	set	3998
   141  0000                     _TMR2	set	4028
   142  0000                     _PR2	set	4027
   143  0000                     _PORTBbits	set	3969
   144  0000                     _INTCONbits	set	4082
   145  0000                     _INTCON2bits	set	4081
   146  0000                     _WPUB	set	3937
   147  0000                     _TRISD	set	3989
   148  0000                     _TRISC	set	3988
   149  0000                     _TRISB	set	3987
   150  0000                     _TRISA	set	3986
   151  0000                     _TRISE	set	3990
   152  0000                     _LATC	set	3979
   153  0000                     _LATB	set	3978
   154  0000                     _LATA	set	3977
   155  0000                     _LATD	set	3980
   156  0000                     _LATE	set	3981
   157  0000                     _OSCTUNE	set	3995
   158  0000                     _OSCCON2	set	4050
   159  0000                     _OSCCON	set	4051
   160  0000                     _LATD2	set	31842
   161  0000                     _LATD0	set	31840
   162  0000                     _LATC2	set	31834
   163  0000                     _LATC3	set	31835
   164  0000                     _LATC1	set	31833
   165  0000                     _LATC7	set	31839
   166  0000                     _PLLRDY	set	32407
   167                           
   168                           ; #config settings
   169  0000                     
   170                           	psect	cinit
   171  000ADE                     __pcinit:
   172                           	opt stack 0
   173  000ADE                     start_initialization:
   174                           	opt stack 0
   175  000ADE                     __initialization:
   176                           	opt stack 0
   177                           
   178                           ; Initialize objects allocated to BANK0 (6 bytes)
   179                           ; load TBLPTR registers with __pidataBANK0
   180  000ADE  0E8A               	movlw	low __pidataBANK0
   181  000AE0  6EF6               	movwf	tblptrl,c
   182  000AE2  0E0D               	movlw	high __pidataBANK0
   183  000AE4  6EF7               	movwf	tblptrh,c
   184  000AE6  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   185  000AE8  6EF8               	movwf	tblptru,c
   186  000AEA  EE00  F0B3         	lfsr	0,__pdataBANK0
   187  000AEE  EE10 F006          	lfsr	1,6
   188  000AF2                     copy_data0:
   189  000AF2  0009               	tblrd		*+
   190  000AF4  CFF5 FFEE          	movff	tablat,postinc0
   191  000AF8  50E5               	movf	postdec1,w,c
   192  000AFA  50E1               	movf	fsr1l,w,c
   193  000AFC  E1FA               	bnz	copy_data0
   194                           
   195                           ; Clear objects allocated to BANK0 (37 bytes)
   196  000AFE  EE00  F08E         	lfsr	0,__pbssBANK0
   197  000B02  0E25               	movlw	37
   198  000B04                     clear_0:
   199  000B04  6AEE               	clrf	postinc0,c
   200  000B06  06E8               	decf	wreg,f,c
   201  000B08  E1FD               	bnz	clear_0
   202                           
   203                           ; Clear objects allocated to BITCOMRAM (1 bytes)
   204  000B0A  6A4C               	clrf	(__pbitbssCOMRAM/(0+8))& (0+255),c
   205                           
   206                           ; Clear objects allocated to COMRAM (17 bytes)
   207  000B0C  EE00  F03B         	lfsr	0,__pbssCOMRAM
   208  000B10  0E11               	movlw	17
   209  000B12                     clear_1:
   210  000B12  6AEE               	clrf	postinc0,c
   211  000B14  06E8               	decf	wreg,f,c
   212  000B16  E1FD               	bnz	clear_1
   213  000B18                     end_of_initialization:
   214                           	opt stack 0
   215  000B18                     __end_of__initialization:
   216                           	opt stack 0
   217  000B18  904D               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   218  000B1A  924D               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   219  000B1C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   220  000B1E  6EF8               	movwf	tblptru,c
   221  000B20  0100               	movlb	0
   222  000B22  EF6D  F000         	goto	_main	;jump to C main() function
   223                           tblptru	equ	0xFF8
   224                           tblptrh	equ	0xFF7
   225                           tblptrl	equ	0xFF6
   226                           tablat	equ	0xFF5
   227                           postinc0	equ	0xFEE
   228                           wreg	equ	0xFE8
   229                           postdec1	equ	0xFE5
   230                           fsr1l	equ	0xFE1
   231                           
   232                           	psect	bitbssCOMRAM
   233  000260                     __pbitbssCOMRAM:
   234                           	opt stack 0
   235  000260                     _flag_inicio:
   236                           	opt stack 0
   237  000260                     	ds	1
   238                           tblptru	equ	0xFF8
   239                           tblptrh	equ	0xFF7
   240                           tblptrl	equ	0xFF6
   241                           tablat	equ	0xFF5
   242                           postinc0	equ	0xFEE
   243                           wreg	equ	0xFE8
   244                           postdec1	equ	0xFE5
   245                           fsr1l	equ	0xFE1
   246                           
   247                           	psect	bssCOMRAM
   248  00003B                     __pbssCOMRAM:
   249                           	opt stack 0
   250  00003B                     _EUSART1_OverrunErrorHandler:
   251                           	opt stack 0
   252  00003B                     	ds	2
   253  00003D                     _EUSART1_FramingErrorHandler:
   254                           	opt stack 0
   255  00003D                     	ds	2
   256  00003F                     _set_point:
   257                           	opt stack 0
   258  00003F                     	ds	2
   259  000041                     _EUSART1_RxDefaultInterruptHandler:
   260                           	opt stack 0
   261  000041                     	ds	2
   262  000043                     _EUSART1_TxDefaultInterruptHandler:
   263                           	opt stack 0
   264  000043                     	ds	2
   265  000045                     _eusart1RxLastError:
   266                           	opt stack 0
   267  000045                     	ds	1
   268  000046                     _eusart1RxCount:
   269                           	opt stack 0
   270  000046                     	ds	1
   271  000047                     _eusart1RxTail:
   272                           	opt stack 0
   273  000047                     	ds	1
   274  000048                     _eusart1RxHead:
   275                           	opt stack 0
   276  000048                     	ds	1
   277  000049                     _eusart1TxBufferRemaining:
   278                           	opt stack 0
   279  000049                     	ds	1
   280  00004A                     _eusart1TxTail:
   281                           	opt stack 0
   282  00004A                     	ds	1
   283  00004B                     _eusart1TxHead:
   284                           	opt stack 0
   285  00004B                     	ds	1
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           postdec1	equ	0xFE5
   293                           fsr1l	equ	0xFE1
   294                           
   295                           	psect	bssBANK0
   296  00008E                     __pbssBANK0:
   297                           	opt stack 0
   298  00008E                     _eusart1RxStatusBuffer:
   299                           	opt stack 0
   300  00008E                     	ds	8
   301  000096                     _eusart1RxBuffer:
   302                           	opt stack 0
   303  000096                     	ds	8
   304  00009E                     _eusart1TxBuffer:
   305                           	opt stack 0
   306  00009E                     	ds	8
   307  0000A6                     calculo_PID@last_error:
   308                           	opt stack 0
   309  0000A6                     	ds	3
   310  0000A9                     _EUSART1_ErrorHandler:
   311                           	opt stack 0
   312  0000A9                     	ds	2
   313  0000AB                     _sensor_derecho:
   314                           	opt stack 0
   315  0000AB                     	ds	2
   316  0000AD                     _sensor_derecho_delantero:
   317                           	opt stack 0
   318  0000AD                     	ds	2
   319  0000AF                     _sensor_izquierdo_delantero:
   320                           	opt stack 0
   321  0000AF                     	ds	2
   322  0000B1                     _sensor_izquierdo:
   323                           	opt stack 0
   324  0000B1                     	ds	2
   325                           tblptru	equ	0xFF8
   326                           tblptrh	equ	0xFF7
   327                           tblptrl	equ	0xFF6
   328                           tablat	equ	0xFF5
   329                           postinc0	equ	0xFEE
   330                           wreg	equ	0xFE8
   331                           postdec1	equ	0xFE5
   332                           fsr1l	equ	0xFE1
   333                           
   334                           	psect	dataBANK0
   335  0000B3                     __pdataBANK0:
   336                           	opt stack 0
   337  0000B3                     _KD:
   338                           	opt stack 0
   339  0000B3                     	ds	3
   340  0000B6                     _KP:
   341                           	opt stack 0
   342  0000B6                     	ds	3
   343                           tblptru	equ	0xFF8
   344                           tblptrh	equ	0xFF7
   345                           tblptrl	equ	0xFF6
   346                           tablat	equ	0xFF5
   347                           postinc0	equ	0xFEE
   348                           wreg	equ	0xFE8
   349                           postdec1	equ	0xFE5
   350                           fsr1l	equ	0xFE1
   351                           
   352                           	psect	cstackBANK0
   353  000060                     __pcstackBANK0:
   354                           	opt stack 0
   355  000060                     calculo_PID@correccion:
   356                           	opt stack 0
   357                           
   358                           ; 3 bytes @ 0x0
   359  000060                     	ds	3
   360  000063                     calculo_PID@valor_proporcional:
   361                           	opt stack 0
   362                           
   363                           ; 3 bytes @ 0x3
   364  000063                     	ds	3
   365  000066                     calculo_PID@valor_diferencial:
   366                           	opt stack 0
   367                           
   368                           ; 3 bytes @ 0x6
   369  000066                     	ds	3
   370  000069                     calculo_PID@error:
   371                           	opt stack 0
   372                           
   373                           ; 3 bytes @ 0x9
   374  000069                     	ds	3
   375  00006C                     ?___fttol:
   376                           	opt stack 0
   377  00006C                     ___fttol@f1:
   378                           	opt stack 0
   379                           
   380                           ; 3 bytes @ 0xC
   381  00006C                     	ds	4
   382  000070                     ??___fttol:
   383                           
   384                           ; 1 bytes @ 0x10
   385  000070                     	ds	5
   386  000075                     ___fttol@sign1:
   387                           	opt stack 0
   388                           
   389                           ; 1 bytes @ 0x15
   390  000075                     	ds	1
   391  000076                     ___fttol@lval:
   392                           	opt stack 0
   393                           
   394                           ; 4 bytes @ 0x16
   395  000076                     	ds	4
   396  00007A                     ___fttol@exp1:
   397                           	opt stack 0
   398                           
   399                           ; 1 bytes @ 0x1A
   400  00007A                     	ds	1
   401  00007B                     ??_main:
   402                           
   403                           ; 1 bytes @ 0x1B
   404  00007B                     	ds	2
   405  00007D                     main@valor_sensor_izquierdo_delantero:
   406                           	opt stack 0
   407                           
   408                           ; 2 bytes @ 0x1D
   409  00007D                     	ds	2
   410  00007F                     main@valor_sensor_derecho_delantero:
   411                           	opt stack 0
   412                           
   413                           ; 2 bytes @ 0x1F
   414  00007F                     	ds	2
   415  000081                     main@velocidad_motor_A:
   416                           	opt stack 0
   417                           
   418                           ; 2 bytes @ 0x21
   419  000081                     	ds	2
   420  000083                     main@velocidad_motor_B:
   421                           	opt stack 0
   422                           
   423                           ; 2 bytes @ 0x23
   424  000083                     	ds	2
   425  000085                     main@inicio:
   426                           	opt stack 0
   427                           
   428                           ; 1 bytes @ 0x25
   429  000085                     	ds	1
   430  000086                     main@media_sensores:
   431                           	opt stack 0
   432                           
   433                           ; 1 bytes @ 0x26
   434  000086                     	ds	1
   435  000087                     main@valor_sensor_izquierdo:
   436                           	opt stack 0
   437                           
   438                           ; 2 bytes @ 0x27
   439  000087                     	ds	2
   440  000089                     main@valor_sensor_derecho:
   441                           	opt stack 0
   442                           
   443                           ; 2 bytes @ 0x29
   444  000089                     	ds	2
   445  00008B                     main@correccion:
   446                           	opt stack 0
   447                           
   448                           ; 2 bytes @ 0x2B
   449  00008B                     	ds	2
   450  00008D                     main@mano:
   451                           	opt stack 0
   452                           
   453                           ; 1 bytes @ 0x2D
   454  00008D                     	ds	1
   455                           tblptru	equ	0xFF8
   456                           tblptrh	equ	0xFF7
   457                           tblptrl	equ	0xFF6
   458                           tablat	equ	0xFF5
   459                           postinc0	equ	0xFEE
   460                           wreg	equ	0xFE8
   461                           postdec1	equ	0xFE5
   462                           fsr1l	equ	0xFE1
   463                           
   464                           	psect	cstackCOMRAM
   465  000001                     __pcstackCOMRAM:
   466                           	opt stack 0
   467  000001                     ??_INTERRUPT_InterruptManager:
   468                           
   469                           ; 1 bytes @ 0x0
   470  000001                     	ds	18
   471  000013                     ?_ADC_GetConversion:
   472                           	opt stack 0
   473  000013                     ?___awdiv:
   474                           	opt stack 0
   475  000013                     ?___ftpack:
   476                           	opt stack 0
   477  000013                     ?___ftneg:
   478                           	opt stack 0
   479  000013                     PWM4_LoadDutyValue@dutyValue:
   480                           	opt stack 0
   481  000013                     PWM5_LoadDutyValue@dutyValue:
   482                           	opt stack 0
   483  000013                     EUSART1_SetFramingErrorHandler@interruptHandler:
   484                           	opt stack 0
   485  000013                     EUSART1_SetOverrunErrorHandler@interruptHandler:
   486                           	opt stack 0
   487  000013                     EUSART1_SetErrorHandler@interruptHandler:
   488                           	opt stack 0
   489  000013                     EUSART1_SetTxInterruptHandler@interruptHandler:
   490                           	opt stack 0
   491  000013                     EUSART1_SetRxInterruptHandler@interruptHandler:
   492                           	opt stack 0
   493  000013                     ___awdiv@dividend:
   494                           	opt stack 0
   495  000013                     ___ftpack@arg:
   496                           	opt stack 0
   497  000013                     ___ftneg@f1:
   498                           	opt stack 0
   499                           
   500                           ; 3 bytes @ 0x12
   501  000013                     	ds	2
   502  000015                     ??_ADC_GetConversion:
   503  000015                     ??_PWM5_LoadDutyValue:
   504  000015                     ??_PWM4_LoadDutyValue:
   505  000015                     ___awdiv@divisor:
   506                           	opt stack 0
   507                           
   508                           ; 2 bytes @ 0x14
   509  000015                     	ds	1
   510  000016                     ___ftpack@exp:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x15
   514  000016                     	ds	1
   515  000017                     ADC_GetConversion@channel:
   516                           	opt stack 0
   517  000017                     ___awdiv@counter:
   518                           	opt stack 0
   519  000017                     ___ftpack@sign:
   520                           	opt stack 0
   521  000017                     mover_motor_A@velocidad:
   522                           	opt stack 0
   523  000017                     mover_motor_B@velocidad:
   524                           	opt stack 0
   525                           
   526                           ; 2 bytes @ 0x16
   527  000017                     	ds	1
   528  000018                     ??___ftpack:
   529  000018                     ___awdiv@sign:
   530                           	opt stack 0
   531  000018                     leer_sensores@sensor:
   532                           	opt stack 0
   533                           
   534                           ; 16 bytes @ 0x17
   535  000018                     	ds	1
   536  000019                     moverse@velocidad_A:
   537                           	opt stack 0
   538  000019                     ___awdiv@quotient:
   539                           	opt stack 0
   540                           
   541                           ; 2 bytes @ 0x18
   542  000019                     	ds	2
   543  00001B                     ?___ftadd:
   544                           	opt stack 0
   545  00001B                     ?___awtoft:
   546                           	opt stack 0
   547  00001B                     moverse@velocidad_B:
   548                           	opt stack 0
   549  00001B                     ___awtoft@c:
   550                           	opt stack 0
   551  00001B                     ___ftadd@f1:
   552                           	opt stack 0
   553                           
   554                           ; 3 bytes @ 0x1A
   555  00001B                     	ds	2
   556  00001D                     
   557                           ; 1 bytes @ 0x1C
   558  00001D                     	ds	1
   559  00001E                     ___awtoft@sign:
   560                           	opt stack 0
   561  00001E                     ___ftadd@f2:
   562                           	opt stack 0
   563                           
   564                           ; 3 bytes @ 0x1D
   565  00001E                     	ds	3
   566  000021                     ??___ftadd:
   567                           
   568                           ; 1 bytes @ 0x20
   569  000021                     	ds	3
   570  000024                     ___ftadd@sign:
   571                           	opt stack 0
   572                           
   573                           ; 1 bytes @ 0x23
   574  000024                     	ds	1
   575  000025                     ___ftadd@exp2:
   576                           	opt stack 0
   577                           
   578                           ; 1 bytes @ 0x24
   579  000025                     	ds	1
   580  000026                     ___ftadd@exp1:
   581                           	opt stack 0
   582                           
   583                           ; 1 bytes @ 0x25
   584  000026                     	ds	1
   585  000027                     ?___ftmul:
   586                           	opt stack 0
   587  000027                     ___ftmul@f1:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x26
   591  000027                     	ds	3
   592  00002A                     ___ftmul@f2:
   593                           	opt stack 0
   594                           
   595                           ; 3 bytes @ 0x29
   596  00002A                     	ds	3
   597  00002D                     ??___ftmul:
   598                           
   599                           ; 1 bytes @ 0x2C
   600  00002D                     	ds	3
   601  000030                     ___ftmul@exp:
   602                           	opt stack 0
   603                           
   604                           ; 1 bytes @ 0x2F
   605  000030                     	ds	1
   606  000031                     ___ftmul@f3_as_product:
   607                           	opt stack 0
   608                           
   609                           ; 3 bytes @ 0x30
   610  000031                     	ds	3
   611  000034                     ___ftmul@cntr:
   612                           	opt stack 0
   613                           
   614                           ; 1 bytes @ 0x33
   615  000034                     	ds	1
   616  000035                     ___ftmul@sign:
   617                           	opt stack 0
   618                           
   619                           ; 1 bytes @ 0x34
   620  000035                     	ds	1
   621  000036                     ?_calculo_PID:
   622                           	opt stack 0
   623  000036                     calculo_PID@valor_sensor:
   624                           	opt stack 0
   625                           
   626                           ; 2 bytes @ 0x35
   627  000036                     	ds	3
   628  000039                     ??_calculo_PID:
   629                           
   630                           ; 1 bytes @ 0x38
   631  000039                     	ds	2
   632                           tblptru	equ	0xFF8
   633                           tblptrh	equ	0xFF7
   634                           tblptrl	equ	0xFF6
   635                           tablat	equ	0xFF5
   636                           postinc0	equ	0xFEE
   637                           wreg	equ	0xFE8
   638                           postdec1	equ	0xFE5
   639                           fsr1l	equ	0xFE1
   640                           
   641 ;;
   642 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   643 ;;
   644 ;; *************** function _main *****************
   645 ;; Defined at:
   646 ;;		line 89 in file "main.c"
   647 ;; Parameters:    Size  Location     Type
   648 ;;		None
   649 ;; Auto vars:     Size  Location     Type
   650 ;;  correccion      2   43[BANK0 ] int 
   651 ;;  valor_sensor    2   41[BANK0 ] int 
   652 ;;  valor_sensor    2   39[BANK0 ] int 
   653 ;;  velocidad_mo    2   35[BANK0 ] int 
   654 ;;  velocidad_mo    2   33[BANK0 ] int 
   655 ;;  valor_sensor    2   31[BANK0 ] int 
   656 ;;  valor_sensor    2   29[BANK0 ] int 
   657 ;;  mano            1   45[BANK0 ] unsigned char 
   658 ;;  media_sensor    1   38[BANK0 ] unsigned char 
   659 ;;  inicio          1   37[BANK0 ] unsigned char 
   660 ;; Return value:  Size  Location     Type
   661 ;;                  1    wreg      void 
   662 ;; Registers used:
   663 ;;		wreg, status,2, status,0, cstack
   664 ;; Tracked objects:
   665 ;;		On entry : 0/0
   666 ;;		On exit  : 0/0
   667 ;;		Unchanged: 0/0
   668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   669 ;;      Params:         0       0       0       0       0       0       0
   670 ;;      Locals:         0      17       0       0       0       0       0
   671 ;;      Temps:          0       2       0       0       0       0       0
   672 ;;      Totals:         0      19       0       0       0       0       0
   673 ;;Total ram usage:       19 bytes
   674 ;; Hardware stack levels required when called:    7
   675 ;; This function calls:
   676 ;;		_ADC_GetConversion
   677 ;;		_SYSTEM_Initialize
   678 ;;		___awdiv
   679 ;;		___fttol
   680 ;;		_calculo_PID
   681 ;;		_leer_sensores
   682 ;;		_moverse
   683 ;; This function is called by:
   684 ;;		Startup code after reset
   685 ;; This function uses a non-reentrant model
   686 ;;
   687                           
   688                           	psect	text0
   689  0000DA                     __ptext0:
   690                           	opt stack 0
   691  0000DA                     _main:
   692                           	opt stack 24
   693                           
   694                           ;main.c: 92: SYSTEM_Initialize();
   695                           
   696                           ;incstack = 0
   697  0000DA  EC30  F006         	call	_SYSTEM_Initialize	;wreg free
   698                           
   699                           ;main.c: 99: (INTCONbits.GIE = 1);
   700  0000DE  8EF2               	bsf	intcon,7,c	;volatile
   701                           
   702                           ;main.c: 109: char mano;
   703                           ;main.c: 110: char inicio;
   704                           ;main.c: 111: int valor_sensor_izquierdo, valor_sensor_derecho;
   705                           ;main.c: 112: int valor_sensor_izquierdo_delantero, valor_sensor_derecho_delantero;
   706                           ;main.c: 113: char media_sensores;
   707                           ;main.c: 114: int correccion;
   708                           ;main.c: 115: int velocidad_motor_A, velocidad_motor_B;
   709                           ;main.c: 118: while(ADC_GetConversion(0) < 700)
   710  0000E0  D007               	goto	l141
   711  0000E2                     l139:
   712                           
   713                           ;main.c: 119: {
   714                           ;main.c: 120: if(PORTBbits.RB1 == 0)
   715  0000E2  B281               	btfsc	3969,1,c	;volatile
   716  0000E4  D002               	goto	l140
   717                           
   718                           ;main.c: 121: mano = 0;
   719  0000E6  0E00               	movlw	0
   720  0000E8  D001               	goto	L1
   721  0000EA                     l140:
   722                           
   723                           ;main.c: 122: else
   724                           ;main.c: 123: mano = 1;
   725                           
   726                           ; BSR set to: 0
   727  0000EA  0E01               	movlw	1
   728  0000EC                     L1:
   729  0000EC  0100               	movlb	0	; () banked
   730  0000EE  6F8D               	movwf	main@mano& (0+255),b
   731  0000F0                     l141:
   732                           
   733                           ; BSR set to: 0
   734                           
   735                           ; BSR set to: 0
   736  0000F0  0E00               	movlw	0
   737  0000F2  EC01  F006         	call	_ADC_GetConversion
   738  0000F6  0EBC               	movlw	188
   739  0000F8  5C13               	subwf	?_ADC_GetConversion,w,c
   740  0000FA  0E02               	movlw	2
   741  0000FC  5814               	subwfb	?_ADC_GetConversion+1,w,c
   742  0000FE  A0D8               	btfss	status,0,c
   743  000100  D7F0               	goto	l139
   744                           
   745                           ;main.c: 125: }
   746                           ;main.c: 127: for(inicio = 0; inicio < 16; inicio++)
   747  000102  0E00               	movlw	0
   748  000104  0100               	movlb	0	; () banked
   749  000106  6F85               	movwf	main@inicio& (0+255),b
   750  000108  D014               	goto	L2
   751  00010A                     l143:
   752                           
   753                           ; BSR set to: 0
   754                           ;main.c: 128: {
   755                           ;main.c: 129: LATC7 =~ LATC7;
   756  00010A  BE8B               	btfsc	3979,7,c	;volatile
   757  00010C  D002               	goto	u2410
   758  00010E  8E8B               	bsf	3979,7,c	;volatile
   759  000110  D001               	goto	u2425
   760  000112                     u2410:
   761  000112  9E8B               	bcf	3979,7,c	;volatile
   762  000114                     u2425:
   763                           
   764                           ;main.c: 130: _delay((unsigned long)((100)*(64000000/4000.0)));
   765  000114  0E09               	movlw	9
   766  000116  0100               	movlb	0	; () banked
   767  000118  6F7C               	movwf	(??_main+1)& (0+255),b
   768  00011A  0E1E               	movlw	30
   769  00011C  6F7B               	movwf	??_main& (0+255),b
   770  00011E  0EE4               	movlw	228
   771  000120                     u2537:
   772  000120  2EE8               	decfsz	wreg,f,c
   773  000122  D7FE               	bra	u2537
   774  000124  2F7B               	decfsz	??_main& (0+255),f,b
   775  000126  D7FC               	bra	u2537
   776  000128  2F7C               	decfsz	(??_main+1)& (0+255),f,b
   777  00012A  D7FA               	bra	u2537
   778  00012C  F000               	nop	
   779  00012E  0100               	movlb	0	; () banked
   780  000130  2B85               	incf	main@inicio& (0+255),f,b
   781  000132                     L2:
   782  000132  0E0F               	movlw	15
   783  000134  6585               	cpfsgt	main@inicio& (0+255),b
   784  000136  D7E9               	goto	l143
   785                           
   786                           ; BSR set to: 0
   787                           ;main.c: 131: }
   788                           ;main.c: 133: flag_inicio = 1;
   789  000138  804C               	bsf	_flag_inicio/(0+8),_flag_inicio& (0+7),c
   790  00013A                     
   791                           ;main.c: 136: {
   792                           ;main.c: 137: for(media_sensores = 0; media_sensores < 5; media_sensores++)
   793                           
   794                           ; BSR set to: 0
   795  00013A  0E00               	movlw	0
   796  00013C  0100               	movlb	0	; () banked
   797  00013E  6F86               	movwf	main@media_sensores& (0+255),b
   798  000140                     l2593:
   799                           
   800                           ; BSR set to: 0
   801  000140  0E04               	movlw	4
   802  000142  6586               	cpfsgt	main@media_sensores& (0+255),b
   803  000144  D001               	goto	l146
   804  000146  D021               	goto	u2460
   805  000148                     l146:
   806                           
   807                           ; BSR set to: 0
   808                           ;main.c: 138: {
   809                           ;main.c: 139: leer_sensores();
   810                           
   811                           ; BSR set to: 0
   812  000148  ECE8  F004         	call	_leer_sensores	;wreg free
   813                           
   814                           ;main.c: 140: if(mano == 1)
   815  00014C  0100               	movlb	0	; () banked
   816  00014E  058D               	decf	main@mano& (0+255),w,b
   817  000150  A4D8               	btfss	status,2,c
   818  000152  D00D               	goto	l148
   819                           
   820                           ; BSR set to: 0
   821                           ;main.c: 141: {
   822                           ;main.c: 142: valor_sensor_izquierdo = valor_sensor_izquierdo + sensor_izquierdo;
   823  000154  51B1               	movf	_sensor_izquierdo& (0+255),w,b
   824  000156  2587               	addwf	main@valor_sensor_izquierdo& (0+255),w,b
   825  000158  6F87               	movwf	main@valor_sensor_izquierdo& (0+255),b
   826  00015A  51B2               	movf	(_sensor_izquierdo+1)& (0+255),w,b
   827  00015C  2188               	addwfc	(main@valor_sensor_izquierdo+1)& (0+255),w,b
   828  00015E  6F88               	movwf	(main@valor_sensor_izquierdo+1)& (0+255),b
   829                           
   830                           ;main.c: 143: valor_sensor_izquierdo_delantero = valor_sensor_izquierdo_delantero + sens
      +                          or_izquierdo_delantero;
   831  000160  51AF               	movf	_sensor_izquierdo_delantero& (0+255),w,b
   832  000162  257D               	addwf	main@valor_sensor_izquierdo_delantero& (0+255),w,b
   833  000164  6F7D               	movwf	main@valor_sensor_izquierdo_delantero& (0+255),b
   834  000166  51B0               	movf	(_sensor_izquierdo_delantero+1)& (0+255),w,b
   835  000168  217E               	addwfc	(main@valor_sensor_izquierdo_delantero+1)& (0+255),w,b
   836  00016A  6F7E               	movwf	(main@valor_sensor_izquierdo_delantero+1)& (0+255),b
   837                           
   838                           ;main.c: 144: }else
   839  00016C  D00C               	goto	l149
   840  00016E                     l148:
   841                           
   842                           ; BSR set to: 0
   843                           ;main.c: 145: {
   844                           ;main.c: 146: valor_sensor_derecho = valor_sensor_derecho + sensor_derecho;
   845                           
   846                           ; BSR set to: 0
   847  00016E  51AB               	movf	_sensor_derecho& (0+255),w,b
   848  000170  2589               	addwf	main@valor_sensor_derecho& (0+255),w,b
   849  000172  6F89               	movwf	main@valor_sensor_derecho& (0+255),b
   850  000174  51AC               	movf	(_sensor_derecho+1)& (0+255),w,b
   851  000176  218A               	addwfc	(main@valor_sensor_derecho+1)& (0+255),w,b
   852  000178  6F8A               	movwf	(main@valor_sensor_derecho+1)& (0+255),b
   853                           
   854                           ;main.c: 147: valor_sensor_derecho_delantero = valor_sensor_derecho_delantero + sensor_d
      +                          erecho_delantero;
   855  00017A  51AD               	movf	_sensor_derecho_delantero& (0+255),w,b
   856  00017C  257F               	addwf	main@valor_sensor_derecho_delantero& (0+255),w,b
   857  00017E  6F7F               	movwf	main@valor_sensor_derecho_delantero& (0+255),b
   858  000180  51AE               	movf	(_sensor_derecho_delantero+1)& (0+255),w,b
   859  000182  2180               	addwfc	(main@valor_sensor_derecho_delantero+1)& (0+255),w,b
   860  000184  6F80               	movwf	(main@valor_sensor_derecho_delantero+1)& (0+255),b
   861  000186                     l149:
   862                           
   863                           ; BSR set to: 0
   864                           
   865                           ; BSR set to: 0
   866  000186  2B86               	incf	main@media_sensores& (0+255),f,b
   867  000188  D7DB               	goto	l2593
   868  00018A                     u2460:
   869                           
   870                           ; BSR set to: 0
   871                           ;main.c: 148: }
   872                           ;main.c: 149: }
   873                           ;main.c: 150: if(mano == 1)
   874                           
   875                           ; BSR set to: 0
   876  00018A  058D               	decf	main@mano& (0+255),w,b
   877  00018C  A4D8               	btfss	status,2,c
   878  00018E  D01D               	goto	l150
   879                           
   880                           ; BSR set to: 0
   881                           ;main.c: 151: {
   882                           ;main.c: 152: valor_sensor_izquierdo = valor_sensor_izquierdo / 5;
   883  000190  C087  F013         	movff	main@valor_sensor_izquierdo,___awdiv@dividend
   884  000194  C088  F014         	movff	main@valor_sensor_izquierdo+1,___awdiv@dividend+1
   885  000198  0E00               	movlw	0
   886  00019A  6E16               	movwf	___awdiv@divisor+1,c
   887  00019C  0E05               	movlw	5
   888  00019E  6E15               	movwf	___awdiv@divisor,c
   889  0001A0  EC6C  F004         	call	___awdiv	;wreg free
   890  0001A4  C013  F087         	movff	?___awdiv,main@valor_sensor_izquierdo
   891  0001A8  C014  F088         	movff	?___awdiv+1,main@valor_sensor_izquierdo+1
   892                           
   893                           ;main.c: 153: valor_sensor_izquierdo_delantero = valor_sensor_izquierdo_delantero / 5;
   894  0001AC  C07D  F013         	movff	main@valor_sensor_izquierdo_delantero,___awdiv@dividend
   895  0001B0  C07E  F014         	movff	main@valor_sensor_izquierdo_delantero+1,___awdiv@dividend+1
   896  0001B4  0E00               	movlw	0
   897  0001B6  6E16               	movwf	___awdiv@divisor+1,c
   898  0001B8  0E05               	movlw	5
   899  0001BA  6E15               	movwf	___awdiv@divisor,c
   900  0001BC  EC6C  F004         	call	___awdiv	;wreg free
   901  0001C0  C013  F07D         	movff	?___awdiv,main@valor_sensor_izquierdo_delantero
   902  0001C4  C014  F07E         	movff	?___awdiv+1,main@valor_sensor_izquierdo_delantero+1
   903                           
   904                           ;main.c: 154: }else
   905  0001C8  D01C               	goto	l151
   906  0001CA                     l150:
   907                           
   908                           ;main.c: 155: {
   909                           ;main.c: 156: valor_sensor_derecho = valor_sensor_derecho / 5;
   910  0001CA  C089  F013         	movff	main@valor_sensor_derecho,___awdiv@dividend
   911  0001CE  C08A  F014         	movff	main@valor_sensor_derecho+1,___awdiv@dividend+1
   912  0001D2  0E00               	movlw	0
   913  0001D4  6E16               	movwf	___awdiv@divisor+1,c
   914  0001D6  0E05               	movlw	5
   915  0001D8  6E15               	movwf	___awdiv@divisor,c
   916  0001DA  EC6C  F004         	call	___awdiv	;wreg free
   917  0001DE  C013  F089         	movff	?___awdiv,main@valor_sensor_derecho
   918  0001E2  C014  F08A         	movff	?___awdiv+1,main@valor_sensor_derecho+1
   919                           
   920                           ;main.c: 157: valor_sensor_derecho_delantero = valor_sensor_derecho_delantero / 5;
   921  0001E6  C07F  F013         	movff	main@valor_sensor_derecho_delantero,___awdiv@dividend
   922  0001EA  C080  F014         	movff	main@valor_sensor_derecho_delantero+1,___awdiv@dividend+1
   923  0001EE  0E00               	movlw	0
   924  0001F0  6E16               	movwf	___awdiv@divisor+1,c
   925  0001F2  0E05               	movlw	5
   926  0001F4  6E15               	movwf	___awdiv@divisor,c
   927  0001F6  EC6C  F004         	call	___awdiv	;wreg free
   928  0001FA  C013  F07F         	movff	?___awdiv,main@valor_sensor_derecho_delantero
   929  0001FE  C014  F080         	movff	?___awdiv+1,main@valor_sensor_derecho_delantero+1
   930  000202                     l151:
   931                           
   932                           ;main.c: 158: }
   933                           ;main.c: 160: if(flag_inicio && mano == 1)
   934  000202  A04C               	btfss	_flag_inicio/(0+8),_flag_inicio& (0+7),c
   935  000204  D009               	goto	l152
   936  000206  0100               	movlb	0	; () banked
   937  000208  058D               	decf	main@mano& (0+255),w,b
   938  00020A  A4D8               	btfss	status,2,c
   939  00020C  D005               	goto	l152
   940                           
   941                           ; BSR set to: 0
   942                           ;main.c: 161: {
   943                           ;main.c: 162: set_point = valor_sensor_izquierdo;
   944  00020E  C087  F03F         	movff	main@valor_sensor_izquierdo,_set_point
   945  000212  C088  F040         	movff	main@valor_sensor_izquierdo+1,_set_point+1
   946  000216  D00A               	goto	L3
   947  000218                     l152:
   948  000218  A04C               	btfss	_flag_inicio/(0+8),_flag_inicio& (0+7),c
   949  00021A  D009               	goto	l154
   950  00021C  0100               	movlb	0	; () banked
   951  00021E  518D               	movf	main@mano& (0+255),w,b
   952  000220  A4D8               	btfss	status,2,c
   953  000222  D005               	goto	l154
   954                           
   955                           ; BSR set to: 0
   956                           ;main.c: 165: {
   957                           ;main.c: 166: set_point = valor_sensor_derecho;
   958  000224  C089  F03F         	movff	main@valor_sensor_derecho,_set_point
   959  000228  C08A  F040         	movff	main@valor_sensor_derecho+1,_set_point+1
   960  00022C                     L3:
   961                           
   962                           ;main.c: 167: flag_inicio = 0;
   963  00022C  904C               	bcf	_flag_inicio/(0+8),_flag_inicio& (0+7),c
   964  00022E                     l154:
   965                           
   966                           ;main.c: 168: }
   967                           ;main.c: 170: if(mano == 1)
   968                           
   969                           ; BSR set to: 0
   970                           
   971                           ; BSR set to: 0
   972  00022E  0100               	movlb	0	; () banked
   973  000230  058D               	decf	main@mano& (0+255),w,b
   974  000232  A4D8               	btfss	status,2,c
   975  000234  D032               	goto	l155
   976                           
   977                           ; BSR set to: 0
   978                           ;main.c: 171: {
   979                           ;main.c: 172: correccion = calculo_PID(valor_sensor_izquierdo);
   980  000236  C087  F036         	movff	main@valor_sensor_izquierdo,calculo_PID@valor_sensor
   981  00023A  C088  F037         	movff	main@valor_sensor_izquierdo+1,calculo_PID@valor_sensor+1
   982  00023E  EC4B  F003         	call	_calculo_PID	;wreg free
   983  000242  C036  F06C         	movff	?_calculo_PID,___fttol@f1
   984  000246  C037  F06D         	movff	?_calculo_PID+1,___fttol@f1+1
   985  00024A  C038  F06E         	movff	?_calculo_PID+2,___fttol@f1+2
   986  00024E  EC55  F002         	call	___fttol	;wreg free
   987  000252  C06C  F08B         	movff	?___fttol,main@correccion
   988  000256  C06D  F08C         	movff	?___fttol+1,main@correccion+1
   989                           
   990                           ;main.c: 173: velocidad_motor_A = 750 + correccion;
   991  00025A  0EEE               	movlw	238
   992  00025C  0100               	movlb	0	; () banked
   993  00025E  258B               	addwf	main@correccion& (0+255),w,b
   994  000260  6F81               	movwf	main@velocidad_motor_A& (0+255),b
   995  000262  0E02               	movlw	2
   996  000264  218C               	addwfc	(main@correccion+1)& (0+255),w,b
   997  000266  6F82               	movwf	(main@velocidad_motor_A+1)& (0+255),b
   998                           
   999                           ; BSR set to: 0
  1000                           ;main.c: 174: velocidad_motor_B = 750 - correccion;
  1001  000268  C08B  F07B         	movff	main@correccion,??_main
  1002  00026C  C08C  F07C         	movff	main@correccion+1,??_main+1
  1003  000270  1F7B               	comf	??_main& (0+255),f,b
  1004  000272  1F7C               	comf	(??_main+1)& (0+255),f,b
  1005  000274  4B7B               	infsnz	??_main& (0+255),f,b
  1006  000276  2B7C               	incf	(??_main+1)& (0+255),f,b
  1007  000278  0EEE               	movlw	238
  1008  00027A  257B               	addwf	??_main& (0+255),w,b
  1009  00027C  6F83               	movwf	main@velocidad_motor_B& (0+255),b
  1010  00027E  0E02               	movlw	2
  1011  000280  217C               	addwfc	(??_main+1)& (0+255),w,b
  1012  000282  6F84               	movwf	(main@velocidad_motor_B+1)& (0+255),b
  1013                           
  1014                           ;main.c: 175: moverse(velocidad_motor_A, velocidad_motor_B);
  1015  000284  C081  F019         	movff	main@velocidad_motor_A,moverse@velocidad_A
  1016  000288  C082  F01A         	movff	main@velocidad_motor_A+1,moverse@velocidad_A+1
  1017  00028C  C083  F01B         	movff	main@velocidad_motor_B,moverse@velocidad_B
  1018  000290  C084  F01C         	movff	main@velocidad_motor_B+1,moverse@velocidad_B+1
  1019  000294  EC67  F006         	call	_moverse	;wreg free
  1020                           
  1021                           ;main.c: 176: }else
  1022  000298  D750               	goto	l145
  1023  00029A                     l155:
  1024                           
  1025                           ;main.c: 177: {
  1026                           ;main.c: 178: correccion = calculo_PID(valor_sensor_derecho);
  1027  00029A  C089  F036         	movff	main@valor_sensor_derecho,calculo_PID@valor_sensor
  1028  00029E  C08A  F037         	movff	main@valor_sensor_derecho+1,calculo_PID@valor_sensor+1
  1029  0002A2  EC4B  F003         	call	_calculo_PID	;wreg free
  1030  0002A6  C036  F06C         	movff	?_calculo_PID,___fttol@f1
  1031  0002AA  C037  F06D         	movff	?_calculo_PID+1,___fttol@f1+1
  1032  0002AE  C038  F06E         	movff	?_calculo_PID+2,___fttol@f1+2
  1033  0002B2  EC55  F002         	call	___fttol	;wreg free
  1034  0002B6  C06C  F08B         	movff	?___fttol,main@correccion
  1035  0002BA  C06D  F08C         	movff	?___fttol+1,main@correccion+1
  1036                           
  1037                           ;main.c: 179: velocidad_motor_A = 750 - correccion;
  1038  0002BE  C08B  F07B         	movff	main@correccion,??_main
  1039  0002C2  C08C  F07C         	movff	main@correccion+1,??_main+1
  1040  0002C6  0100               	movlb	0	; () banked
  1041  0002C8  1F7B               	comf	??_main& (0+255),f,b
  1042  0002CA  1F7C               	comf	(??_main+1)& (0+255),f,b
  1043  0002CC  4B7B               	infsnz	??_main& (0+255),f,b
  1044  0002CE  2B7C               	incf	(??_main+1)& (0+255),f,b
  1045  0002D0  0EEE               	movlw	238
  1046  0002D2  257B               	addwf	??_main& (0+255),w,b
  1047  0002D4  6F81               	movwf	main@velocidad_motor_A& (0+255),b
  1048  0002D6  0E02               	movlw	2
  1049  0002D8  217C               	addwfc	(??_main+1)& (0+255),w,b
  1050  0002DA  6F82               	movwf	(main@velocidad_motor_A+1)& (0+255),b
  1051                           
  1052                           ; BSR set to: 0
  1053                           ;main.c: 180: velocidad_motor_B = 750 + correccion;
  1054  0002DC  0EEE               	movlw	238
  1055  0002DE  258B               	addwf	main@correccion& (0+255),w,b
  1056  0002E0  6F83               	movwf	main@velocidad_motor_B& (0+255),b
  1057  0002E2  0E02               	movlw	2
  1058  0002E4  218C               	addwfc	(main@correccion+1)& (0+255),w,b
  1059  0002E6  6F84               	movwf	(main@velocidad_motor_B+1)& (0+255),b
  1060                           
  1061                           ;main.c: 181: moverse(velocidad_motor_A, velocidad_motor_B);
  1062  0002E8  C081  F019         	movff	main@velocidad_motor_A,moverse@velocidad_A
  1063  0002EC  C082  F01A         	movff	main@velocidad_motor_A+1,moverse@velocidad_A+1
  1064  0002F0  C083  F01B         	movff	main@velocidad_motor_B,moverse@velocidad_B
  1065  0002F4  C084  F01C         	movff	main@velocidad_motor_B+1,moverse@velocidad_B+1
  1066  0002F8  EC67  F006         	call	_moverse	;wreg free
  1067  0002FC  D71E               	goto	l145
  1068  0002FE                     __end_of_main:
  1069                           	opt stack 0
  1070                           tblptru	equ	0xFF8
  1071                           tblptrh	equ	0xFF7
  1072                           tblptrl	equ	0xFF6
  1073                           tablat	equ	0xFF5
  1074                           intcon	equ	0xFF2
  1075                           postinc0	equ	0xFEE
  1076                           wreg	equ	0xFE8
  1077                           postdec1	equ	0xFE5
  1078                           fsr1l	equ	0xFE1
  1079                           status	equ	0xFD8
  1080                           
  1081 ;; *************** function _moverse *****************
  1082 ;; Defined at:
  1083 ;;		line 252 in file "main.c"
  1084 ;; Parameters:    Size  Location     Type
  1085 ;;  velocidad_A     2   24[COMRAM] int 
  1086 ;;  velocidad_B     2   26[COMRAM] int 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;		None
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      void 
  1091 ;; Registers used:
  1092 ;;		wreg, status,2, status,0, cstack
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1098 ;;      Params:         4       0       0       0       0       0       0
  1099 ;;      Locals:         0       0       0       0       0       0       0
  1100 ;;      Temps:          0       0       0       0       0       0       0
  1101 ;;      Totals:         4       0       0       0       0       0       0
  1102 ;;Total ram usage:        4 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; Hardware stack levels required when called:    6
  1105 ;; This function calls:
  1106 ;;		_mover_motor_A
  1107 ;;		_mover_motor_B
  1108 ;; This function is called by:
  1109 ;;		_main
  1110 ;; This function uses a non-reentrant model
  1111 ;;
  1112                           
  1113                           	psect	text1
  1114  000CCE                     __ptext1:
  1115                           	opt stack 0
  1116  000CCE                     _moverse:
  1117                           	opt stack 24
  1118                           
  1119                           ;main.c: 254: mover_motor_A(velocidad_A);
  1120                           
  1121                           ;incstack = 0
  1122  000CCE  C019  F017         	movff	moverse@velocidad_A,mover_motor_A@velocidad
  1123  000CD2  C01A  F018         	movff	moverse@velocidad_A+1,mover_motor_A@velocidad+1
  1124  000CD6  EC48  F005         	call	_mover_motor_A	;wreg free
  1125                           
  1126                           ;main.c: 255: mover_motor_B(velocidad_B);
  1127  000CDA  C01B  F017         	movff	moverse@velocidad_B,mover_motor_B@velocidad
  1128  000CDE  C01C  F018         	movff	moverse@velocidad_B+1,mover_motor_B@velocidad+1
  1129  000CE2  EC21  F005         	call	_mover_motor_B	;wreg free
  1130  000CE6  0012               	return		;funcret
  1131  000CE8                     __end_of_moverse:
  1132                           	opt stack 0
  1133                           tblptru	equ	0xFF8
  1134                           tblptrh	equ	0xFF7
  1135                           tblptrl	equ	0xFF6
  1136                           tablat	equ	0xFF5
  1137                           intcon	equ	0xFF2
  1138                           postinc0	equ	0xFEE
  1139                           wreg	equ	0xFE8
  1140                           postdec1	equ	0xFE5
  1141                           fsr1l	equ	0xFE1
  1142                           status	equ	0xFD8
  1143                           
  1144 ;; *************** function _mover_motor_B *****************
  1145 ;; Defined at:
  1146 ;;		line 218 in file "main.c"
  1147 ;; Parameters:    Size  Location     Type
  1148 ;;  velocidad       2   22[COMRAM] int 
  1149 ;; Auto vars:     Size  Location     Type
  1150 ;;		None
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  1    wreg      void 
  1153 ;; Registers used:
  1154 ;;		wreg, status,2, status,0, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1160 ;;      Params:         2       0       0       0       0       0       0
  1161 ;;      Locals:         0       0       0       0       0       0       0
  1162 ;;      Temps:          0       0       0       0       0       0       0
  1163 ;;      Totals:         2       0       0       0       0       0       0
  1164 ;;Total ram usage:        2 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    5
  1167 ;; This function calls:
  1168 ;;		_PWM4_LoadDutyValue
  1169 ;; This function is called by:
  1170 ;;		_moverse
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text2
  1175  000A42                     __ptext2:
  1176                           	opt stack 0
  1177  000A42                     _mover_motor_B:
  1178                           	opt stack 24
  1179                           
  1180                           ;main.c: 220: if (velocidad > 1023)
  1181                           
  1182                           ;incstack = 0
  1183  000A42  BE18               	btfsc	mover_motor_B@velocidad+1,7,c
  1184  000A44  D008               	goto	l176
  1185  000A46  0E04               	movlw	4
  1186  000A48  5C18               	subwf	mover_motor_B@velocidad+1,w,c
  1187  000A4A  A0D8               	btfss	status,0,c
  1188  000A4C  D004               	goto	l176
  1189                           
  1190                           ;main.c: 221: velocidad = 1023;
  1191  000A4E  0E03               	movlw	3
  1192  000A50  6E18               	movwf	mover_motor_B@velocidad+1,c
  1193  000A52  6817               	setf	mover_motor_B@velocidad,c
  1194  000A54  D00B               	goto	l178
  1195  000A56                     l176:
  1196                           
  1197                           ;main.c: 222: else if (velocidad < -1023)
  1198  000A56  AE18               	btfss	mover_motor_B@velocidad+1,7,c
  1199  000A58  D009               	goto	l178
  1200  000A5A  0417               	decf	mover_motor_B@velocidad,w,c
  1201  000A5C  0EFC               	movlw	252
  1202  000A5E  5818               	subwfb	mover_motor_B@velocidad+1,w,c
  1203  000A60  B0D8               	btfsc	status,0,c
  1204  000A62  D004               	goto	l178
  1205                           
  1206                           ;main.c: 223: velocidad = -1023;
  1207  000A64  0EFC               	movlw	252
  1208  000A66  6E18               	movwf	mover_motor_B@velocidad+1,c
  1209  000A68  0E01               	movlw	1
  1210  000A6A  6E17               	movwf	mover_motor_B@velocidad,c
  1211  000A6C                     l178:
  1212                           
  1213                           ;main.c: 225: if(velocidad >= 0)
  1214  000A6C  BE18               	btfsc	mover_motor_B@velocidad+1,7,c
  1215  000A6E  D003               	goto	l179
  1216                           
  1217                           ;main.c: 226: {
  1218                           ;main.c: 227: LATD0 = 1;
  1219  000A70  808C               	bsf	3980,0,c	;volatile
  1220                           
  1221                           ;main.c: 228: LATD2 = 0;
  1222  000A72  948C               	bcf	3980,2,c	;volatile
  1223                           
  1224                           ;main.c: 229: }else
  1225  000A74  D006               	goto	l180
  1226  000A76                     l179:
  1227                           
  1228                           ;main.c: 230: {
  1229                           ;main.c: 231: LATD0 = 0;
  1230  000A76  908C               	bcf	3980,0,c	;volatile
  1231                           
  1232                           ;main.c: 232: LATD2 = 1;
  1233  000A78  848C               	bsf	3980,2,c	;volatile
  1234                           
  1235                           ;main.c: 233: velocidad = velocidad * (-1);
  1236  000A7A  6C17               	negf	mover_motor_B@velocidad,c
  1237  000A7C  1E18               	comf	mover_motor_B@velocidad+1,f,c
  1238  000A7E  B0D8               	btfsc	status,0,c
  1239  000A80  2A18               	incf	mover_motor_B@velocidad+1,f,c
  1240  000A82                     l180:
  1241                           
  1242                           ;main.c: 234: }
  1243                           ;main.c: 236: PWM4_LoadDutyValue(velocidad);
  1244  000A82  C017  F013         	movff	mover_motor_B@velocidad,PWM4_LoadDutyValue@dutyValue
  1245  000A86  C018  F014         	movff	mover_motor_B@velocidad+1,PWM4_LoadDutyValue@dutyValue+1
  1246  000A8A  ECCF  F005         	call	_PWM4_LoadDutyValue	;wreg free
  1247  000A8E  0012               	return		;funcret
  1248  000A90                     __end_of_mover_motor_B:
  1249                           	opt stack 0
  1250                           tblptru	equ	0xFF8
  1251                           tblptrh	equ	0xFF7
  1252                           tblptrl	equ	0xFF6
  1253                           tablat	equ	0xFF5
  1254                           intcon	equ	0xFF2
  1255                           postinc0	equ	0xFEE
  1256                           wreg	equ	0xFE8
  1257                           postdec1	equ	0xFE5
  1258                           fsr1l	equ	0xFE1
  1259                           status	equ	0xFD8
  1260                           
  1261 ;; *************** function _PWM4_LoadDutyValue *****************
  1262 ;; Defined at:
  1263 ;;		line 82 in file "mcc_generated_files/pwm4.c"
  1264 ;; Parameters:    Size  Location     Type
  1265 ;;  dutyValue       2   18[COMRAM] unsigned int 
  1266 ;; Auto vars:     Size  Location     Type
  1267 ;;		None
  1268 ;; Return value:  Size  Location     Type
  1269 ;;                  1    wreg      void 
  1270 ;; Registers used:
  1271 ;;		wreg, status,2, status,0
  1272 ;; Tracked objects:
  1273 ;;		On entry : 0/0
  1274 ;;		On exit  : 0/0
  1275 ;;		Unchanged: 0/0
  1276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1277 ;;      Params:         2       0       0       0       0       0       0
  1278 ;;      Locals:         0       0       0       0       0       0       0
  1279 ;;      Temps:          2       0       0       0       0       0       0
  1280 ;;      Totals:         4       0       0       0       0       0       0
  1281 ;;Total ram usage:        4 bytes
  1282 ;; Hardware stack levels used:    1
  1283 ;; Hardware stack levels required when called:    4
  1284 ;; This function calls:
  1285 ;;		Nothing
  1286 ;; This function is called by:
  1287 ;;		_mover_motor_B
  1288 ;;		_parada
  1289 ;; This function uses a non-reentrant model
  1290 ;;
  1291                           
  1292                           	psect	text3
  1293  000B9E                     __ptext3:
  1294                           	opt stack 0
  1295  000B9E                     _PWM4_LoadDutyValue:
  1296                           	opt stack 24
  1297                           
  1298                           ;pwm4.c: 85: CCPR4L = ((dutyValue & 0x03FC)>>2);
  1299                           
  1300                           ;incstack = 0
  1301  000B9E  C013  F015         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  1302  000BA2  C014  F016         	movff	PWM4_LoadDutyValue@dutyValue+1,??_PWM4_LoadDutyValue+1
  1303  000BA6  90D8               	bcf	status,0,c
  1304  000BA8  3216               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  1305  000BAA  3215               	rrcf	??_PWM4_LoadDutyValue,f,c
  1306  000BAC  90D8               	bcf	status,0,c
  1307  000BAE  3216               	rrcf	??_PWM4_LoadDutyValue+1,f,c
  1308  000BB0  3215               	rrcf	??_PWM4_LoadDutyValue,f,c
  1309  000BB2  5015               	movf	??_PWM4_LoadDutyValue,w,c
  1310  000BB4  010F               	movlb	15	; () banked
  1311  000BB6  6F58               	movwf	88,b	;volatile
  1312                           
  1313                           ;pwm4.c: 88: CCP4CON = ((uint8_t)(CCP4CON & 0xCF) | ((dutyValue & 0x0003)<<4));
  1314  000BB8  C013  F015         	movff	PWM4_LoadDutyValue@dutyValue,??_PWM4_LoadDutyValue
  1315  000BBC  0E03               	movlw	3
  1316  000BBE  1615               	andwf	??_PWM4_LoadDutyValue,f,c
  1317  000BC0  3A15               	swapf	??_PWM4_LoadDutyValue,f,c
  1318  000BC2  0EF0               	movlw	240
  1319  000BC4  1615               	andwf	??_PWM4_LoadDutyValue,f,c
  1320  000BC6  5157               	movf	87,w,b	;volatile
  1321  000BC8  0BCF               	andlw	207
  1322  000BCA  1015               	iorwf	??_PWM4_LoadDutyValue,w,c
  1323  000BCC  6F57               	movwf	87,b	;volatile
  1324                           
  1325                           ; BSR set to: 15
  1326  000BCE  0012               	return		;funcret
  1327  000BD0                     __end_of_PWM4_LoadDutyValue:
  1328                           	opt stack 0
  1329                           tblptru	equ	0xFF8
  1330                           tblptrh	equ	0xFF7
  1331                           tblptrl	equ	0xFF6
  1332                           tablat	equ	0xFF5
  1333                           intcon	equ	0xFF2
  1334                           postinc0	equ	0xFEE
  1335                           wreg	equ	0xFE8
  1336                           postdec1	equ	0xFE5
  1337                           fsr1l	equ	0xFE1
  1338                           status	equ	0xFD8
  1339                           
  1340 ;; *************** function _mover_motor_A *****************
  1341 ;; Defined at:
  1342 ;;		line 196 in file "main.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;  velocidad       2   22[COMRAM] int 
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2, status,0, cstack
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1356 ;;      Params:         2       0       0       0       0       0       0
  1357 ;;      Locals:         0       0       0       0       0       0       0
  1358 ;;      Temps:          0       0       0       0       0       0       0
  1359 ;;      Totals:         2       0       0       0       0       0       0
  1360 ;;Total ram usage:        2 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    5
  1363 ;; This function calls:
  1364 ;;		_PWM5_LoadDutyValue
  1365 ;; This function is called by:
  1366 ;;		_moverse
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           	psect	text4
  1371  000A90                     __ptext4:
  1372                           	opt stack 0
  1373  000A90                     _mover_motor_A:
  1374                           	opt stack 24
  1375                           
  1376                           ;main.c: 198: if (velocidad > 1023)
  1377                           
  1378                           ; BSR set to: 15
  1379                           ;incstack = 0
  1380  000A90  BE18               	btfsc	mover_motor_A@velocidad+1,7,c
  1381  000A92  D008               	goto	l168
  1382  000A94  0E04               	movlw	4
  1383  000A96  5C18               	subwf	mover_motor_A@velocidad+1,w,c
  1384  000A98  A0D8               	btfss	status,0,c
  1385  000A9A  D004               	goto	l168
  1386                           
  1387                           ;main.c: 199: velocidad = 1023;
  1388  000A9C  0E03               	movlw	3
  1389  000A9E  6E18               	movwf	mover_motor_A@velocidad+1,c
  1390  000AA0  6817               	setf	mover_motor_A@velocidad,c
  1391  000AA2  D00B               	goto	l170
  1392  000AA4                     l168:
  1393                           
  1394                           ;main.c: 200: else if (velocidad < -1023)
  1395  000AA4  AE18               	btfss	mover_motor_A@velocidad+1,7,c
  1396  000AA6  D009               	goto	l170
  1397  000AA8  0417               	decf	mover_motor_A@velocidad,w,c
  1398  000AAA  0EFC               	movlw	252
  1399  000AAC  5818               	subwfb	mover_motor_A@velocidad+1,w,c
  1400  000AAE  B0D8               	btfsc	status,0,c
  1401  000AB0  D004               	goto	l170
  1402                           
  1403                           ;main.c: 201: velocidad = -1023;
  1404  000AB2  0EFC               	movlw	252
  1405  000AB4  6E18               	movwf	mover_motor_A@velocidad+1,c
  1406  000AB6  0E01               	movlw	1
  1407  000AB8  6E17               	movwf	mover_motor_A@velocidad,c
  1408  000ABA                     l170:
  1409                           
  1410                           ;main.c: 203: if(velocidad >= 0)
  1411  000ABA  BE18               	btfsc	mover_motor_A@velocidad+1,7,c
  1412  000ABC  D003               	goto	l171
  1413                           
  1414                           ;main.c: 204: {
  1415                           ;main.c: 205: LATC3 = 1;
  1416  000ABE  868B               	bsf	3979,3,c	;volatile
  1417                           
  1418                           ;main.c: 206: LATC2 = 0;
  1419  000AC0  948B               	bcf	3979,2,c	;volatile
  1420                           
  1421                           ;main.c: 207: }else
  1422  000AC2  D006               	goto	l172
  1423  000AC4                     l171:
  1424                           
  1425                           ;main.c: 208: {
  1426                           ;main.c: 209: LATC3 = 0;
  1427  000AC4  968B               	bcf	3979,3,c	;volatile
  1428                           
  1429                           ;main.c: 210: LATC2 = 1;
  1430  000AC6  848B               	bsf	3979,2,c	;volatile
  1431                           
  1432                           ;main.c: 211: velocidad = velocidad * (-1);
  1433  000AC8  6C17               	negf	mover_motor_A@velocidad,c
  1434  000ACA  1E18               	comf	mover_motor_A@velocidad+1,f,c
  1435  000ACC  B0D8               	btfsc	status,0,c
  1436  000ACE  2A18               	incf	mover_motor_A@velocidad+1,f,c
  1437  000AD0                     l172:
  1438                           
  1439                           ;main.c: 212: }
  1440                           ;main.c: 215: PWM5_LoadDutyValue(velocidad);
  1441  000AD0  C017  F013         	movff	mover_motor_A@velocidad,PWM5_LoadDutyValue@dutyValue
  1442  000AD4  C018  F014         	movff	mover_motor_A@velocidad+1,PWM5_LoadDutyValue@dutyValue+1
  1443  000AD8  ECE8  F005         	call	_PWM5_LoadDutyValue	;wreg free
  1444  000ADC  0012               	return		;funcret
  1445  000ADE                     __end_of_mover_motor_A:
  1446                           	opt stack 0
  1447                           tblptru	equ	0xFF8
  1448                           tblptrh	equ	0xFF7
  1449                           tblptrl	equ	0xFF6
  1450                           tablat	equ	0xFF5
  1451                           intcon	equ	0xFF2
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           postdec1	equ	0xFE5
  1455                           fsr1l	equ	0xFE1
  1456                           status	equ	0xFD8
  1457                           
  1458 ;; *************** function _PWM5_LoadDutyValue *****************
  1459 ;; Defined at:
  1460 ;;		line 82 in file "mcc_generated_files/pwm5.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;  dutyValue       2   18[COMRAM] unsigned int 
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2, status,0
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1474 ;;      Params:         2       0       0       0       0       0       0
  1475 ;;      Locals:         0       0       0       0       0       0       0
  1476 ;;      Temps:          2       0       0       0       0       0       0
  1477 ;;      Totals:         4       0       0       0       0       0       0
  1478 ;;Total ram usage:        4 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    4
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_mover_motor_A
  1485 ;;		_parada
  1486 ;; This function uses a non-reentrant model
  1487 ;;
  1488                           
  1489                           	psect	text5
  1490  000BD0                     __ptext5:
  1491                           	opt stack 0
  1492  000BD0                     _PWM5_LoadDutyValue:
  1493                           	opt stack 24
  1494                           
  1495                           ;pwm5.c: 85: CCPR5L = ((dutyValue & 0x03FC)>>2);
  1496                           
  1497                           ;incstack = 0
  1498  000BD0  C013  F015         	movff	PWM5_LoadDutyValue@dutyValue,??_PWM5_LoadDutyValue
  1499  000BD4  C014  F016         	movff	PWM5_LoadDutyValue@dutyValue+1,??_PWM5_LoadDutyValue+1
  1500  000BD8  90D8               	bcf	status,0,c
  1501  000BDA  3216               	rrcf	??_PWM5_LoadDutyValue+1,f,c
  1502  000BDC  3215               	rrcf	??_PWM5_LoadDutyValue,f,c
  1503  000BDE  90D8               	bcf	status,0,c
  1504  000BE0  3216               	rrcf	??_PWM5_LoadDutyValue+1,f,c
  1505  000BE2  3215               	rrcf	??_PWM5_LoadDutyValue,f,c
  1506  000BE4  5015               	movf	??_PWM5_LoadDutyValue,w,c
  1507  000BE6  010F               	movlb	15	; () banked
  1508  000BE8  6F55               	movwf	85,b	;volatile
  1509                           
  1510                           ;pwm5.c: 88: CCP5CON = ((uint8_t)(CCP5CON & 0xCF) | ((dutyValue & 0x0003)<<4));
  1511  000BEA  C013  F015         	movff	PWM5_LoadDutyValue@dutyValue,??_PWM5_LoadDutyValue
  1512  000BEE  0E03               	movlw	3
  1513  000BF0  1615               	andwf	??_PWM5_LoadDutyValue,f,c
  1514  000BF2  3A15               	swapf	??_PWM5_LoadDutyValue,f,c
  1515  000BF4  0EF0               	movlw	240
  1516  000BF6  1615               	andwf	??_PWM5_LoadDutyValue,f,c
  1517  000BF8  5154               	movf	84,w,b	;volatile
  1518  000BFA  0BCF               	andlw	207
  1519  000BFC  1015               	iorwf	??_PWM5_LoadDutyValue,w,c
  1520  000BFE  6F54               	movwf	84,b	;volatile
  1521                           
  1522                           ; BSR set to: 15
  1523  000C00  0012               	return		;funcret
  1524  000C02                     __end_of_PWM5_LoadDutyValue:
  1525                           	opt stack 0
  1526                           tblptru	equ	0xFF8
  1527                           tblptrh	equ	0xFF7
  1528                           tblptrl	equ	0xFF6
  1529                           tablat	equ	0xFF5
  1530                           intcon	equ	0xFF2
  1531                           postinc0	equ	0xFEE
  1532                           wreg	equ	0xFE8
  1533                           postdec1	equ	0xFE5
  1534                           fsr1l	equ	0xFE1
  1535                           status	equ	0xFD8
  1536                           
  1537 ;; *************** function _leer_sensores *****************
  1538 ;; Defined at:
  1539 ;;		line 281 in file "main.c"
  1540 ;; Parameters:    Size  Location     Type
  1541 ;;		None
  1542 ;; Auto vars:     Size  Location     Type
  1543 ;;  sensor         16   23[COMRAM] int [8]
  1544 ;;  numero_senso    1    0        unsigned char 
  1545 ;; Return value:  Size  Location     Type
  1546 ;;                  1    wreg      void 
  1547 ;; Registers used:
  1548 ;;		wreg, status,2, status,0, cstack
  1549 ;; Tracked objects:
  1550 ;;		On entry : 0/0
  1551 ;;		On exit  : 0/0
  1552 ;;		Unchanged: 0/0
  1553 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1554 ;;      Params:         0       0       0       0       0       0       0
  1555 ;;      Locals:        16       0       0       0       0       0       0
  1556 ;;      Temps:          0       0       0       0       0       0       0
  1557 ;;      Totals:        16       0       0       0       0       0       0
  1558 ;;Total ram usage:       16 bytes
  1559 ;; Hardware stack levels used:    1
  1560 ;; Hardware stack levels required when called:    5
  1561 ;; This function calls:
  1562 ;;		_ADC_GetConversion
  1563 ;; This function is called by:
  1564 ;;		_main
  1565 ;; This function uses a non-reentrant model
  1566 ;;
  1567                           
  1568                           	psect	text6
  1569  0009D0                     __ptext6:
  1570                           	opt stack 0
  1571  0009D0                     _leer_sensores:
  1572                           	opt stack 25
  1573                           
  1574                           ;main.c: 283: int sensor[8];
  1575                           ;main.c: 284: char numero_sensor;
  1576                           ;main.c: 285: ADC_GetConversion(11);
  1577                           
  1578                           ; BSR set to: 15
  1579                           ;incstack = 0
  1580  0009D0  0E0B               	movlw	11
  1581  0009D2  EC01  F006         	call	_ADC_GetConversion
  1582                           
  1583                           ;main.c: 286: ADC_GetConversion(13);
  1584  0009D6  0E0D               	movlw	13
  1585  0009D8  EC01  F006         	call	_ADC_GetConversion
  1586                           
  1587                           ;main.c: 287: ADC_GetConversion(11);
  1588  0009DC  0E0B               	movlw	11
  1589  0009DE  EC01  F006         	call	_ADC_GetConversion
  1590                           
  1591                           ;main.c: 288: ADC_GetConversion(13);
  1592  0009E2  0E0D               	movlw	13
  1593  0009E4  EC01  F006         	call	_ADC_GetConversion
  1594                           
  1595                           ;main.c: 290: sensor_izquierdo = sensor[0] = ADC_GetConversion(0);
  1596  0009E8  0E00               	movlw	0
  1597  0009EA  EC01  F006         	call	_ADC_GetConversion
  1598  0009EE  C013  F018         	movff	?_ADC_GetConversion,leer_sensores@sensor
  1599  0009F2  C014  F019         	movff	?_ADC_GetConversion+1,leer_sensores@sensor+1
  1600  0009F6  C018  F0B1         	movff	leer_sensores@sensor,_sensor_izquierdo
  1601  0009FA  C019  F0B2         	movff	leer_sensores@sensor+1,_sensor_izquierdo+1
  1602                           
  1603                           ;main.c: 291: sensor_izquierdo_delantero = sensor[1] = ADC_GetConversion(1);
  1604  0009FE  0E01               	movlw	1
  1605  000A00  EC01  F006         	call	_ADC_GetConversion
  1606  000A04  C013  F01A         	movff	?_ADC_GetConversion,leer_sensores@sensor+2
  1607  000A08  C014  F01B         	movff	?_ADC_GetConversion+1,leer_sensores@sensor+3
  1608  000A0C  C01A  F0AF         	movff	leer_sensores@sensor+2,_sensor_izquierdo_delantero
  1609  000A10  C01B  F0B0         	movff	leer_sensores@sensor+3,_sensor_izquierdo_delantero+1
  1610                           
  1611                           ;main.c: 292: sensor_derecho_delantero = sensor[2] = ADC_GetConversion(2);
  1612  000A14  0E02               	movlw	2
  1613  000A16  EC01  F006         	call	_ADC_GetConversion
  1614  000A1A  C013  F01C         	movff	?_ADC_GetConversion,leer_sensores@sensor+4
  1615  000A1E  C014  F01D         	movff	?_ADC_GetConversion+1,leer_sensores@sensor+5
  1616  000A22  C01C  F0AD         	movff	leer_sensores@sensor+4,_sensor_derecho_delantero
  1617  000A26  C01D  F0AE         	movff	leer_sensores@sensor+5,_sensor_derecho_delantero+1
  1618                           
  1619                           ;main.c: 293: sensor_derecho = sensor[3] = ADC_GetConversion(3);
  1620  000A2A  0E03               	movlw	3
  1621  000A2C  EC01  F006         	call	_ADC_GetConversion
  1622  000A30  C013  F01E         	movff	?_ADC_GetConversion,leer_sensores@sensor+6
  1623  000A34  C014  F01F         	movff	?_ADC_GetConversion+1,leer_sensores@sensor+7
  1624  000A38  C01E  F0AB         	movff	leer_sensores@sensor+6,_sensor_derecho
  1625  000A3C  C01F  F0AC         	movff	leer_sensores@sensor+7,_sensor_derecho+1
  1626  000A40  0012               	return		;funcret
  1627  000A42                     __end_of_leer_sensores:
  1628                           	opt stack 0
  1629                           tblptru	equ	0xFF8
  1630                           tblptrh	equ	0xFF7
  1631                           tblptrl	equ	0xFF6
  1632                           tablat	equ	0xFF5
  1633                           intcon	equ	0xFF2
  1634                           postinc0	equ	0xFEE
  1635                           wreg	equ	0xFE8
  1636                           postdec1	equ	0xFE5
  1637                           fsr1l	equ	0xFE1
  1638                           status	equ	0xFD8
  1639                           
  1640 ;; *************** function _ADC_GetConversion *****************
  1641 ;; Defined at:
  1642 ;;		line 108 in file "mcc_generated_files/adc.c"
  1643 ;; Parameters:    Size  Location     Type
  1644 ;;  channel         1    wreg     enum E6975
  1645 ;; Auto vars:     Size  Location     Type
  1646 ;;  channel         1   22[COMRAM] enum E6975
  1647 ;; Return value:  Size  Location     Type
  1648 ;;                  2   18[COMRAM] unsigned int 
  1649 ;; Registers used:
  1650 ;;		wreg, status,2, status,0
  1651 ;; Tracked objects:
  1652 ;;		On entry : 0/0
  1653 ;;		On exit  : 0/0
  1654 ;;		Unchanged: 0/0
  1655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1656 ;;      Params:         2       0       0       0       0       0       0
  1657 ;;      Locals:         1       0       0       0       0       0       0
  1658 ;;      Temps:          2       0       0       0       0       0       0
  1659 ;;      Totals:         5       0       0       0       0       0       0
  1660 ;;Total ram usage:        5 bytes
  1661 ;; Hardware stack levels used:    1
  1662 ;; Hardware stack levels required when called:    4
  1663 ;; This function calls:
  1664 ;;		Nothing
  1665 ;; This function is called by:
  1666 ;;		_main
  1667 ;;		_leer_sensores
  1668 ;; This function uses a non-reentrant model
  1669 ;;
  1670                           
  1671                           	psect	text7
  1672  000C02                     __ptext7:
  1673                           	opt stack 0
  1674  000C02                     _ADC_GetConversion:
  1675                           	opt stack 25
  1676                           
  1677                           ;incstack = 0
  1678                           ;ADC_GetConversion@channel stored from wreg
  1679  000C02  6E17               	movwf	ADC_GetConversion@channel,c
  1680                           
  1681                           ;adc.c: 111: ADCON0bits.CHS = channel;
  1682  000C04  C017  F015         	movff	ADC_GetConversion@channel,??_ADC_GetConversion
  1683  000C08  4615               	rlncf	??_ADC_GetConversion,f,c
  1684  000C0A  4615               	rlncf	??_ADC_GetConversion,f,c
  1685  000C0C  50C2               	movf	4034,w,c	;volatile
  1686  000C0E  1815               	xorwf	??_ADC_GetConversion,w,c
  1687  000C10  0B83               	andlw	-125
  1688  000C12  1815               	xorwf	??_ADC_GetConversion,w,c
  1689  000C14  6EC2               	movwf	4034,c	;volatile
  1690                           
  1691                           ;adc.c: 114: ADCON0bits.ADON = 1;
  1692  000C16  80C2               	bsf	4034,0,c	;volatile
  1693                           
  1694                           ;adc.c: 117: ADCON0bits.GO_nDONE = 1;
  1695  000C18  82C2               	bsf	4034,1,c	;volatile
  1696  000C1A                     
  1697                           ;adc.c: 121: {
  1698  000C1A  B2C2               	btfsc	4034,1,c	;volatile
  1699  000C1C  D7FE               	goto	l320
  1700                           
  1701                           ;adc.c: 122: }
  1702                           ;adc.c: 125: return ((adc_result_t)((ADRESH << 8) + ADRESL));
  1703  000C1E  50C4               	movf	4036,w,c	;volatile
  1704  000C20  6E16               	movwf	(??_ADC_GetConversion+1)& (0+255),c
  1705  000C22  6A15               	clrf	??_ADC_GetConversion& (0+255),c
  1706  000C24  50C3               	movf	4035,w,c	;volatile
  1707  000C26  2415               	addwf	??_ADC_GetConversion,w,c
  1708  000C28  6E13               	movwf	?_ADC_GetConversion,c
  1709  000C2A  0E00               	movlw	0
  1710  000C2C  2016               	addwfc	??_ADC_GetConversion+1,w,c
  1711  000C2E  6E14               	movwf	?_ADC_GetConversion+1,c
  1712  000C30  0012               	return	
  1713  000C32                     __end_of_ADC_GetConversion:
  1714                           	opt stack 0
  1715                           tblptru	equ	0xFF8
  1716                           tblptrh	equ	0xFF7
  1717                           tblptrl	equ	0xFF6
  1718                           tablat	equ	0xFF5
  1719                           intcon	equ	0xFF2
  1720                           postinc0	equ	0xFEE
  1721                           wreg	equ	0xFE8
  1722                           postdec1	equ	0xFE5
  1723                           fsr1l	equ	0xFE1
  1724                           status	equ	0xFD8
  1725                           
  1726 ;; *************** function _calculo_PID *****************
  1727 ;; Defined at:
  1728 ;;		line 258 in file "main.c"
  1729 ;; Parameters:    Size  Location     Type
  1730 ;;  valor_sensor    2   53[COMRAM] int 
  1731 ;; Auto vars:     Size  Location     Type
  1732 ;;  error           3    9[BANK0 ] float 
  1733 ;;  valor_difere    3    6[BANK0 ] float 
  1734 ;;  valor_propor    3    3[BANK0 ] float 
  1735 ;;  correccion      3    0[BANK0 ] float 
  1736 ;; Return value:  Size  Location     Type
  1737 ;;                  3   53[COMRAM] float 
  1738 ;; Registers used:
  1739 ;;		wreg, status,2, status,0, cstack
  1740 ;; Tracked objects:
  1741 ;;		On entry : 0/0
  1742 ;;		On exit  : 0/0
  1743 ;;		Unchanged: 0/0
  1744 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1745 ;;      Params:         3       0       0       0       0       0       0
  1746 ;;      Locals:         0      12       0       0       0       0       0
  1747 ;;      Temps:          2       0       0       0       0       0       0
  1748 ;;      Totals:         5      12       0       0       0       0       0
  1749 ;;Total ram usage:       17 bytes
  1750 ;; Hardware stack levels used:    1
  1751 ;; Hardware stack levels required when called:    6
  1752 ;; This function calls:
  1753 ;;		___awtoft
  1754 ;;		___ftadd
  1755 ;;		___ftmul
  1756 ;;		___ftneg
  1757 ;; This function is called by:
  1758 ;;		_main
  1759 ;; This function uses a non-reentrant model
  1760 ;;
  1761                           
  1762                           	psect	text8
  1763  000696                     __ptext8:
  1764                           	opt stack 0
  1765  000696                     _calculo_PID:
  1766                           	opt stack 24
  1767                           
  1768                           ;main.c: 260: float correccion;
  1769                           ;main.c: 261: static float last_error;
  1770                           ;main.c: 262: float valor_proporcional, valor_diferencial;
  1771                           ;main.c: 263: float error;
  1772                           ;main.c: 267: error = set_point - valor_sensor;
  1773                           
  1774                           ;incstack = 0
  1775  000696  C036  F039         	movff	calculo_PID@valor_sensor,??_calculo_PID
  1776  00069A  C037  F03A         	movff	calculo_PID@valor_sensor+1,??_calculo_PID+1
  1777  00069E  1E39               	comf	??_calculo_PID,f,c
  1778  0006A0  1E3A               	comf	??_calculo_PID+1,f,c
  1779  0006A2  4A39               	infsnz	??_calculo_PID,f,c
  1780  0006A4  2A3A               	incf	??_calculo_PID+1,f,c
  1781  0006A6  503F               	movf	_set_point,w,c
  1782  0006A8  2439               	addwf	??_calculo_PID,w,c
  1783  0006AA  6E1B               	movwf	___awtoft@c,c
  1784  0006AC  5040               	movf	_set_point+1,w,c
  1785  0006AE  203A               	addwfc	??_calculo_PID+1,w,c
  1786  0006B0  6E1C               	movwf	___awtoft@c+1,c
  1787  0006B2  ECB3  F005         	call	___awtoft	;wreg free
  1788  0006B6  C01B  F069         	movff	?___awtoft,calculo_PID@error
  1789  0006BA  C01C  F06A         	movff	?___awtoft+1,calculo_PID@error+1
  1790  0006BE  C01D  F06B         	movff	?___awtoft+2,calculo_PID@error+2
  1791                           
  1792                           ;main.c: 269: valor_proporcional = ((float)error)*KP;
  1793  0006C2  C069  F027         	movff	calculo_PID@error,___ftmul@f1
  1794  0006C6  C06A  F028         	movff	calculo_PID@error+1,___ftmul@f1+1
  1795  0006CA  C06B  F029         	movff	calculo_PID@error+2,___ftmul@f1+2
  1796  0006CE  C0B6  F02A         	movff	_KP,___ftmul@f2
  1797  0006D2  C0B7  F02B         	movff	_KP+1,___ftmul@f2+1
  1798  0006D6  C0B8  F02C         	movff	_KP+2,___ftmul@f2+2
  1799  0006DA  ECD1  F002         	call	___ftmul	;wreg free
  1800  0006DE  C027  F063         	movff	?___ftmul,calculo_PID@valor_proporcional
  1801  0006E2  C028  F064         	movff	?___ftmul+1,calculo_PID@valor_proporcional+1
  1802  0006E6  C029  F065         	movff	?___ftmul+2,calculo_PID@valor_proporcional+2
  1803                           
  1804                           ;main.c: 270: valor_diferencial = (error - last_error) * KD;
  1805  0006EA  C069  F01E         	movff	calculo_PID@error,___ftadd@f2
  1806  0006EE  C06A  F01F         	movff	calculo_PID@error+1,___ftadd@f2+1
  1807  0006F2  C06B  F020         	movff	calculo_PID@error+2,___ftadd@f2+2
  1808  0006F6  C0A6  F013         	movff	calculo_PID@last_error,___ftneg@f1
  1809  0006FA  C0A7  F014         	movff	calculo_PID@last_error+1,___ftneg@f1+1
  1810  0006FE  C0A8  F015         	movff	calculo_PID@last_error+2,___ftneg@f1+2
  1811  000702  EC43  F006         	call	___ftneg	;wreg free
  1812  000706  C013  F01B         	movff	?___ftneg,___ftadd@f1
  1813  00070A  C014  F01C         	movff	?___ftneg+1,___ftadd@f1+1
  1814  00070E  C015  F01D         	movff	?___ftneg+2,___ftadd@f1+2
  1815  000712  EC7F  F001         	call	___ftadd	;wreg free
  1816  000716  C01B  F027         	movff	?___ftadd,___ftmul@f1
  1817  00071A  C01C  F028         	movff	?___ftadd+1,___ftmul@f1+1
  1818  00071E  C01D  F029         	movff	?___ftadd+2,___ftmul@f1+2
  1819  000722  C0B3  F02A         	movff	_KD,___ftmul@f2
  1820  000726  C0B4  F02B         	movff	_KD+1,___ftmul@f2+1
  1821  00072A  C0B5  F02C         	movff	_KD+2,___ftmul@f2+2
  1822  00072E  ECD1  F002         	call	___ftmul	;wreg free
  1823  000732  C027  F066         	movff	?___ftmul,calculo_PID@valor_diferencial
  1824  000736  C028  F067         	movff	?___ftmul+1,calculo_PID@valor_diferencial+1
  1825  00073A  C029  F068         	movff	?___ftmul+2,calculo_PID@valor_diferencial+2
  1826                           
  1827                           ;main.c: 272: correccion = valor_proporcional + valor_diferencial;
  1828  00073E  C063  F01B         	movff	calculo_PID@valor_proporcional,___ftadd@f1
  1829  000742  C064  F01C         	movff	calculo_PID@valor_proporcional+1,___ftadd@f1+1
  1830  000746  C065  F01D         	movff	calculo_PID@valor_proporcional+2,___ftadd@f1+2
  1831  00074A  C066  F01E         	movff	calculo_PID@valor_diferencial,___ftadd@f2
  1832  00074E  C067  F01F         	movff	calculo_PID@valor_diferencial+1,___ftadd@f2+1
  1833  000752  C068  F020         	movff	calculo_PID@valor_diferencial+2,___ftadd@f2+2
  1834  000756  EC7F  F001         	call	___ftadd	;wreg free
  1835  00075A  C01B  F060         	movff	?___ftadd,calculo_PID@correccion
  1836  00075E  C01C  F061         	movff	?___ftadd+1,calculo_PID@correccion+1
  1837  000762  C01D  F062         	movff	?___ftadd+2,calculo_PID@correccion+2
  1838                           
  1839                           ;main.c: 276: last_error = error;
  1840  000766  C069  F0A6         	movff	calculo_PID@error,calculo_PID@last_error
  1841  00076A  C06A  F0A7         	movff	calculo_PID@error+1,calculo_PID@last_error+1
  1842  00076E  C06B  F0A8         	movff	calculo_PID@error+2,calculo_PID@last_error+2
  1843                           
  1844                           ;main.c: 278: return correccion;
  1845  000772  C060  F036         	movff	calculo_PID@correccion,?_calculo_PID
  1846  000776  C061  F037         	movff	calculo_PID@correccion+1,?_calculo_PID+1
  1847  00077A  C062  F038         	movff	calculo_PID@correccion+2,?_calculo_PID+2
  1848  00077E  0012               	return	
  1849  000780                     __end_of_calculo_PID:
  1850                           	opt stack 0
  1851                           tblptru	equ	0xFF8
  1852                           tblptrh	equ	0xFF7
  1853                           tblptrl	equ	0xFF6
  1854                           tablat	equ	0xFF5
  1855                           intcon	equ	0xFF2
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1l	equ	0xFE1
  1860                           status	equ	0xFD8
  1861                           
  1862 ;; *************** function ___ftneg *****************
  1863 ;; Defined at:
  1864 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftneg.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;  f1              3   18[COMRAM] float 
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;		None
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  3   18[COMRAM] float 
  1871 ;; Registers used:
  1872 ;;		wreg, status,2, status,0
  1873 ;; Tracked objects:
  1874 ;;		On entry : 0/0
  1875 ;;		On exit  : 0/0
  1876 ;;		Unchanged: 0/0
  1877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1878 ;;      Params:         3       0       0       0       0       0       0
  1879 ;;      Locals:         0       0       0       0       0       0       0
  1880 ;;      Temps:          0       0       0       0       0       0       0
  1881 ;;      Totals:         3       0       0       0       0       0       0
  1882 ;;Total ram usage:        3 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; Hardware stack levels required when called:    4
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_calculo_PID
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text9
  1893  000C86                     __ptext9:
  1894                           	opt stack 0
  1895  000C86                     ___ftneg:
  1896                           	opt stack 25
  1897                           
  1898                           ;incstack = 0
  1899  000C86  5013               	movf	___ftneg@f1,w,c
  1900  000C88  1014               	iorwf	___ftneg@f1+1,w,c
  1901  000C8A  1015               	iorwf	___ftneg@f1+2,w,c
  1902  000C8C  B4D8               	btfsc	status,2,c
  1903  000C8E  D006               	goto	l806
  1904  000C90  0E00               	movlw	0
  1905  000C92  1A13               	xorwf	___ftneg@f1,f,c
  1906  000C94  0E00               	movlw	0
  1907  000C96  1A14               	xorwf	___ftneg@f1+1,f,c
  1908  000C98  0E80               	movlw	128
  1909  000C9A  1A15               	xorwf	___ftneg@f1+2,f,c
  1910  000C9C                     l806:
  1911  000C9C  C013  F013         	movff	___ftneg@f1,?___ftneg
  1912  000CA0  C014  F014         	movff	___ftneg@f1+1,?___ftneg+1
  1913  000CA4  C015  F015         	movff	___ftneg@f1+2,?___ftneg+2
  1914  000CA8  0012               	return		;funcret
  1915  000CAA                     __end_of___ftneg:
  1916                           	opt stack 0
  1917                           tblptru	equ	0xFF8
  1918                           tblptrh	equ	0xFF7
  1919                           tblptrl	equ	0xFF6
  1920                           tablat	equ	0xFF5
  1921                           intcon	equ	0xFF2
  1922                           postinc0	equ	0xFEE
  1923                           wreg	equ	0xFE8
  1924                           postdec1	equ	0xFE5
  1925                           fsr1l	equ	0xFE1
  1926                           status	equ	0xFD8
  1927                           
  1928 ;; *************** function ___ftmul *****************
  1929 ;; Defined at:
  1930 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftmul.c"
  1931 ;; Parameters:    Size  Location     Type
  1932 ;;  f1              3   38[COMRAM] float 
  1933 ;;  f2              3   41[COMRAM] float 
  1934 ;; Auto vars:     Size  Location     Type
  1935 ;;  f3_as_produc    3   48[COMRAM] unsigned um
  1936 ;;  sign            1   52[COMRAM] unsigned char 
  1937 ;;  cntr            1   51[COMRAM] unsigned char 
  1938 ;;  exp             1   47[COMRAM] unsigned char 
  1939 ;; Return value:  Size  Location     Type
  1940 ;;                  3   38[COMRAM] float 
  1941 ;; Registers used:
  1942 ;;		wreg, status,2, status,0, cstack
  1943 ;; Tracked objects:
  1944 ;;		On entry : 0/0
  1945 ;;		On exit  : 0/0
  1946 ;;		Unchanged: 0/0
  1947 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1948 ;;      Params:         6       0       0       0       0       0       0
  1949 ;;      Locals:         6       0       0       0       0       0       0
  1950 ;;      Temps:          3       0       0       0       0       0       0
  1951 ;;      Totals:        15       0       0       0       0       0       0
  1952 ;;Total ram usage:       15 bytes
  1953 ;; Hardware stack levels used:    1
  1954 ;; Hardware stack levels required when called:    5
  1955 ;; This function calls:
  1956 ;;		___ftpack
  1957 ;; This function is called by:
  1958 ;;		_calculo_PID
  1959 ;; This function uses a non-reentrant model
  1960 ;;
  1961                           
  1962                           	psect	text10
  1963  0005A2                     __ptext10:
  1964                           	opt stack 0
  1965  0005A2                     ___ftmul:
  1966                           	opt stack 24
  1967                           
  1968                           ;incstack = 0
  1969  0005A2  C029  F02D         	movff	___ftmul@f1+2,??___ftmul
  1970  0005A6  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  1971  0005A8  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  1972  0005AA  3428               	rlcf	___ftmul@f1+1,w,c
  1973  0005AC  362D               	rlcf	??___ftmul& (0+255),f,c
  1974  0005AE  E301               	bnc	u2221
  1975  0005B0  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  1976  0005B2                     u2221:
  1977  0005B2  502D               	movf	??___ftmul,w,c
  1978  0005B4  6E30               	movwf	___ftmul@exp,c
  1979  0005B6  5030               	movf	___ftmul@exp,w,c
  1980  0005B8  A4D8               	btfss	status,2,c
  1981  0005BA  D007               	goto	l795
  1982  0005BC  0E00               	movlw	0
  1983  0005BE  6E27               	movwf	?___ftmul,c
  1984  0005C0  0E00               	movlw	0
  1985  0005C2  6E28               	movwf	?___ftmul+1,c
  1986  0005C4  0E00               	movlw	0
  1987  0005C6  6E29               	movwf	?___ftmul+2,c
  1988  0005C8  0012               	return	
  1989  0005CA                     l795:
  1990  0005CA  C02C  F02D         	movff	___ftmul@f2+2,??___ftmul
  1991  0005CE  6A2E               	clrf	(??___ftmul+1)& (0+255),c
  1992  0005D0  6A2F               	clrf	(??___ftmul+2)& (0+255),c
  1993  0005D2  342B               	rlcf	___ftmul@f2+1,w,c
  1994  0005D4  362D               	rlcf	??___ftmul& (0+255),f,c
  1995  0005D6  E301               	bnc	u2241
  1996  0005D8  802E               	bsf	(??___ftmul+1)& (0+255),0,c
  1997  0005DA                     u2241:
  1998  0005DA  502D               	movf	??___ftmul,w,c
  1999  0005DC  6E35               	movwf	___ftmul@sign,c
  2000  0005DE  5035               	movf	___ftmul@sign,w,c
  2001  0005E0  A4D8               	btfss	status,2,c
  2002  0005E2  D007               	goto	l797
  2003  0005E4  0E00               	movlw	0
  2004  0005E6  6E27               	movwf	?___ftmul,c
  2005  0005E8  0E00               	movlw	0
  2006  0005EA  6E28               	movwf	?___ftmul+1,c
  2007  0005EC  0E00               	movlw	0
  2008  0005EE  6E29               	movwf	?___ftmul+2,c
  2009  0005F0  0012               	return	
  2010  0005F2                     l797:
  2011  0005F2  5035               	movf	___ftmul@sign,w,c
  2012  0005F4  0F7B               	addlw	123
  2013  0005F6  2630               	addwf	___ftmul@exp,f,c
  2014  0005F8  C029  F035         	movff	___ftmul@f1+2,___ftmul@sign
  2015  0005FC  502C               	movf	___ftmul@f2+2,w,c
  2016  0005FE  1A35               	xorwf	___ftmul@sign,f,c
  2017  000600  0E80               	movlw	128
  2018  000602  1635               	andwf	___ftmul@sign,f,c
  2019  000604  8E28               	bsf	___ftmul@f1+1,7,c
  2020  000606  8E2B               	bsf	___ftmul@f2+1,7,c
  2021  000608  0EFF               	movlw	255
  2022  00060A  162A               	andwf	___ftmul@f2,f,c
  2023  00060C  0EFF               	movlw	255
  2024  00060E  162B               	andwf	___ftmul@f2+1,f,c
  2025  000610  0E00               	movlw	0
  2026  000612  162C               	andwf	___ftmul@f2+2,f,c
  2027  000614  0E00               	movlw	0
  2028  000616  6E31               	movwf	___ftmul@f3_as_product,c
  2029  000618  0E00               	movlw	0
  2030  00061A  6E32               	movwf	___ftmul@f3_as_product+1,c
  2031  00061C  0E00               	movlw	0
  2032  00061E  6E33               	movwf	___ftmul@f3_as_product+2,c
  2033  000620  0E07               	movlw	7
  2034  000622  6E34               	movwf	___ftmul@cntr,c
  2035  000624  A027               	btfss	___ftmul@f1,0,c
  2036  000626  D006               	goto	l799
  2037  000628  502A               	movf	___ftmul@f2,w,c
  2038  00062A  2631               	addwf	___ftmul@f3_as_product,f,c
  2039  00062C  502B               	movf	___ftmul@f2+1,w,c
  2040  00062E  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  2041  000630  502C               	movf	___ftmul@f2+2,w,c
  2042  000632  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  2043  000634                     l799:
  2044  000634  90D8               	bcf	status,0,c
  2045  000636  3229               	rrcf	___ftmul@f1+2,f,c
  2046  000638  3228               	rrcf	___ftmul@f1+1,f,c
  2047  00063A  3227               	rrcf	___ftmul@f1,f,c
  2048  00063C  90D8               	bcf	status,0,c
  2049  00063E  362A               	rlcf	___ftmul@f2,f,c
  2050  000640  362B               	rlcf	___ftmul@f2+1,f,c
  2051  000642  362C               	rlcf	___ftmul@f2+2,f,c
  2052  000644  2E34               	decfsz	___ftmul@cntr,f,c
  2053  000646  D7EE               	goto	l798
  2054  000648  0E09               	movlw	9
  2055  00064A  6E34               	movwf	___ftmul@cntr,c
  2056  00064C  A027               	btfss	___ftmul@f1,0,c
  2057  00064E  D006               	goto	l802
  2058  000650  502A               	movf	___ftmul@f2,w,c
  2059  000652  2631               	addwf	___ftmul@f3_as_product,f,c
  2060  000654  502B               	movf	___ftmul@f2+1,w,c
  2061  000656  2232               	addwfc	___ftmul@f3_as_product+1,f,c
  2062  000658  502C               	movf	___ftmul@f2+2,w,c
  2063  00065A  2233               	addwfc	___ftmul@f3_as_product+2,f,c
  2064  00065C                     l802:
  2065  00065C  90D8               	bcf	status,0,c
  2066  00065E  3229               	rrcf	___ftmul@f1+2,f,c
  2067  000660  3228               	rrcf	___ftmul@f1+1,f,c
  2068  000662  3227               	rrcf	___ftmul@f1,f,c
  2069  000664  90D8               	bcf	status,0,c
  2070  000666  3233               	rrcf	___ftmul@f3_as_product+2,f,c
  2071  000668  3232               	rrcf	___ftmul@f3_as_product+1,f,c
  2072  00066A  3231               	rrcf	___ftmul@f3_as_product,f,c
  2073  00066C  2E34               	decfsz	___ftmul@cntr,f,c
  2074  00066E  D7EE               	goto	l801
  2075  000670  C031  F013         	movff	___ftmul@f3_as_product,___ftpack@arg
  2076  000674  C032  F014         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  2077  000678  C033  F015         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  2078  00067C  C030  F016         	movff	___ftmul@exp,___ftpack@exp
  2079  000680  C035  F017         	movff	___ftmul@sign,___ftpack@sign
  2080  000684  ECC0  F003         	call	___ftpack	;wreg free
  2081  000688  C013  F027         	movff	?___ftpack,?___ftmul
  2082  00068C  C014  F028         	movff	?___ftpack+1,?___ftmul+1
  2083  000690  C015  F029         	movff	?___ftpack+2,?___ftmul+2
  2084  000694  0012               	return	
  2085  000696                     __end_of___ftmul:
  2086                           	opt stack 0
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           intcon	equ	0xFF2
  2092                           postinc0	equ	0xFEE
  2093                           wreg	equ	0xFE8
  2094                           postdec1	equ	0xFE5
  2095                           fsr1l	equ	0xFE1
  2096                           status	equ	0xFD8
  2097                           
  2098 ;; *************** function ___ftadd *****************
  2099 ;; Defined at:
  2100 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\ftadd.c"
  2101 ;; Parameters:    Size  Location     Type
  2102 ;;  f1              3   26[COMRAM] float 
  2103 ;;  f2              3   29[COMRAM] float 
  2104 ;; Auto vars:     Size  Location     Type
  2105 ;;  exp1            1   37[COMRAM] unsigned char 
  2106 ;;  exp2            1   36[COMRAM] unsigned char 
  2107 ;;  sign            1   35[COMRAM] unsigned char 
  2108 ;; Return value:  Size  Location     Type
  2109 ;;                  3   26[COMRAM] float 
  2110 ;; Registers used:
  2111 ;;		wreg, status,2, status,0, cstack
  2112 ;; Tracked objects:
  2113 ;;		On entry : 0/0
  2114 ;;		On exit  : 0/0
  2115 ;;		Unchanged: 0/0
  2116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2117 ;;      Params:         6       0       0       0       0       0       0
  2118 ;;      Locals:         3       0       0       0       0       0       0
  2119 ;;      Temps:          3       0       0       0       0       0       0
  2120 ;;      Totals:        12       0       0       0       0       0       0
  2121 ;;Total ram usage:       12 bytes
  2122 ;; Hardware stack levels used:    1
  2123 ;; Hardware stack levels required when called:    5
  2124 ;; This function calls:
  2125 ;;		___ftpack
  2126 ;; This function is called by:
  2127 ;;		_calculo_PID
  2128 ;; This function uses a non-reentrant model
  2129 ;;
  2130                           
  2131                           	psect	text11
  2132  0002FE                     __ptext11:
  2133                           	opt stack 0
  2134  0002FE                     ___ftadd:
  2135                           	opt stack 24
  2136                           
  2137                           ;incstack = 0
  2138  0002FE  C01D  F021         	movff	___ftadd@f1+2,??___ftadd
  2139  000302  6A22               	clrf	(??___ftadd+1)& (0+255),c
  2140  000304  6A23               	clrf	(??___ftadd+2)& (0+255),c
  2141  000306  341C               	rlcf	___ftadd@f1+1,w,c
  2142  000308  3621               	rlcf	??___ftadd& (0+255),f,c
  2143  00030A  E301               	bnc	u2011
  2144  00030C  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  2145  00030E                     u2011:
  2146  00030E  5021               	movf	??___ftadd,w,c
  2147  000310  6E26               	movwf	___ftadd@exp1,c
  2148  000312  C020  F021         	movff	___ftadd@f2+2,??___ftadd
  2149  000316  6A22               	clrf	(??___ftadd+1)& (0+255),c
  2150  000318  6A23               	clrf	(??___ftadd+2)& (0+255),c
  2151  00031A  341F               	rlcf	___ftadd@f2+1,w,c
  2152  00031C  3621               	rlcf	??___ftadd& (0+255),f,c
  2153  00031E  E301               	bnc	u2021
  2154  000320  8022               	bsf	(??___ftadd+1)& (0+255),0,c
  2155  000322                     u2021:
  2156  000322  5021               	movf	??___ftadd,w,c
  2157  000324  6E25               	movwf	___ftadd@exp2,c
  2158  000326  5026               	movf	___ftadd@exp1,w,c
  2159  000328  B4D8               	btfsc	status,2,c
  2160  00032A  D00B               	goto	u2050
  2161  00032C  5025               	movf	___ftadd@exp2,w,c
  2162  00032E  5C26               	subwf	___ftadd@exp1,w,c
  2163  000330  B0D8               	btfsc	status,0,c
  2164  000332  D00E               	goto	l747
  2165  000334  5026               	movf	___ftadd@exp1,w,c
  2166  000336  0800               	sublw	0
  2167  000338  2425               	addwf	___ftadd@exp2,w,c
  2168  00033A  6E21               	movwf	??___ftadd& (0+255),c
  2169  00033C  0E18               	movlw	24
  2170  00033E  6421               	cpfsgt	??___ftadd,c
  2171  000340  D007               	goto	l747
  2172  000342                     u2050:
  2173  000342  C01E  F01B         	movff	___ftadd@f2,?___ftadd
  2174  000346  C01F  F01C         	movff	___ftadd@f2+1,?___ftadd+1
  2175  00034A  C020  F01D         	movff	___ftadd@f2+2,?___ftadd+2
  2176  00034E  0012               	return	
  2177  000350                     l747:
  2178  000350  5025               	movf	___ftadd@exp2,w,c
  2179  000352  B4D8               	btfsc	status,2,c
  2180  000354  D00B               	goto	u2080
  2181  000356  5026               	movf	___ftadd@exp1,w,c
  2182  000358  5C25               	subwf	___ftadd@exp2,w,c
  2183  00035A  B0D8               	btfsc	status,0,c
  2184  00035C  D00E               	goto	l751
  2185  00035E  5025               	movf	___ftadd@exp2,w,c
  2186  000360  0800               	sublw	0
  2187  000362  2426               	addwf	___ftadd@exp1,w,c
  2188  000364  6E21               	movwf	??___ftadd& (0+255),c
  2189  000366  0E18               	movlw	24
  2190  000368  6421               	cpfsgt	??___ftadd,c
  2191  00036A  D007               	goto	l751
  2192  00036C                     u2080:
  2193  00036C  C01B  F01B         	movff	___ftadd@f1,?___ftadd
  2194  000370  C01C  F01C         	movff	___ftadd@f1+1,?___ftadd+1
  2195  000374  C01D  F01D         	movff	___ftadd@f1+2,?___ftadd+2
  2196  000378  0012               	return	
  2197  00037A                     l751:
  2198  00037A  0E06               	movlw	6
  2199  00037C  6E24               	movwf	___ftadd@sign,c
  2200  00037E  BE1D               	btfsc	___ftadd@f1+2,7,c
  2201  000380  8E24               	bsf	___ftadd@sign,7,c
  2202  000382  BE20               	btfsc	___ftadd@f2+2,7,c
  2203  000384  8C24               	bsf	___ftadd@sign,6,c
  2204  000386  8E1C               	bsf	___ftadd@f1+1,7,c
  2205  000388  0EFF               	movlw	255
  2206  00038A  161B               	andwf	___ftadd@f1,f,c
  2207  00038C  0EFF               	movlw	255
  2208  00038E  161C               	andwf	___ftadd@f1+1,f,c
  2209  000390  0E00               	movlw	0
  2210  000392  161D               	andwf	___ftadd@f1+2,f,c
  2211  000394  8E1F               	bsf	___ftadd@f2+1,7,c
  2212  000396  0EFF               	movlw	255
  2213  000398  161E               	andwf	___ftadd@f2,f,c
  2214  00039A  0EFF               	movlw	255
  2215  00039C  161F               	andwf	___ftadd@f2+1,f,c
  2216  00039E  0E00               	movlw	0
  2217  0003A0  1620               	andwf	___ftadd@f2+2,f,c
  2218  0003A2  5025               	movf	___ftadd@exp2,w,c
  2219  0003A4  5C26               	subwf	___ftadd@exp1,w,c
  2220  0003A6  B0D8               	btfsc	status,0,c
  2221  0003A8  D01B               	goto	l756
  2222  0003AA                     u2110:
  2223  0003AA  90D8               	bcf	status,0,c
  2224  0003AC  361E               	rlcf	___ftadd@f2,f,c
  2225  0003AE  361F               	rlcf	___ftadd@f2+1,f,c
  2226  0003B0  3620               	rlcf	___ftadd@f2+2,f,c
  2227  0003B2  0625               	decf	___ftadd@exp2,f,c
  2228  0003B4  5026               	movf	___ftadd@exp1,w,c
  2229  0003B6  1825               	xorwf	___ftadd@exp2,w,c
  2230  0003B8  B4D8               	btfsc	status,2,c
  2231  0003BA  D00D               	goto	l761
  2232  0003BC  0624               	decf	___ftadd@sign,f,c
  2233  0003BE  C024  F021         	movff	___ftadd@sign,??___ftadd
  2234  0003C2  0E07               	movlw	7
  2235  0003C4  1621               	andwf	??___ftadd,f,c
  2236  0003C6  B4D8               	btfsc	status,2,c
  2237  0003C8  D006               	goto	l761
  2238  0003CA  D7EF               	goto	u2110
  2239  0003CC  90D8               	bcf	status,0,c
  2240  0003CE  321D               	rrcf	___ftadd@f1+2,f,c
  2241  0003D0  321C               	rrcf	___ftadd@f1+1,f,c
  2242  0003D2  321B               	rrcf	___ftadd@f1,f,c
  2243  0003D4  2A26               	incf	___ftadd@exp1,f,c
  2244  0003D6                     l761:
  2245  0003D6  5025               	movf	___ftadd@exp2,w,c
  2246  0003D8  1826               	xorwf	___ftadd@exp1,w,c
  2247  0003DA  B4D8               	btfsc	status,2,c
  2248  0003DC  D01F               	goto	u2180
  2249  0003DE  D7F6               	goto	l762
  2250  0003E0                     l756:
  2251  0003E0  5026               	movf	___ftadd@exp1,w,c
  2252  0003E2  5C25               	subwf	___ftadd@exp2,w,c
  2253  0003E4  B0D8               	btfsc	status,0,c
  2254  0003E6  D01A               	goto	u2180
  2255  0003E8                     u2150:
  2256  0003E8  90D8               	bcf	status,0,c
  2257  0003EA  361B               	rlcf	___ftadd@f1,f,c
  2258  0003EC  361C               	rlcf	___ftadd@f1+1,f,c
  2259  0003EE  361D               	rlcf	___ftadd@f1+2,f,c
  2260  0003F0  0626               	decf	___ftadd@exp1,f,c
  2261  0003F2  5026               	movf	___ftadd@exp1,w,c
  2262  0003F4  1825               	xorwf	___ftadd@exp2,w,c
  2263  0003F6  B4D8               	btfsc	status,2,c
  2264  0003F8  D00D               	goto	l770
  2265  0003FA  0624               	decf	___ftadd@sign,f,c
  2266  0003FC  C024  F021         	movff	___ftadd@sign,??___ftadd
  2267  000400  0E07               	movlw	7
  2268  000402  1621               	andwf	??___ftadd,f,c
  2269  000404  B4D8               	btfsc	status,2,c
  2270  000406  D006               	goto	l770
  2271  000408  D7EF               	goto	u2150
  2272  00040A  90D8               	bcf	status,0,c
  2273  00040C  3220               	rrcf	___ftadd@f2+2,f,c
  2274  00040E  321F               	rrcf	___ftadd@f2+1,f,c
  2275  000410  321E               	rrcf	___ftadd@f2,f,c
  2276  000412  2A25               	incf	___ftadd@exp2,f,c
  2277  000414                     l770:
  2278  000414  5025               	movf	___ftadd@exp2,w,c
  2279  000416  1826               	xorwf	___ftadd@exp1,w,c
  2280  000418  A4D8               	btfss	status,2,c
  2281  00041A  D7F7               	goto	l771
  2282  00041C                     u2180:
  2283  00041C  AE24               	btfss	___ftadd@sign,7,c
  2284  00041E  D00C               	goto	l773
  2285  000420  0EFF               	movlw	255
  2286  000422  1A1B               	xorwf	___ftadd@f1,f,c
  2287  000424  0EFF               	movlw	255
  2288  000426  1A1C               	xorwf	___ftadd@f1+1,f,c
  2289  000428  0EFF               	movlw	255
  2290  00042A  1A1D               	xorwf	___ftadd@f1+2,f,c
  2291  00042C  0E01               	movlw	1
  2292  00042E  261B               	addwf	___ftadd@f1,f,c
  2293  000430  0E00               	movlw	0
  2294  000432  221C               	addwfc	___ftadd@f1+1,f,c
  2295  000434  0E00               	movlw	0
  2296  000436  221D               	addwfc	___ftadd@f1+2,f,c
  2297  000438                     l773:
  2298  000438  AC24               	btfss	___ftadd@sign,6,c
  2299  00043A  D00C               	goto	l774
  2300  00043C  0EFF               	movlw	255
  2301  00043E  1A1E               	xorwf	___ftadd@f2,f,c
  2302  000440  0EFF               	movlw	255
  2303  000442  1A1F               	xorwf	___ftadd@f2+1,f,c
  2304  000444  0EFF               	movlw	255
  2305  000446  1A20               	xorwf	___ftadd@f2+2,f,c
  2306  000448  0E01               	movlw	1
  2307  00044A  261E               	addwf	___ftadd@f2,f,c
  2308  00044C  0E00               	movlw	0
  2309  00044E  221F               	addwfc	___ftadd@f2+1,f,c
  2310  000450  0E00               	movlw	0
  2311  000452  2220               	addwfc	___ftadd@f2+2,f,c
  2312  000454                     l774:
  2313  000454  0E00               	movlw	0
  2314  000456  6E24               	movwf	___ftadd@sign,c
  2315  000458  501B               	movf	___ftadd@f1,w,c
  2316  00045A  261E               	addwf	___ftadd@f2,f,c
  2317  00045C  501C               	movf	___ftadd@f1+1,w,c
  2318  00045E  221F               	addwfc	___ftadd@f2+1,f,c
  2319  000460  501D               	movf	___ftadd@f1+2,w,c
  2320  000462  2220               	addwfc	___ftadd@f2+2,f,c
  2321  000464  AE20               	btfss	___ftadd@f2+2,7,c
  2322  000466  D00E               	goto	l775
  2323  000468  0EFF               	movlw	255
  2324  00046A  1A1E               	xorwf	___ftadd@f2,f,c
  2325  00046C  0EFF               	movlw	255
  2326  00046E  1A1F               	xorwf	___ftadd@f2+1,f,c
  2327  000470  0EFF               	movlw	255
  2328  000472  1A20               	xorwf	___ftadd@f2+2,f,c
  2329  000474  0E01               	movlw	1
  2330  000476  261E               	addwf	___ftadd@f2,f,c
  2331  000478  0E00               	movlw	0
  2332  00047A  221F               	addwfc	___ftadd@f2+1,f,c
  2333  00047C  0E00               	movlw	0
  2334  00047E  2220               	addwfc	___ftadd@f2+2,f,c
  2335  000480  0E01               	movlw	1
  2336  000482  6E24               	movwf	___ftadd@sign,c
  2337  000484                     l775:
  2338  000484  C01E  F013         	movff	___ftadd@f2,___ftpack@arg
  2339  000488  C01F  F014         	movff	___ftadd@f2+1,___ftpack@arg+1
  2340  00048C  C020  F015         	movff	___ftadd@f2+2,___ftpack@arg+2
  2341  000490  C026  F016         	movff	___ftadd@exp1,___ftpack@exp
  2342  000494  C024  F017         	movff	___ftadd@sign,___ftpack@sign
  2343  000498  ECC0  F003         	call	___ftpack	;wreg free
  2344  00049C  C013  F01B         	movff	?___ftpack,?___ftadd
  2345  0004A0  C014  F01C         	movff	?___ftpack+1,?___ftadd+1
  2346  0004A4  C015  F01D         	movff	?___ftpack+2,?___ftadd+2
  2347  0004A8  0012               	return	
  2348  0004AA                     __end_of___ftadd:
  2349                           	opt stack 0
  2350                           tblptru	equ	0xFF8
  2351                           tblptrh	equ	0xFF7
  2352                           tblptrl	equ	0xFF6
  2353                           tablat	equ	0xFF5
  2354                           intcon	equ	0xFF2
  2355                           postinc0	equ	0xFEE
  2356                           wreg	equ	0xFE8
  2357                           postdec1	equ	0xFE5
  2358                           fsr1l	equ	0xFE1
  2359                           status	equ	0xFD8
  2360                           
  2361 ;; *************** function ___awtoft *****************
  2362 ;; Defined at:
  2363 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awtoft.c"
  2364 ;; Parameters:    Size  Location     Type
  2365 ;;  c               2   26[COMRAM] int 
  2366 ;; Auto vars:     Size  Location     Type
  2367 ;;  sign            1   29[COMRAM] unsigned char 
  2368 ;; Return value:  Size  Location     Type
  2369 ;;                  3   26[COMRAM] float 
  2370 ;; Registers used:
  2371 ;;		wreg, status,2, status,0, cstack
  2372 ;; Tracked objects:
  2373 ;;		On entry : 0/0
  2374 ;;		On exit  : 0/0
  2375 ;;		Unchanged: 0/0
  2376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2377 ;;      Params:         3       0       0       0       0       0       0
  2378 ;;      Locals:         1       0       0       0       0       0       0
  2379 ;;      Temps:          0       0       0       0       0       0       0
  2380 ;;      Totals:         4       0       0       0       0       0       0
  2381 ;;Total ram usage:        4 bytes
  2382 ;; Hardware stack levels used:    1
  2383 ;; Hardware stack levels required when called:    5
  2384 ;; This function calls:
  2385 ;;		___ftpack
  2386 ;; This function is called by:
  2387 ;;		_calculo_PID
  2388 ;; This function uses a non-reentrant model
  2389 ;;
  2390                           
  2391                           	psect	text12
  2392  000B66                     __ptext12:
  2393                           	opt stack 0
  2394  000B66                     ___awtoft:
  2395                           	opt stack 24
  2396                           
  2397                           ;incstack = 0
  2398  000B66  0E00               	movlw	0
  2399  000B68  6E1E               	movwf	___awtoft@sign,c
  2400  000B6A  AE1C               	btfss	___awtoft@c+1,7,c
  2401  000B6C  D006               	goto	l697
  2402  000B6E  6C1B               	negf	___awtoft@c,c
  2403  000B70  1E1C               	comf	___awtoft@c+1,f,c
  2404  000B72  B0D8               	btfsc	status,0,c
  2405  000B74  2A1C               	incf	___awtoft@c+1,f,c
  2406  000B76  0E01               	movlw	1
  2407  000B78  6E1E               	movwf	___awtoft@sign,c
  2408  000B7A                     l697:
  2409  000B7A  C01B  F013         	movff	___awtoft@c,___ftpack@arg
  2410  000B7E  C01C  F014         	movff	___awtoft@c+1,___ftpack@arg+1
  2411  000B82  6A15               	clrf	___ftpack@arg+2,c
  2412  000B84  0E8E               	movlw	142
  2413  000B86  6E16               	movwf	___ftpack@exp,c
  2414  000B88  C01E  F017         	movff	___awtoft@sign,___ftpack@sign
  2415  000B8C  ECC0  F003         	call	___ftpack	;wreg free
  2416  000B90  C013  F01B         	movff	?___ftpack,?___awtoft
  2417  000B94  C014  F01C         	movff	?___ftpack+1,?___awtoft+1
  2418  000B98  C015  F01D         	movff	?___ftpack+2,?___awtoft+2
  2419  000B9C  0012               	return	
  2420  000B9E                     __end_of___awtoft:
  2421                           	opt stack 0
  2422                           tblptru	equ	0xFF8
  2423                           tblptrh	equ	0xFF7
  2424                           tblptrl	equ	0xFF6
  2425                           tablat	equ	0xFF5
  2426                           intcon	equ	0xFF2
  2427                           postinc0	equ	0xFEE
  2428                           wreg	equ	0xFE8
  2429                           postdec1	equ	0xFE5
  2430                           fsr1l	equ	0xFE1
  2431                           status	equ	0xFD8
  2432                           
  2433 ;; *************** function ___ftpack *****************
  2434 ;; Defined at:
  2435 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\float.c"
  2436 ;; Parameters:    Size  Location     Type
  2437 ;;  arg             3   18[COMRAM] unsigned um
  2438 ;;  exp             1   21[COMRAM] unsigned char 
  2439 ;;  sign            1   22[COMRAM] unsigned char 
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;		None
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  3   18[COMRAM] float 
  2444 ;; Registers used:
  2445 ;;		wreg, status,2, status,0
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2451 ;;      Params:         5       0       0       0       0       0       0
  2452 ;;      Locals:         0       0       0       0       0       0       0
  2453 ;;      Temps:          3       0       0       0       0       0       0
  2454 ;;      Totals:         8       0       0       0       0       0       0
  2455 ;;Total ram usage:        8 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    4
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		___awtoft
  2462 ;;		___ftadd
  2463 ;;		___ftmul
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           	psect	text13
  2468  000780                     __ptext13:
  2469                           	opt stack 0
  2470  000780                     ___ftpack:
  2471                           	opt stack 24
  2472                           
  2473                           ;incstack = 0
  2474  000780  5016               	movf	___ftpack@exp,w,c
  2475  000782  B4D8               	btfsc	status,2,c
  2476  000784  D005               	goto	u1940
  2477  000786  5013               	movf	___ftpack@arg,w,c
  2478  000788  1014               	iorwf	___ftpack@arg+1,w,c
  2479  00078A  1015               	iorwf	___ftpack@arg+2,w,c
  2480  00078C  A4D8               	btfss	status,2,c
  2481  00078E  D00C               	goto	l716
  2482  000790                     u1940:
  2483  000790  0E00               	movlw	0
  2484  000792  6E13               	movwf	?___ftpack,c
  2485  000794  0E00               	movlw	0
  2486  000796  6E14               	movwf	?___ftpack+1,c
  2487  000798  0E00               	movlw	0
  2488  00079A  6E15               	movwf	?___ftpack+2,c
  2489  00079C  0012               	return	
  2490  00079E  2A16               	incf	___ftpack@exp,f,c
  2491  0007A0  90D8               	bcf	status,0,c
  2492  0007A2  3215               	rrcf	___ftpack@arg+2,f,c
  2493  0007A4  3214               	rrcf	___ftpack@arg+1,f,c
  2494  0007A6  3213               	rrcf	___ftpack@arg,f,c
  2495  0007A8                     l716:
  2496  0007A8  0E00               	movlw	0
  2497  0007AA  1413               	andwf	___ftpack@arg,w,c
  2498  0007AC  6E18               	movwf	??___ftpack& (0+255),c
  2499  0007AE  0E00               	movlw	0
  2500  0007B0  1414               	andwf	___ftpack@arg+1,w,c
  2501  0007B2  6E19               	movwf	(??___ftpack+1)& (0+255),c
  2502  0007B4  0EFE               	movlw	254
  2503  0007B6  1415               	andwf	___ftpack@arg+2,w,c
  2504  0007B8  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  2505  0007BA  5018               	movf	??___ftpack,w,c
  2506  0007BC  1019               	iorwf	??___ftpack+1,w,c
  2507  0007BE  101A               	iorwf	??___ftpack+2,w,c
  2508  0007C0  B4D8               	btfsc	status,2,c
  2509  0007C2  D00C               	goto	l719
  2510  0007C4  D7EC               	goto	l717
  2511  0007C6  2A16               	incf	___ftpack@exp,f,c
  2512  0007C8  0E01               	movlw	1
  2513  0007CA  2613               	addwf	___ftpack@arg,f,c
  2514  0007CC  0E00               	movlw	0
  2515  0007CE  2214               	addwfc	___ftpack@arg+1,f,c
  2516  0007D0  0E00               	movlw	0
  2517  0007D2  2215               	addwfc	___ftpack@arg+2,f,c
  2518  0007D4  90D8               	bcf	status,0,c
  2519  0007D6  3215               	rrcf	___ftpack@arg+2,f,c
  2520  0007D8  3214               	rrcf	___ftpack@arg+1,f,c
  2521  0007DA  3213               	rrcf	___ftpack@arg,f,c
  2522  0007DC                     l719:
  2523  0007DC  0E00               	movlw	0
  2524  0007DE  1413               	andwf	___ftpack@arg,w,c
  2525  0007E0  6E18               	movwf	??___ftpack& (0+255),c
  2526  0007E2  0E00               	movlw	0
  2527  0007E4  1414               	andwf	___ftpack@arg+1,w,c
  2528  0007E6  6E19               	movwf	(??___ftpack+1)& (0+255),c
  2529  0007E8  0EFF               	movlw	255
  2530  0007EA  1415               	andwf	___ftpack@arg+2,w,c
  2531  0007EC  6E1A               	movwf	(??___ftpack+2)& (0+255),c
  2532  0007EE  5018               	movf	??___ftpack,w,c
  2533  0007F0  1019               	iorwf	??___ftpack+1,w,c
  2534  0007F2  101A               	iorwf	??___ftpack+2,w,c
  2535  0007F4  B4D8               	btfsc	status,2,c
  2536  0007F6  D006               	goto	l722
  2537  0007F8  D7E6               	goto	l720
  2538  0007FA  0616               	decf	___ftpack@exp,f,c
  2539  0007FC  90D8               	bcf	status,0,c
  2540  0007FE  3613               	rlcf	___ftpack@arg,f,c
  2541  000800  3614               	rlcf	___ftpack@arg+1,f,c
  2542  000802  3615               	rlcf	___ftpack@arg+2,f,c
  2543  000804                     l722:
  2544  000804  BE14               	btfsc	___ftpack@arg+1,7,c
  2545  000806  D003               	goto	u1980
  2546  000808  0E02               	movlw	2
  2547  00080A  6016               	cpfslt	___ftpack@exp,c
  2548  00080C  D7F6               	goto	l723
  2549  00080E                     u1980:
  2550  00080E  A016               	btfss	___ftpack@exp,0,c
  2551  000810  9E14               	bcf	___ftpack@arg+1,7,c
  2552  000812  90D8               	bcf	status,0,c
  2553  000814  3216               	rrcf	___ftpack@exp,f,c
  2554  000816  5016               	movf	___ftpack@exp,w,c
  2555  000818  1215               	iorwf	___ftpack@arg+2,f,c
  2556  00081A  5017               	movf	___ftpack@sign,w,c
  2557  00081C  A4D8               	btfss	status,2,c
  2558  00081E  8E15               	bsf	___ftpack@arg+2,7,c
  2559  000820  C013  F013         	movff	___ftpack@arg,?___ftpack
  2560  000824  C014  F014         	movff	___ftpack@arg+1,?___ftpack+1
  2561  000828  C015  F015         	movff	___ftpack@arg+2,?___ftpack+2
  2562  00082C  0012               	return	
  2563  00082E                     __end_of___ftpack:
  2564                           	opt stack 0
  2565                           tblptru	equ	0xFF8
  2566                           tblptrh	equ	0xFF7
  2567                           tblptrl	equ	0xFF6
  2568                           tablat	equ	0xFF5
  2569                           intcon	equ	0xFF2
  2570                           postinc0	equ	0xFEE
  2571                           wreg	equ	0xFE8
  2572                           postdec1	equ	0xFE5
  2573                           fsr1l	equ	0xFE1
  2574                           status	equ	0xFD8
  2575                           
  2576 ;; *************** function ___fttol *****************
  2577 ;; Defined at:
  2578 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\fttol.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;  f1              3   12[BANK0 ] float 
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;  lval            4   22[BANK0 ] unsigned long 
  2583 ;;  exp1            1   26[BANK0 ] unsigned char 
  2584 ;;  sign1           1   21[BANK0 ] unsigned char 
  2585 ;; Return value:  Size  Location     Type
  2586 ;;                  4   12[BANK0 ] long 
  2587 ;; Registers used:
  2588 ;;		wreg, status,2, status,0
  2589 ;; Tracked objects:
  2590 ;;		On entry : 0/0
  2591 ;;		On exit  : 0/0
  2592 ;;		Unchanged: 0/0
  2593 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2594 ;;      Params:         0       4       0       0       0       0       0
  2595 ;;      Locals:         0       6       0       0       0       0       0
  2596 ;;      Temps:          0       5       0       0       0       0       0
  2597 ;;      Totals:         0      15       0       0       0       0       0
  2598 ;;Total ram usage:       15 bytes
  2599 ;; Hardware stack levels used:    1
  2600 ;; Hardware stack levels required when called:    4
  2601 ;; This function calls:
  2602 ;;		Nothing
  2603 ;; This function is called by:
  2604 ;;		_main
  2605 ;; This function uses a non-reentrant model
  2606 ;;
  2607                           
  2608                           	psect	text14
  2609  0004AA                     __ptext14:
  2610                           	opt stack 0
  2611  0004AA                     ___fttol:
  2612                           	opt stack 26
  2613                           
  2614                           ;incstack = 0
  2615  0004AA  C06E  F070         	movff	___fttol@f1+2,??___fttol
  2616  0004AE  0100               	movlb	0	; () banked
  2617  0004B0  6B71               	clrf	(??___fttol+1)& (0+255),b
  2618  0004B2  6B72               	clrf	(??___fttol+2)& (0+255),b
  2619  0004B4  356D               	rlcf	(___fttol@f1+1)& (0+255),w,b
  2620  0004B6  3770               	rlcf	??___fttol& (0+255),f,b
  2621  0004B8  E301               	bnc	u2301
  2622  0004BA  8171               	bsf	(??___fttol+1)& (0+255),0,b
  2623  0004BC                     u2301:
  2624  0004BC  5170               	movf	??___fttol& (0+255),w,b
  2625  0004BE  6F7A               	movwf	___fttol@exp1& (0+255),b
  2626  0004C0  517A               	movf	___fttol@exp1& (0+255),w,b
  2627  0004C2  A4D8               	btfss	status,2,c
  2628  0004C4  D009               	goto	l816
  2629                           
  2630                           ; BSR set to: 0
  2631  0004C6  0E00               	movlw	0
  2632  0004C8  6F6C               	movwf	?___fttol& (0+255),b
  2633  0004CA  0E00               	movlw	0
  2634  0004CC  6F6D               	movwf	(?___fttol+1)& (0+255),b
  2635  0004CE  0E00               	movlw	0
  2636  0004D0  6F6E               	movwf	(?___fttol+2)& (0+255),b
  2637  0004D2  0E00               	movlw	0
  2638  0004D4  6F6F               	movwf	(?___fttol+3)& (0+255),b
  2639                           
  2640                           ; BSR set to: 0
  2641  0004D6  0012               	return	
  2642  0004D8                     l816:
  2643                           
  2644                           ; BSR set to: 0
  2645                           
  2646                           ; BSR set to: 0
  2647  0004D8  0E17               	movlw	23
  2648  0004DA  6F70               	movwf	??___fttol& (0+255),b
  2649  0004DC  C06C  F071         	movff	___fttol@f1,??___fttol+1
  2650  0004E0  C06D  F072         	movff	___fttol@f1+1,??___fttol+2
  2651  0004E4  C06E  F073         	movff	___fttol@f1+2,??___fttol+3
  2652  0004E8  2970               	incf	??___fttol& (0+255),w,b
  2653  0004EA  6F74               	movwf	(??___fttol+4)& (0+255),b
  2654  0004EC  D004               	goto	u2320
  2655  0004EE                     u2325:
  2656  0004EE  90D8               	bcf	status,0,c
  2657  0004F0  3373               	rrcf	(??___fttol+3)& (0+255),f,b
  2658  0004F2  3372               	rrcf	(??___fttol+2)& (0+255),f,b
  2659  0004F4  3371               	rrcf	(??___fttol+1)& (0+255),f,b
  2660  0004F6                     u2320:
  2661  0004F6  2F74               	decfsz	(??___fttol+4)& (0+255),f,b
  2662  0004F8  D7FA               	goto	u2325
  2663  0004FA  0100               	movlb	0	; () banked
  2664  0004FC  5171               	movf	(??___fttol+1)& (0+255),w,b
  2665  0004FE  6F75               	movwf	___fttol@sign1& (0+255),b
  2666                           
  2667                           ; BSR set to: 0
  2668  000500  8F6D               	bsf	(___fttol@f1+1)& (0+255),7,b
  2669                           
  2670                           ; BSR set to: 0
  2671  000502  0EFF               	movlw	255
  2672  000504  176C               	andwf	___fttol@f1& (0+255),f,b
  2673  000506  0EFF               	movlw	255
  2674  000508  176D               	andwf	(___fttol@f1+1)& (0+255),f,b
  2675  00050A  0E00               	movlw	0
  2676  00050C  176E               	andwf	(___fttol@f1+2)& (0+255),f,b
  2677                           
  2678                           ; BSR set to: 0
  2679  00050E  516C               	movf	___fttol@f1& (0+255),w,b
  2680  000510  6F76               	movwf	___fttol@lval& (0+255),b
  2681  000512  516D               	movf	(___fttol@f1+1)& (0+255),w,b
  2682  000514  6F77               	movwf	(___fttol@lval+1)& (0+255),b
  2683  000516  516E               	movf	(___fttol@f1+2)& (0+255),w,b
  2684  000518  6F78               	movwf	(___fttol@lval+2)& (0+255),b
  2685  00051A  6B79               	clrf	(___fttol@lval+3)& (0+255),b
  2686                           
  2687                           ; BSR set to: 0
  2688  00051C  0E8E               	movlw	142
  2689  00051E  5F7A               	subwf	___fttol@exp1& (0+255),f,b
  2690                           
  2691                           ; BSR set to: 0
  2692  000520  AF7A               	btfss	___fttol@exp1& (0+255),7,b
  2693  000522  D016               	goto	l818
  2694                           
  2695                           ; BSR set to: 0
  2696  000524  517A               	movf	___fttol@exp1& (0+255),w,b
  2697  000526  0A80               	xorlw	128
  2698  000528  0F8F               	addlw	143
  2699  00052A  B0D8               	btfsc	status,0,c
  2700  00052C  D009               	goto	l819
  2701                           
  2702                           ; BSR set to: 0
  2703  00052E  0E00               	movlw	0
  2704  000530  6F6C               	movwf	?___fttol& (0+255),b
  2705  000532  0E00               	movlw	0
  2706  000534  6F6D               	movwf	(?___fttol+1)& (0+255),b
  2707  000536  0E00               	movlw	0
  2708  000538  6F6E               	movwf	(?___fttol+2)& (0+255),b
  2709  00053A  0E00               	movlw	0
  2710  00053C  6F6F               	movwf	(?___fttol+3)& (0+255),b
  2711                           
  2712                           ; BSR set to: 0
  2713  00053E  0012               	return	
  2714  000540                     l819:
  2715                           
  2716                           ; BSR set to: 0
  2717                           
  2718                           ; BSR set to: 0
  2719                           
  2720                           ; BSR set to: 0
  2721  000540  90D8               	bcf	status,0,c
  2722  000542  3379               	rrcf	(___fttol@lval+3)& (0+255),f,b
  2723  000544  3378               	rrcf	(___fttol@lval+2)& (0+255),f,b
  2724  000546  3377               	rrcf	(___fttol@lval+1)& (0+255),f,b
  2725  000548  3376               	rrcf	___fttol@lval& (0+255),f,b
  2726                           
  2727                           ; BSR set to: 0
  2728  00054A  3F7A               	incfsz	___fttol@exp1& (0+255),f,b
  2729  00054C  D7F9               	goto	l819
  2730                           
  2731                           ; BSR set to: 0
  2732  00054E  D015               	goto	u2360
  2733  000550                     l818:
  2734                           
  2735                           ; BSR set to: 0
  2736                           
  2737                           ; BSR set to: 0
  2738  000550  0E17               	movlw	23
  2739  000552  657A               	cpfsgt	___fttol@exp1& (0+255),b
  2740  000554  D00F               	goto	l824
  2741                           
  2742                           ; BSR set to: 0
  2743  000556  0E00               	movlw	0
  2744  000558  6F6C               	movwf	?___fttol& (0+255),b
  2745  00055A  0E00               	movlw	0
  2746  00055C  6F6D               	movwf	(?___fttol+1)& (0+255),b
  2747  00055E  0E00               	movlw	0
  2748  000560  6F6E               	movwf	(?___fttol+2)& (0+255),b
  2749  000562  0E00               	movlw	0
  2750  000564  6F6F               	movwf	(?___fttol+3)& (0+255),b
  2751                           
  2752                           ; BSR set to: 0
  2753  000566  0012               	return	
  2754  000568                     
  2755                           ; BSR set to: 0
  2756                           
  2757                           ; BSR set to: 0
  2758  000568  90D8               	bcf	status,0,c
  2759  00056A  3776               	rlcf	___fttol@lval& (0+255),f,b
  2760  00056C  3777               	rlcf	(___fttol@lval+1)& (0+255),f,b
  2761  00056E  3778               	rlcf	(___fttol@lval+2)& (0+255),f,b
  2762  000570  3779               	rlcf	(___fttol@lval+3)& (0+255),f,b
  2763  000572  077A               	decf	___fttol@exp1& (0+255),f,b
  2764  000574                     l824:
  2765                           
  2766                           ; BSR set to: 0
  2767                           
  2768                           ; BSR set to: 0
  2769  000574  517A               	movf	___fttol@exp1& (0+255),w,b
  2770  000576  A4D8               	btfss	status,2,c
  2771  000578  D7F7               	goto	l825
  2772  00057A                     u2360:
  2773                           
  2774                           ; BSR set to: 0
  2775                           
  2776                           ; BSR set to: 0
  2777                           
  2778                           ; BSR set to: 0
  2779  00057A  5175               	movf	___fttol@sign1& (0+255),w,b
  2780  00057C  B4D8               	btfsc	status,2,c
  2781  00057E  D008               	goto	l827
  2782                           
  2783                           ; BSR set to: 0
  2784  000580  1F79               	comf	(___fttol@lval+3)& (0+255),f,b
  2785  000582  1F78               	comf	(___fttol@lval+2)& (0+255),f,b
  2786  000584  1F77               	comf	(___fttol@lval+1)& (0+255),f,b
  2787  000586  6D76               	negf	___fttol@lval& (0+255),b
  2788  000588  0E00               	movlw	0
  2789  00058A  2377               	addwfc	(___fttol@lval+1)& (0+255),f,b
  2790  00058C  2378               	addwfc	(___fttol@lval+2)& (0+255),f,b
  2791  00058E  2379               	addwfc	(___fttol@lval+3)& (0+255),f,b
  2792  000590                     l827:
  2793                           
  2794                           ; BSR set to: 0
  2795                           
  2796                           ; BSR set to: 0
  2797  000590  C076  F06C         	movff	___fttol@lval,?___fttol
  2798  000594  C077  F06D         	movff	___fttol@lval+1,?___fttol+1
  2799  000598  C078  F06E         	movff	___fttol@lval+2,?___fttol+2
  2800  00059C  C079  F06F         	movff	___fttol@lval+3,?___fttol+3
  2801  0005A0  0012               	return	
  2802  0005A2                     __end_of___fttol:
  2803                           	opt stack 0
  2804                           tblptru	equ	0xFF8
  2805                           tblptrh	equ	0xFF7
  2806                           tblptrl	equ	0xFF6
  2807                           tablat	equ	0xFF5
  2808                           intcon	equ	0xFF2
  2809                           postinc0	equ	0xFEE
  2810                           wreg	equ	0xFE8
  2811                           postdec1	equ	0xFE5
  2812                           fsr1l	equ	0xFE1
  2813                           status	equ	0xFD8
  2814                           
  2815 ;; *************** function ___awdiv *****************
  2816 ;; Defined at:
  2817 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.44\sources\common\awdiv.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;  dividend        2   18[COMRAM] int 
  2820 ;;  divisor         2   20[COMRAM] int 
  2821 ;; Auto vars:     Size  Location     Type
  2822 ;;  quotient        2   24[COMRAM] int 
  2823 ;;  sign            1   23[COMRAM] unsigned char 
  2824 ;;  counter         1   22[COMRAM] unsigned char 
  2825 ;; Return value:  Size  Location     Type
  2826 ;;                  2   18[COMRAM] int 
  2827 ;; Registers used:
  2828 ;;		wreg, status,2, status,0
  2829 ;; Tracked objects:
  2830 ;;		On entry : 0/0
  2831 ;;		On exit  : 0/0
  2832 ;;		Unchanged: 0/0
  2833 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2834 ;;      Params:         4       0       0       0       0       0       0
  2835 ;;      Locals:         4       0       0       0       0       0       0
  2836 ;;      Temps:          0       0       0       0       0       0       0
  2837 ;;      Totals:         8       0       0       0       0       0       0
  2838 ;;Total ram usage:        8 bytes
  2839 ;; Hardware stack levels used:    1
  2840 ;; Hardware stack levels required when called:    4
  2841 ;; This function calls:
  2842 ;;		Nothing
  2843 ;; This function is called by:
  2844 ;;		_main
  2845 ;; This function uses a non-reentrant model
  2846 ;;
  2847                           
  2848                           	psect	text15
  2849  0008D8                     __ptext15:
  2850                           	opt stack 0
  2851  0008D8                     ___awdiv:
  2852                           	opt stack 26
  2853                           
  2854                           ; BSR set to: 0
  2855                           ;incstack = 0
  2856  0008D8  0E00               	movlw	0
  2857  0008DA  6E18               	movwf	___awdiv@sign,c
  2858  0008DC  AE16               	btfss	___awdiv@divisor+1,7,c
  2859  0008DE  D006               	goto	l669
  2860  0008E0  6C15               	negf	___awdiv@divisor,c
  2861  0008E2  1E16               	comf	___awdiv@divisor+1,f,c
  2862  0008E4  B0D8               	btfsc	status,0,c
  2863  0008E6  2A16               	incf	___awdiv@divisor+1,f,c
  2864  0008E8  0E01               	movlw	1
  2865  0008EA  6E18               	movwf	___awdiv@sign,c
  2866  0008EC                     l669:
  2867  0008EC  AE14               	btfss	___awdiv@dividend+1,7,c
  2868  0008EE  D006               	goto	l670
  2869  0008F0  6C13               	negf	___awdiv@dividend,c
  2870  0008F2  1E14               	comf	___awdiv@dividend+1,f,c
  2871  0008F4  B0D8               	btfsc	status,0,c
  2872  0008F6  2A14               	incf	___awdiv@dividend+1,f,c
  2873  0008F8  0E01               	movlw	1
  2874  0008FA  1A18               	xorwf	___awdiv@sign,f,c
  2875  0008FC                     l670:
  2876  0008FC  0E00               	movlw	0
  2877  0008FE  6E1A               	movwf	___awdiv@quotient+1,c
  2878  000900  0E00               	movlw	0
  2879  000902  6E19               	movwf	___awdiv@quotient,c
  2880  000904  5015               	movf	___awdiv@divisor,w,c
  2881  000906  1016               	iorwf	___awdiv@divisor+1,w,c
  2882  000908  B4D8               	btfsc	status,2,c
  2883  00090A  D01C               	goto	l677
  2884  00090C  0E01               	movlw	1
  2885  00090E  6E17               	movwf	___awdiv@counter,c
  2886  000910  D004               	goto	l672
  2887  000912  90D8               	bcf	status,0,c
  2888  000914  3615               	rlcf	___awdiv@divisor,f,c
  2889  000916  3616               	rlcf	___awdiv@divisor+1,f,c
  2890  000918  2A17               	incf	___awdiv@counter,f,c
  2891  00091A                     l672:
  2892  00091A  AE16               	btfss	___awdiv@divisor+1,7,c
  2893  00091C  D7FA               	goto	l673
  2894  00091E                     u1600:
  2895  00091E  90D8               	bcf	status,0,c
  2896  000920  3619               	rlcf	___awdiv@quotient,f,c
  2897  000922  361A               	rlcf	___awdiv@quotient+1,f,c
  2898  000924  5015               	movf	___awdiv@divisor,w,c
  2899  000926  5C13               	subwf	___awdiv@dividend,w,c
  2900  000928  5016               	movf	___awdiv@divisor+1,w,c
  2901  00092A  5814               	subwfb	___awdiv@dividend+1,w,c
  2902  00092C  A0D8               	btfss	status,0,c
  2903  00092E  D005               	goto	l676
  2904  000930  5015               	movf	___awdiv@divisor,w,c
  2905  000932  5E13               	subwf	___awdiv@dividend,f,c
  2906  000934  5016               	movf	___awdiv@divisor+1,w,c
  2907  000936  5A14               	subwfb	___awdiv@dividend+1,f,c
  2908  000938  8019               	bsf	___awdiv@quotient,0,c
  2909  00093A                     l676:
  2910  00093A  90D8               	bcf	status,0,c
  2911  00093C  3216               	rrcf	___awdiv@divisor+1,f,c
  2912  00093E  3215               	rrcf	___awdiv@divisor,f,c
  2913  000940  2E17               	decfsz	___awdiv@counter,f,c
  2914  000942  D7ED               	goto	u1600
  2915  000944                     l677:
  2916  000944  5018               	movf	___awdiv@sign,w,c
  2917  000946  B4D8               	btfsc	status,2,c
  2918  000948  D004               	goto	l678
  2919  00094A  6C19               	negf	___awdiv@quotient,c
  2920  00094C  1E1A               	comf	___awdiv@quotient+1,f,c
  2921  00094E  B0D8               	btfsc	status,0,c
  2922  000950  2A1A               	incf	___awdiv@quotient+1,f,c
  2923  000952                     l678:
  2924  000952  C019  F013         	movff	___awdiv@quotient,?___awdiv
  2925  000956  C01A  F014         	movff	___awdiv@quotient+1,?___awdiv+1
  2926  00095A  0012               	return	
  2927  00095C                     __end_of___awdiv:
  2928                           	opt stack 0
  2929                           tblptru	equ	0xFF8
  2930                           tblptrh	equ	0xFF7
  2931                           tblptrl	equ	0xFF6
  2932                           tablat	equ	0xFF5
  2933                           intcon	equ	0xFF2
  2934                           postinc0	equ	0xFEE
  2935                           wreg	equ	0xFE8
  2936                           postdec1	equ	0xFE5
  2937                           fsr1l	equ	0xFE1
  2938                           status	equ	0xFD8
  2939                           
  2940 ;; *************** function _SYSTEM_Initialize *****************
  2941 ;; Defined at:
  2942 ;;		line 50 in file "mcc_generated_files/mcc.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;		None
  2945 ;; Auto vars:     Size  Location     Type
  2946 ;;		None
  2947 ;; Return value:  Size  Location     Type
  2948 ;;                  1    wreg      void 
  2949 ;; Registers used:
  2950 ;;		wreg, status,2, status,0, cstack
  2951 ;; Tracked objects:
  2952 ;;		On entry : 0/0
  2953 ;;		On exit  : 0/0
  2954 ;;		Unchanged: 0/0
  2955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2956 ;;      Params:         0       0       0       0       0       0       0
  2957 ;;      Locals:         0       0       0       0       0       0       0
  2958 ;;      Temps:          0       0       0       0       0       0       0
  2959 ;;      Totals:         0       0       0       0       0       0       0
  2960 ;;Total ram usage:        0 bytes
  2961 ;; Hardware stack levels used:    1
  2962 ;; Hardware stack levels required when called:    6
  2963 ;; This function calls:
  2964 ;;		_ADC_Initialize
  2965 ;;		_EUSART1_Initialize
  2966 ;;		_INTERRUPT_Initialize
  2967 ;;		_OSCILLATOR_Initialize
  2968 ;;		_PIN_MANAGER_Initialize
  2969 ;;		_PWM4_Initialize
  2970 ;;		_PWM5_Initialize
  2971 ;;		_TMR2_Initialize
  2972 ;;		_TMR4_Initialize
  2973 ;; This function is called by:
  2974 ;;		_main
  2975 ;; This function uses a non-reentrant model
  2976 ;;
  2977                           
  2978                           	psect	text16
  2979  000C60                     __ptext16:
  2980                           	opt stack 0
  2981  000C60                     _SYSTEM_Initialize:
  2982                           	opt stack 24
  2983                           
  2984                           ;mcc.c: 53: INTERRUPT_Initialize();
  2985                           
  2986                           ;incstack = 0
  2987  000C60  ECCE  F006         	call	_INTERRUPT_Initialize	;wreg free
  2988                           
  2989                           ;mcc.c: 54: PIN_MANAGER_Initialize();
  2990  000C64  EC93  F005         	call	_PIN_MANAGER_Initialize	;wreg free
  2991                           
  2992                           ;mcc.c: 55: OSCILLATOR_Initialize();
  2993  000C68  EC9C  F006         	call	_OSCILLATOR_Initialize	;wreg free
  2994                           
  2995                           ;mcc.c: 56: ADC_Initialize();
  2996  000C6C  EC74  F006         	call	_ADC_Initialize	;wreg free
  2997                           
  2998                           ;mcc.c: 57: PWM4_Initialize();
  2999  000C70  EC89  F006         	call	_PWM4_Initialize	;wreg free
  3000                           
  3001                           ;mcc.c: 58: TMR4_Initialize();
  3002  000C74  EC93  F006         	call	_TMR4_Initialize	;wreg free
  3003                           
  3004                           ;mcc.c: 59: TMR2_Initialize();
  3005  000C78  ECA5  F006         	call	_TMR2_Initialize	;wreg free
  3006                           
  3007                           ;mcc.c: 60: PWM5_Initialize();
  3008  000C7C  EC7F  F006         	call	_PWM5_Initialize	;wreg free
  3009                           
  3010                           ;mcc.c: 61: EUSART1_Initialize();
  3011  000C80  ECAE  F004         	call	_EUSART1_Initialize	;wreg free
  3012  000C84  0012               	return		;funcret
  3013  000C86                     __end_of_SYSTEM_Initialize:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           intcon	equ	0xFF2
  3020                           postinc0	equ	0xFEE
  3021                           wreg	equ	0xFE8
  3022                           postdec1	equ	0xFE5
  3023                           fsr1l	equ	0xFE1
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _TMR4_Initialize *****************
  3027 ;; Defined at:
  3028 ;;		line 62 in file "mcc_generated_files/tmr4.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;		None
  3033 ;; Return value:  Size  Location     Type
  3034 ;;                  1    wreg      void 
  3035 ;; Registers used:
  3036 ;;		wreg, status,2
  3037 ;; Tracked objects:
  3038 ;;		On entry : 0/0
  3039 ;;		On exit  : 0/0
  3040 ;;		Unchanged: 0/0
  3041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3042 ;;      Params:         0       0       0       0       0       0       0
  3043 ;;      Locals:         0       0       0       0       0       0       0
  3044 ;;      Temps:          0       0       0       0       0       0       0
  3045 ;;      Totals:         0       0       0       0       0       0       0
  3046 ;;Total ram usage:        0 bytes
  3047 ;; Hardware stack levels used:    1
  3048 ;; Hardware stack levels required when called:    4
  3049 ;; This function calls:
  3050 ;;		Nothing
  3051 ;; This function is called by:
  3052 ;;		_SYSTEM_Initialize
  3053 ;; This function uses a non-reentrant model
  3054 ;;
  3055                           
  3056                           	psect	text17
  3057  000D26                     __ptext17:
  3058                           	opt stack 0
  3059  000D26                     _TMR4_Initialize:
  3060                           	opt stack 25
  3061                           
  3062                           ;tmr4.c: 67: PR4 = 0xE8;
  3063                           
  3064                           ;incstack = 0
  3065  000D26  0EE8               	movlw	232
  3066  000D28  010F               	movlb	15	; () banked
  3067  000D2A  6F52               	movwf	82,b	;volatile
  3068                           
  3069                           ;tmr4.c: 70: TMR4 = 0x00;
  3070  000D2C  0E00               	movlw	0
  3071  000D2E  6F53               	movwf	83,b	;volatile
  3072                           
  3073                           ; BSR set to: 15
  3074                           ;tmr4.c: 73: PIR5bits.TMR4IF = 0;
  3075  000D30  907E               	bcf	3966,0,c	;volatile
  3076                           
  3077                           ;tmr4.c: 76: T4CON = 0x5D;
  3078  000D32  0E5D               	movlw	93
  3079  000D34  6F51               	movwf	81,b	;volatile
  3080                           
  3081                           ; BSR set to: 15
  3082  000D36  0012               	return		;funcret
  3083  000D38                     __end_of_TMR4_Initialize:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           intcon	equ	0xFF2
  3090                           postinc0	equ	0xFEE
  3091                           wreg	equ	0xFE8
  3092                           postdec1	equ	0xFE5
  3093                           fsr1l	equ	0xFE1
  3094                           status	equ	0xFD8
  3095                           
  3096 ;; *************** function _TMR2_Initialize *****************
  3097 ;; Defined at:
  3098 ;;		line 62 in file "mcc_generated_files/tmr2.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;		None
  3103 ;; Return value:  Size  Location     Type
  3104 ;;                  1    wreg      void 
  3105 ;; Registers used:
  3106 ;;		wreg, status,2
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3112 ;;      Params:         0       0       0       0       0       0       0
  3113 ;;      Locals:         0       0       0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0
  3115 ;;      Totals:         0       0       0       0       0       0       0
  3116 ;;Total ram usage:        0 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    4
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_SYSTEM_Initialize
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           	psect	text18
  3127  000D4A                     __ptext18:
  3128                           	opt stack 0
  3129  000D4A                     _TMR2_Initialize:
  3130                           	opt stack 25
  3131                           
  3132                           ;tmr2.c: 67: PR2 = 0xFF;
  3133                           
  3134                           ; BSR set to: 15
  3135                           ;incstack = 0
  3136  000D4A  68BB               	setf	4027,c	;volatile
  3137                           
  3138                           ;tmr2.c: 70: TMR2 = 0x00;
  3139  000D4C  0E00               	movlw	0
  3140  000D4E  6EBC               	movwf	4028,c	;volatile
  3141                           
  3142                           ;tmr2.c: 73: PIR1bits.TMR2IF = 0;
  3143  000D50  929E               	bcf	3998,1,c	;volatile
  3144                           
  3145                           ;tmr2.c: 76: T2CON = 0x04;
  3146  000D52  0E04               	movlw	4
  3147  000D54  6EBA               	movwf	4026,c	;volatile
  3148  000D56  0012               	return		;funcret
  3149  000D58                     __end_of_TMR2_Initialize:
  3150                           	opt stack 0
  3151                           tblptru	equ	0xFF8
  3152                           tblptrh	equ	0xFF7
  3153                           tblptrl	equ	0xFF6
  3154                           tablat	equ	0xFF5
  3155                           intcon	equ	0xFF2
  3156                           postinc0	equ	0xFEE
  3157                           wreg	equ	0xFE8
  3158                           postdec1	equ	0xFE5
  3159                           fsr1l	equ	0xFE1
  3160                           status	equ	0xFD8
  3161                           
  3162 ;; *************** function _PWM5_Initialize *****************
  3163 ;; Defined at:
  3164 ;;		line 64 in file "mcc_generated_files/pwm5.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;		None
  3167 ;; Auto vars:     Size  Location     Type
  3168 ;;		None
  3169 ;; Return value:  Size  Location     Type
  3170 ;;                  1    wreg      void 
  3171 ;; Registers used:
  3172 ;;		wreg, status,2
  3173 ;; Tracked objects:
  3174 ;;		On entry : 0/0
  3175 ;;		On exit  : 0/0
  3176 ;;		Unchanged: 0/0
  3177 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3178 ;;      Params:         0       0       0       0       0       0       0
  3179 ;;      Locals:         0       0       0       0       0       0       0
  3180 ;;      Temps:          0       0       0       0       0       0       0
  3181 ;;      Totals:         0       0       0       0       0       0       0
  3182 ;;Total ram usage:        0 bytes
  3183 ;; Hardware stack levels used:    1
  3184 ;; Hardware stack levels required when called:    4
  3185 ;; This function calls:
  3186 ;;		Nothing
  3187 ;; This function is called by:
  3188 ;;		_SYSTEM_Initialize
  3189 ;; This function uses a non-reentrant model
  3190 ;;
  3191                           
  3192                           	psect	text19
  3193  000CFE                     __ptext19:
  3194                           	opt stack 0
  3195  000CFE                     _PWM5_Initialize:
  3196                           	opt stack 25
  3197                           
  3198                           ;pwm5.c: 69: CCP5CON = 0x0C;
  3199                           
  3200                           ;incstack = 0
  3201  000CFE  0E0C               	movlw	12
  3202  000D00  010F               	movlb	15	; () banked
  3203  000D02  6F54               	movwf	84,b	;volatile
  3204                           
  3205                           ;pwm5.c: 72: CCPR5L = 0x00;
  3206  000D04  0E00               	movlw	0
  3207  000D06  6F55               	movwf	85,b	;volatile
  3208                           
  3209                           ;pwm5.c: 75: CCPR5H = 0x00;
  3210  000D08  0E00               	movlw	0
  3211  000D0A  6F56               	movwf	86,b	;volatile
  3212                           
  3213                           ;pwm5.c: 78: CCPTMRS1bits.C5TSEL = 0x0;
  3214  000D0C  0EF3               	movlw	-13
  3215  000D0E  1748               	andwf	72,f,b	;volatile
  3216                           
  3217                           ; BSR set to: 15
  3218  000D10  0012               	return		;funcret
  3219  000D12                     __end_of_PWM5_Initialize:
  3220                           	opt stack 0
  3221                           tblptru	equ	0xFF8
  3222                           tblptrh	equ	0xFF7
  3223                           tblptrl	equ	0xFF6
  3224                           tablat	equ	0xFF5
  3225                           intcon	equ	0xFF2
  3226                           postinc0	equ	0xFEE
  3227                           wreg	equ	0xFE8
  3228                           postdec1	equ	0xFE5
  3229                           fsr1l	equ	0xFE1
  3230                           status	equ	0xFD8
  3231                           
  3232 ;; *************** function _PWM4_Initialize *****************
  3233 ;; Defined at:
  3234 ;;		line 64 in file "mcc_generated_files/pwm4.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;		None
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;		None
  3239 ;; Return value:  Size  Location     Type
  3240 ;;                  1    wreg      void 
  3241 ;; Registers used:
  3242 ;;		wreg, status,2
  3243 ;; Tracked objects:
  3244 ;;		On entry : 0/0
  3245 ;;		On exit  : 0/0
  3246 ;;		Unchanged: 0/0
  3247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3248 ;;      Params:         0       0       0       0       0       0       0
  3249 ;;      Locals:         0       0       0       0       0       0       0
  3250 ;;      Temps:          0       0       0       0       0       0       0
  3251 ;;      Totals:         0       0       0       0       0       0       0
  3252 ;;Total ram usage:        0 bytes
  3253 ;; Hardware stack levels used:    1
  3254 ;; Hardware stack levels required when called:    4
  3255 ;; This function calls:
  3256 ;;		Nothing
  3257 ;; This function is called by:
  3258 ;;		_SYSTEM_Initialize
  3259 ;; This function uses a non-reentrant model
  3260 ;;
  3261                           
  3262                           	psect	text20
  3263  000D12                     __ptext20:
  3264                           	opt stack 0
  3265  000D12                     _PWM4_Initialize:
  3266                           	opt stack 25
  3267                           
  3268                           ;pwm4.c: 69: CCP4CON = 0x0C;
  3269                           
  3270                           ; BSR set to: 15
  3271                           ;incstack = 0
  3272  000D12  0E0C               	movlw	12
  3273  000D14  010F               	movlb	15	; () banked
  3274  000D16  6F57               	movwf	87,b	;volatile
  3275                           
  3276                           ;pwm4.c: 72: CCPR4L = 0x00;
  3277  000D18  0E00               	movlw	0
  3278  000D1A  6F58               	movwf	88,b	;volatile
  3279                           
  3280                           ;pwm4.c: 75: CCPR4H = 0x00;
  3281  000D1C  0E00               	movlw	0
  3282  000D1E  6F59               	movwf	89,b	;volatile
  3283                           
  3284                           ;pwm4.c: 78: CCPTMRS1bits.C4TSEL = 0x0;
  3285  000D20  0EFC               	movlw	-4
  3286  000D22  1748               	andwf	72,f,b	;volatile
  3287                           
  3288                           ; BSR set to: 15
  3289  000D24  0012               	return		;funcret
  3290  000D26                     __end_of_PWM4_Initialize:
  3291                           	opt stack 0
  3292                           tblptru	equ	0xFF8
  3293                           tblptrh	equ	0xFF7
  3294                           tblptrl	equ	0xFF6
  3295                           tablat	equ	0xFF5
  3296                           intcon	equ	0xFF2
  3297                           postinc0	equ	0xFEE
  3298                           wreg	equ	0xFE8
  3299                           postdec1	equ	0xFE5
  3300                           fsr1l	equ	0xFE1
  3301                           status	equ	0xFD8
  3302                           
  3303 ;; *************** function _PIN_MANAGER_Initialize *****************
  3304 ;; Defined at:
  3305 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;		None
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;		None
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      void 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3319 ;;      Params:         0       0       0       0       0       0       0
  3320 ;;      Locals:         0       0       0       0       0       0       0
  3321 ;;      Temps:          0       0       0       0       0       0       0
  3322 ;;      Totals:         0       0       0       0       0       0       0
  3323 ;;Total ram usage:        0 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    4
  3326 ;; This function calls:
  3327 ;;		Nothing
  3328 ;; This function is called by:
  3329 ;;		_SYSTEM_Initialize
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text21
  3334  000B26                     __ptext21:
  3335                           	opt stack 0
  3336  000B26                     _PIN_MANAGER_Initialize:
  3337                           	opt stack 25
  3338                           
  3339                           ;pin_manager.c: 60: LATE = 0x00;
  3340                           
  3341                           ; BSR set to: 15
  3342                           ;incstack = 0
  3343  000B26  0E00               	movlw	0
  3344  000B28  6E8D               	movwf	3981,c	;volatile
  3345                           
  3346                           ;pin_manager.c: 61: LATD = 0x00;
  3347  000B2A  0E00               	movlw	0
  3348  000B2C  6E8C               	movwf	3980,c	;volatile
  3349                           
  3350                           ;pin_manager.c: 62: LATA = 0x00;
  3351  000B2E  0E00               	movlw	0
  3352  000B30  6E89               	movwf	3977,c	;volatile
  3353                           
  3354                           ;pin_manager.c: 63: LATB = 0x00;
  3355  000B32  0E00               	movlw	0
  3356  000B34  6E8A               	movwf	3978,c	;volatile
  3357                           
  3358                           ;pin_manager.c: 64: LATC = 0x00;
  3359  000B36  0E00               	movlw	0
  3360  000B38  6E8B               	movwf	3979,c	;volatile
  3361                           
  3362                           ;pin_manager.c: 69: TRISE = 0x03;
  3363  000B3A  0E03               	movlw	3
  3364  000B3C  6E96               	movwf	3990,c	;volatile
  3365                           
  3366                           ;pin_manager.c: 70: TRISA = 0xFF;
  3367  000B3E  6892               	setf	3986,c	;volatile
  3368                           
  3369                           ;pin_manager.c: 71: TRISB = 0xFF;
  3370  000B40  6893               	setf	3987,c	;volatile
  3371                           
  3372                           ;pin_manager.c: 72: TRISC = 0xBF;
  3373  000B42  0EBF               	movlw	191
  3374  000B44  6E94               	movwf	3988,c	;volatile
  3375                           
  3376                           ;pin_manager.c: 73: TRISD = 0xFD;
  3377  000B46  0EFD               	movlw	253
  3378  000B48  6E95               	movwf	3989,c	;volatile
  3379                           
  3380                           ;pin_manager.c: 78: ANSELD = 0xFF;
  3381  000B4A  010F               	movlb	15	; () banked
  3382  000B4C  693B               	setf	59,b	;volatile
  3383                           
  3384                           ;pin_manager.c: 79: ANSELC = 0xBC;
  3385  000B4E  0EBC               	movlw	188
  3386  000B50  6F3A               	movwf	58,b	;volatile
  3387                           
  3388                           ;pin_manager.c: 80: ANSELB = 0x3F;
  3389  000B52  0E3F               	movlw	63
  3390  000B54  6F39               	movwf	57,b	;volatile
  3391                           
  3392                           ;pin_manager.c: 81: ANSELE = 0x07;
  3393  000B56  0E07               	movlw	7
  3394  000B58  6F3C               	movwf	60,b	;volatile
  3395                           
  3396                           ;pin_manager.c: 82: ANSELA = 0x2F;
  3397  000B5A  0E2F               	movlw	47
  3398  000B5C  6F38               	movwf	56,b	;volatile
  3399                           
  3400                           ;pin_manager.c: 87: WPUB = 0x00;
  3401  000B5E  0E00               	movlw	0
  3402  000B60  6E61               	movwf	3937,c	;volatile
  3403                           
  3404                           ; BSR set to: 15
  3405                           ;pin_manager.c: 88: INTCON2bits.nRBPU = 1;
  3406  000B62  8EF1               	bsf	intcon2,7,c	;volatile
  3407                           
  3408                           ; BSR set to: 15
  3409  000B64  0012               	return		;funcret
  3410  000B66                     __end_of_PIN_MANAGER_Initialize:
  3411                           	opt stack 0
  3412                           tblptru	equ	0xFF8
  3413                           tblptrh	equ	0xFF7
  3414                           tblptrl	equ	0xFF6
  3415                           tablat	equ	0xFF5
  3416                           intcon	equ	0xFF2
  3417                           intcon2	equ	0xFF1
  3418                           postinc0	equ	0xFEE
  3419                           wreg	equ	0xFE8
  3420                           postdec1	equ	0xFE5
  3421                           fsr1l	equ	0xFE1
  3422                           status	equ	0xFD8
  3423                           
  3424 ;; *************** function _OSCILLATOR_Initialize *****************
  3425 ;; Defined at:
  3426 ;;		line 64 in file "mcc_generated_files/mcc.c"
  3427 ;; Parameters:    Size  Location     Type
  3428 ;;		None
  3429 ;; Auto vars:     Size  Location     Type
  3430 ;;		None
  3431 ;; Return value:  Size  Location     Type
  3432 ;;                  1    wreg      void 
  3433 ;; Registers used:
  3434 ;;		wreg, status,2
  3435 ;; Tracked objects:
  3436 ;;		On entry : 0/0
  3437 ;;		On exit  : 0/0
  3438 ;;		Unchanged: 0/0
  3439 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3440 ;;      Params:         0       0       0       0       0       0       0
  3441 ;;      Locals:         0       0       0       0       0       0       0
  3442 ;;      Temps:          0       0       0       0       0       0       0
  3443 ;;      Totals:         0       0       0       0       0       0       0
  3444 ;;Total ram usage:        0 bytes
  3445 ;; Hardware stack levels used:    1
  3446 ;; Hardware stack levels required when called:    4
  3447 ;; This function calls:
  3448 ;;		Nothing
  3449 ;; This function is called by:
  3450 ;;		_SYSTEM_Initialize
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text22
  3455  000D38                     __ptext22:
  3456                           	opt stack 0
  3457  000D38                     _OSCILLATOR_Initialize:
  3458                           	opt stack 25
  3459                           
  3460                           ;mcc.c: 67: OSCCON = 0x70;
  3461                           
  3462                           ; BSR set to: 15
  3463                           ;incstack = 0
  3464  000D38  0E70               	movlw	112
  3465  000D3A  6ED3               	movwf	4051,c	;volatile
  3466                           
  3467                           ;mcc.c: 69: OSCCON2 = 0x04;
  3468  000D3C  0E04               	movlw	4
  3469  000D3E  6ED2               	movwf	4050,c	;volatile
  3470                           
  3471                           ;mcc.c: 71: OSCTUNE = 0x40;
  3472  000D40  0E40               	movlw	64
  3473  000D42  6E9B               	movwf	3995,c	;volatile
  3474  000D44                     
  3475                           ;mcc.c: 74: {
  3476  000D44  BED2               	btfsc	4050,7,c	;volatile
  3477  000D46  0012               	return	
  3478  000D48  D7FD               	goto	l37
  3479  000D4A                     __end_of_OSCILLATOR_Initialize:
  3480                           	opt stack 0
  3481                           tblptru	equ	0xFF8
  3482                           tblptrh	equ	0xFF7
  3483                           tblptrl	equ	0xFF6
  3484                           tablat	equ	0xFF5
  3485                           intcon	equ	0xFF2
  3486                           intcon2	equ	0xFF1
  3487                           postinc0	equ	0xFEE
  3488                           wreg	equ	0xFE8
  3489                           postdec1	equ	0xFE5
  3490                           fsr1l	equ	0xFE1
  3491                           status	equ	0xFD8
  3492                           
  3493 ;; *************** function _INTERRUPT_Initialize *****************
  3494 ;; Defined at:
  3495 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;		None
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		None
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3509 ;;      Params:         0       0       0       0       0       0       0
  3510 ;;      Locals:         0       0       0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0
  3512 ;;      Totals:         0       0       0       0       0       0       0
  3513 ;;Total ram usage:        0 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    4
  3516 ;; This function calls:
  3517 ;;		Nothing
  3518 ;; This function is called by:
  3519 ;;		_SYSTEM_Initialize
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text23
  3524  000D9C                     __ptext23:
  3525                           	opt stack 0
  3526  000D9C                     _INTERRUPT_Initialize:
  3527                           	opt stack 25
  3528                           
  3529                           ;interrupt_manager.c: 55: RCONbits.IPEN = 0;
  3530                           
  3531                           ;incstack = 0
  3532  000D9C  9ED0               	bcf	4048,7,c	;volatile
  3533  000D9E  0012               	return		;funcret
  3534  000DA0                     __end_of_INTERRUPT_Initialize:
  3535                           	opt stack 0
  3536                           tblptru	equ	0xFF8
  3537                           tblptrh	equ	0xFF7
  3538                           tblptrl	equ	0xFF6
  3539                           tablat	equ	0xFF5
  3540                           intcon	equ	0xFF2
  3541                           intcon2	equ	0xFF1
  3542                           postinc0	equ	0xFEE
  3543                           wreg	equ	0xFE8
  3544                           postdec1	equ	0xFE5
  3545                           fsr1l	equ	0xFE1
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function _EUSART1_Initialize *****************
  3549 ;; Defined at:
  3550 ;;		line 85 in file "mcc_generated_files/eusart1.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, status,2, status,0, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3564 ;;      Params:         0       0       0       0       0       0       0
  3565 ;;      Locals:         0       0       0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0
  3567 ;;      Totals:         0       0       0       0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:    5
  3571 ;; This function calls:
  3572 ;;		_EUSART1_SetErrorHandler
  3573 ;;		_EUSART1_SetFramingErrorHandler
  3574 ;;		_EUSART1_SetOverrunErrorHandler
  3575 ;;		_EUSART1_SetRxInterruptHandler
  3576 ;;		_EUSART1_SetTxInterruptHandler
  3577 ;; This function is called by:
  3578 ;;		_SYSTEM_Initialize
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text24
  3583  00095C                     __ptext24:
  3584                           	opt stack 0
  3585  00095C                     _EUSART1_Initialize:
  3586                           	opt stack 24
  3587                           
  3588                           ;eusart1.c: 88: PIE1bits.RC1IE = 0;
  3589                           
  3590                           ;incstack = 0
  3591  00095C  9A9D               	bcf	3997,5,c	;volatile
  3592                           
  3593                           ;eusart1.c: 89: EUSART1_SetRxInterruptHandler(EUSART1_Receive_ISR);
  3594  00095E  0E2E               	movlw	low _EUSART1_Receive_ISR
  3595  000960  6E13               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler,c
  3596  000962  0E08               	movlw	high _EUSART1_Receive_ISR
  3597  000964  6E14               	movwf	EUSART1_SetRxInterruptHandler@interruptHandler+1,c
  3598  000966  ECB1  F006         	call	_EUSART1_SetRxInterruptHandler	;wreg free
  3599                           
  3600                           ;eusart1.c: 90: PIE1bits.TX1IE = 0;
  3601  00096A  989D               	bcf	3997,4,c	;volatile
  3602                           
  3603                           ;eusart1.c: 91: EUSART1_SetTxInterruptHandler(EUSART1_Transmit_ISR);
  3604  00096C  0E32               	movlw	low _EUSART1_Transmit_ISR
  3605  00096E  6E13               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler,c
  3606  000970  0E0C               	movlw	high _EUSART1_Transmit_ISR
  3607  000972  6E14               	movwf	EUSART1_SetTxInterruptHandler@interruptHandler+1,c
  3608  000974  ECAC  F006         	call	_EUSART1_SetTxInterruptHandler	;wreg free
  3609                           
  3610                           ;eusart1.c: 95: BAUDCON1 = 0x08;
  3611  000978  0E08               	movlw	8
  3612  00097A  6EB8               	movwf	4024,c	;volatile
  3613                           
  3614                           ;eusart1.c: 98: RCSTA1 = 0x80;
  3615  00097C  0E80               	movlw	128
  3616  00097E  6EAB               	movwf	4011,c	;volatile
  3617                           
  3618                           ;eusart1.c: 101: TXSTA1 = 0x24;
  3619  000980  0E24               	movlw	36
  3620  000982  6EAC               	movwf	4012,c	;volatile
  3621                           
  3622                           ;eusart1.c: 104: SPBRG1 = 0x82;
  3623  000984  0E82               	movlw	130
  3624  000986  6EAF               	movwf	4015,c	;volatile
  3625                           
  3626                           ;eusart1.c: 107: SPBRGH1 = 0x06;
  3627  000988  0E06               	movlw	6
  3628  00098A  6EB0               	movwf	4016,c	;volatile
  3629                           
  3630                           ;eusart1.c: 110: EUSART1_SetFramingErrorHandler(EUSART1_DefaultFramingErrorHandler);
  3631  00098C  0EA0               	movlw	low _EUSART1_DefaultFramingErrorHandler
  3632  00098E  6E13               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler,c
  3633  000990  0E0D               	movlw	high _EUSART1_DefaultFramingErrorHandler
  3634  000992  6E14               	movwf	EUSART1_SetFramingErrorHandler@interruptHandler+1,c
  3635  000994  ECBB  F006         	call	_EUSART1_SetFramingErrorHandler	;wreg free
  3636                           
  3637                           ;eusart1.c: 111: EUSART1_SetOverrunErrorHandler(EUSART1_DefaultOverrunErrorHandler);
  3638  000998  0E90               	movlw	low _EUSART1_DefaultOverrunErrorHandler
  3639  00099A  6E13               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler,c
  3640  00099C  0E0D               	movlw	high _EUSART1_DefaultOverrunErrorHandler
  3641  00099E  6E14               	movwf	EUSART1_SetOverrunErrorHandler@interruptHandler+1,c
  3642  0009A0  ECB6  F006         	call	_EUSART1_SetOverrunErrorHandler	;wreg free
  3643                           
  3644                           ;eusart1.c: 112: EUSART1_SetErrorHandler(EUSART1_DefaultErrorHandler);
  3645  0009A4  0E96               	movlw	low _EUSART1_DefaultErrorHandler
  3646  0009A6  6E13               	movwf	EUSART1_SetErrorHandler@interruptHandler,c
  3647  0009A8  0E0D               	movlw	high _EUSART1_DefaultErrorHandler
  3648  0009AA  6E14               	movwf	EUSART1_SetErrorHandler@interruptHandler+1,c
  3649  0009AC  ECC0  F006         	call	_EUSART1_SetErrorHandler	;wreg free
  3650                           
  3651                           ;eusart1.c: 114: eusart1RxLastError.status = 0;
  3652  0009B0  0E00               	movlw	0
  3653  0009B2  6E45               	movwf	_eusart1RxLastError,c	;volatile
  3654                           
  3655                           ;eusart1.c: 117: eusart1TxHead = 0;
  3656  0009B4  0E00               	movlw	0
  3657  0009B6  6E4B               	movwf	_eusart1TxHead,c	;volatile
  3658                           
  3659                           ;eusart1.c: 118: eusart1TxTail = 0;
  3660  0009B8  0E00               	movlw	0
  3661  0009BA  6E4A               	movwf	_eusart1TxTail,c	;volatile
  3662                           
  3663                           ;eusart1.c: 119: eusart1TxBufferRemaining = sizeof(eusart1TxBuffer);
  3664  0009BC  0E08               	movlw	8
  3665  0009BE  6E49               	movwf	_eusart1TxBufferRemaining,c	;volatile
  3666                           
  3667                           ;eusart1.c: 121: eusart1RxHead = 0;
  3668  0009C0  0E00               	movlw	0
  3669  0009C2  6E48               	movwf	_eusart1RxHead,c	;volatile
  3670                           
  3671                           ;eusart1.c: 122: eusart1RxTail = 0;
  3672  0009C4  0E00               	movlw	0
  3673  0009C6  6E47               	movwf	_eusart1RxTail,c	;volatile
  3674                           
  3675                           ;eusart1.c: 123: eusart1RxCount = 0;
  3676  0009C8  0E00               	movlw	0
  3677  0009CA  6E46               	movwf	_eusart1RxCount,c	;volatile
  3678                           
  3679                           ;eusart1.c: 126: PIE1bits.RC1IE = 1;
  3680  0009CC  8A9D               	bsf	3997,5,c	;volatile
  3681  0009CE  0012               	return		;funcret
  3682  0009D0                     __end_of_EUSART1_Initialize:
  3683                           	opt stack 0
  3684                           tblptru	equ	0xFF8
  3685                           tblptrh	equ	0xFF7
  3686                           tblptrl	equ	0xFF6
  3687                           tablat	equ	0xFF5
  3688                           intcon	equ	0xFF2
  3689                           intcon2	equ	0xFF1
  3690                           postinc0	equ	0xFEE
  3691                           wreg	equ	0xFE8
  3692                           postdec1	equ	0xFE5
  3693                           fsr1l	equ	0xFE1
  3694                           status	equ	0xFD8
  3695                           
  3696 ;; *************** function _EUSART1_SetTxInterruptHandler *****************
  3697 ;; Defined at:
  3698 ;;		line 282 in file "mcc_generated_files/eusart1.c"
  3699 ;; Parameters:    Size  Location     Type
  3700 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  3701 ;;		 -> EUSART1_Transmit_ISR(1), 
  3702 ;; Auto vars:     Size  Location     Type
  3703 ;;		None
  3704 ;; Return value:  Size  Location     Type
  3705 ;;                  1    wreg      void 
  3706 ;; Registers used:
  3707 ;;		wreg, status,2, status,0
  3708 ;; Tracked objects:
  3709 ;;		On entry : 0/0
  3710 ;;		On exit  : 0/0
  3711 ;;		Unchanged: 0/0
  3712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3713 ;;      Params:         2       0       0       0       0       0       0
  3714 ;;      Locals:         0       0       0       0       0       0       0
  3715 ;;      Temps:          0       0       0       0       0       0       0
  3716 ;;      Totals:         2       0       0       0       0       0       0
  3717 ;;Total ram usage:        2 bytes
  3718 ;; Hardware stack levels used:    1
  3719 ;; Hardware stack levels required when called:    4
  3720 ;; This function calls:
  3721 ;;		Nothing
  3722 ;; This function is called by:
  3723 ;;		_EUSART1_Initialize
  3724 ;; This function uses a non-reentrant model
  3725 ;;
  3726                           
  3727                           	psect	text25
  3728  000D58                     __ptext25:
  3729                           	opt stack 0
  3730  000D58                     _EUSART1_SetTxInterruptHandler:
  3731                           	opt stack 24
  3732                           
  3733                           ;eusart1.c: 283: EUSART1_TxDefaultInterruptHandler = interruptHandler;
  3734                           
  3735                           ;incstack = 0
  3736  000D58  C013  F043         	movff	EUSART1_SetTxInterruptHandler@interruptHandler,_EUSART1_TxDefaultInterruptHandler
  3737  000D5C  C014  F044         	movff	EUSART1_SetTxInterruptHandler@interruptHandler+1,_EUSART1_TxDefaultInterruptHandl
      +                          er+1
  3738  000D60  0012               	return		;funcret
  3739  000D62                     __end_of_EUSART1_SetTxInterruptHandler:
  3740                           	opt stack 0
  3741                           tblptru	equ	0xFF8
  3742                           tblptrh	equ	0xFF7
  3743                           tblptrl	equ	0xFF6
  3744                           tablat	equ	0xFF5
  3745                           intcon	equ	0xFF2
  3746                           intcon2	equ	0xFF1
  3747                           postinc0	equ	0xFEE
  3748                           wreg	equ	0xFE8
  3749                           postdec1	equ	0xFE5
  3750                           fsr1l	equ	0xFE1
  3751                           status	equ	0xFD8
  3752                           
  3753 ;; *************** function _EUSART1_SetRxInterruptHandler *****************
  3754 ;; Defined at:
  3755 ;;		line 286 in file "mcc_generated_files/eusart1.c"
  3756 ;; Parameters:    Size  Location     Type
  3757 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  3758 ;;		 -> EUSART1_Receive_ISR(1), 
  3759 ;; Auto vars:     Size  Location     Type
  3760 ;;		None
  3761 ;; Return value:  Size  Location     Type
  3762 ;;                  1    wreg      void 
  3763 ;; Registers used:
  3764 ;;		wreg, status,2, status,0
  3765 ;; Tracked objects:
  3766 ;;		On entry : 0/0
  3767 ;;		On exit  : 0/0
  3768 ;;		Unchanged: 0/0
  3769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3770 ;;      Params:         2       0       0       0       0       0       0
  3771 ;;      Locals:         0       0       0       0       0       0       0
  3772 ;;      Temps:          0       0       0       0       0       0       0
  3773 ;;      Totals:         2       0       0       0       0       0       0
  3774 ;;Total ram usage:        2 bytes
  3775 ;; Hardware stack levels used:    1
  3776 ;; Hardware stack levels required when called:    4
  3777 ;; This function calls:
  3778 ;;		Nothing
  3779 ;; This function is called by:
  3780 ;;		_EUSART1_Initialize
  3781 ;; This function uses a non-reentrant model
  3782 ;;
  3783                           
  3784                           	psect	text26
  3785  000D62                     __ptext26:
  3786                           	opt stack 0
  3787  000D62                     _EUSART1_SetRxInterruptHandler:
  3788                           	opt stack 24
  3789                           
  3790                           ;eusart1.c: 287: EUSART1_RxDefaultInterruptHandler = interruptHandler;
  3791                           
  3792                           ;incstack = 0
  3793  000D62  C013  F041         	movff	EUSART1_SetRxInterruptHandler@interruptHandler,_EUSART1_RxDefaultInterruptHandler
  3794  000D66  C014  F042         	movff	EUSART1_SetRxInterruptHandler@interruptHandler+1,_EUSART1_RxDefaultInterruptHandl
      +                          er+1
  3795  000D6A  0012               	return		;funcret
  3796  000D6C                     __end_of_EUSART1_SetRxInterruptHandler:
  3797                           	opt stack 0
  3798                           tblptru	equ	0xFF8
  3799                           tblptrh	equ	0xFF7
  3800                           tblptrl	equ	0xFF6
  3801                           tablat	equ	0xFF5
  3802                           intcon	equ	0xFF2
  3803                           intcon2	equ	0xFF1
  3804                           postinc0	equ	0xFEE
  3805                           wreg	equ	0xFE8
  3806                           postdec1	equ	0xFE5
  3807                           fsr1l	equ	0xFE1
  3808                           status	equ	0xFD8
  3809                           
  3810 ;; *************** function _EUSART1_SetOverrunErrorHandler *****************
  3811 ;; Defined at:
  3812 ;;		line 274 in file "mcc_generated_files/eusart1.c"
  3813 ;; Parameters:    Size  Location     Type
  3814 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  3815 ;;		 -> EUSART1_DefaultOverrunErrorHandler(1), 
  3816 ;; Auto vars:     Size  Location     Type
  3817 ;;		None
  3818 ;; Return value:  Size  Location     Type
  3819 ;;                  1    wreg      void 
  3820 ;; Registers used:
  3821 ;;		wreg, status,2, status,0
  3822 ;; Tracked objects:
  3823 ;;		On entry : 0/0
  3824 ;;		On exit  : 0/0
  3825 ;;		Unchanged: 0/0
  3826 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3827 ;;      Params:         2       0       0       0       0       0       0
  3828 ;;      Locals:         0       0       0       0       0       0       0
  3829 ;;      Temps:          0       0       0       0       0       0       0
  3830 ;;      Totals:         2       0       0       0       0       0       0
  3831 ;;Total ram usage:        2 bytes
  3832 ;; Hardware stack levels used:    1
  3833 ;; Hardware stack levels required when called:    4
  3834 ;; This function calls:
  3835 ;;		Nothing
  3836 ;; This function is called by:
  3837 ;;		_EUSART1_Initialize
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           	psect	text27
  3842  000D6C                     __ptext27:
  3843                           	opt stack 0
  3844  000D6C                     _EUSART1_SetOverrunErrorHandler:
  3845                           	opt stack 24
  3846                           
  3847                           ;eusart1.c: 275: EUSART1_OverrunErrorHandler = interruptHandler;
  3848                           
  3849                           ;incstack = 0
  3850  000D6C  C013  F03B         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler,_EUSART1_OverrunErrorHandler
  3851  000D70  C014  F03C         	movff	EUSART1_SetOverrunErrorHandler@interruptHandler+1,_EUSART1_OverrunErrorHandler+1
  3852  000D74  0012               	return		;funcret
  3853  000D76                     __end_of_EUSART1_SetOverrunErrorHandler:
  3854                           	opt stack 0
  3855                           tblptru	equ	0xFF8
  3856                           tblptrh	equ	0xFF7
  3857                           tblptrl	equ	0xFF6
  3858                           tablat	equ	0xFF5
  3859                           intcon	equ	0xFF2
  3860                           intcon2	equ	0xFF1
  3861                           postinc0	equ	0xFEE
  3862                           wreg	equ	0xFE8
  3863                           postdec1	equ	0xFE5
  3864                           fsr1l	equ	0xFE1
  3865                           status	equ	0xFD8
  3866                           
  3867 ;; *************** function _EUSART1_SetFramingErrorHandler *****************
  3868 ;; Defined at:
  3869 ;;		line 270 in file "mcc_generated_files/eusart1.c"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  3872 ;;		 -> EUSART1_DefaultFramingErrorHandler(1), 
  3873 ;; Auto vars:     Size  Location     Type
  3874 ;;		None
  3875 ;; Return value:  Size  Location     Type
  3876 ;;                  1    wreg      void 
  3877 ;; Registers used:
  3878 ;;		wreg, status,2, status,0
  3879 ;; Tracked objects:
  3880 ;;		On entry : 0/0
  3881 ;;		On exit  : 0/0
  3882 ;;		Unchanged: 0/0
  3883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3884 ;;      Params:         2       0       0       0       0       0       0
  3885 ;;      Locals:         0       0       0       0       0       0       0
  3886 ;;      Temps:          0       0       0       0       0       0       0
  3887 ;;      Totals:         2       0       0       0       0       0       0
  3888 ;;Total ram usage:        2 bytes
  3889 ;; Hardware stack levels used:    1
  3890 ;; Hardware stack levels required when called:    4
  3891 ;; This function calls:
  3892 ;;		Nothing
  3893 ;; This function is called by:
  3894 ;;		_EUSART1_Initialize
  3895 ;; This function uses a non-reentrant model
  3896 ;;
  3897                           
  3898                           	psect	text28
  3899  000D76                     __ptext28:
  3900                           	opt stack 0
  3901  000D76                     _EUSART1_SetFramingErrorHandler:
  3902                           	opt stack 24
  3903                           
  3904                           ;eusart1.c: 271: EUSART1_FramingErrorHandler = interruptHandler;
  3905                           
  3906                           ;incstack = 0
  3907  000D76  C013  F03D         	movff	EUSART1_SetFramingErrorHandler@interruptHandler,_EUSART1_FramingErrorHandler
  3908  000D7A  C014  F03E         	movff	EUSART1_SetFramingErrorHandler@interruptHandler+1,_EUSART1_FramingErrorHandler+1
  3909  000D7E  0012               	return		;funcret
  3910  000D80                     __end_of_EUSART1_SetFramingErrorHandler:
  3911                           	opt stack 0
  3912                           tblptru	equ	0xFF8
  3913                           tblptrh	equ	0xFF7
  3914                           tblptrl	equ	0xFF6
  3915                           tablat	equ	0xFF5
  3916                           intcon	equ	0xFF2
  3917                           intcon2	equ	0xFF1
  3918                           postinc0	equ	0xFEE
  3919                           wreg	equ	0xFE8
  3920                           postdec1	equ	0xFE5
  3921                           fsr1l	equ	0xFE1
  3922                           status	equ	0xFD8
  3923                           
  3924 ;; *************** function _EUSART1_SetErrorHandler *****************
  3925 ;; Defined at:
  3926 ;;		line 278 in file "mcc_generated_files/eusart1.c"
  3927 ;; Parameters:    Size  Location     Type
  3928 ;;  interruptHan    2   18[COMRAM] PTR FTN()void 
  3929 ;;		 -> EUSART1_DefaultErrorHandler(1), 
  3930 ;; Auto vars:     Size  Location     Type
  3931 ;;		None
  3932 ;; Return value:  Size  Location     Type
  3933 ;;                  1    wreg      void 
  3934 ;; Registers used:
  3935 ;;		wreg, status,2, status,0
  3936 ;; Tracked objects:
  3937 ;;		On entry : 0/0
  3938 ;;		On exit  : 0/0
  3939 ;;		Unchanged: 0/0
  3940 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3941 ;;      Params:         2       0       0       0       0       0       0
  3942 ;;      Locals:         0       0       0       0       0       0       0
  3943 ;;      Temps:          0       0       0       0       0       0       0
  3944 ;;      Totals:         2       0       0       0       0       0       0
  3945 ;;Total ram usage:        2 bytes
  3946 ;; Hardware stack levels used:    1
  3947 ;; Hardware stack levels required when called:    4
  3948 ;; This function calls:
  3949 ;;		Nothing
  3950 ;; This function is called by:
  3951 ;;		_EUSART1_Initialize
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           	psect	text29
  3956  000D80                     __ptext29:
  3957                           	opt stack 0
  3958  000D80                     _EUSART1_SetErrorHandler:
  3959                           	opt stack 24
  3960                           
  3961                           ;eusart1.c: 279: EUSART1_ErrorHandler = interruptHandler;
  3962                           
  3963                           ;incstack = 0
  3964  000D80  C013  F0A9         	movff	EUSART1_SetErrorHandler@interruptHandler,_EUSART1_ErrorHandler
  3965  000D84  C014  F0AA         	movff	EUSART1_SetErrorHandler@interruptHandler+1,_EUSART1_ErrorHandler+1
  3966  000D88  0012               	return		;funcret
  3967  000D8A                     __end_of_EUSART1_SetErrorHandler:
  3968                           	opt stack 0
  3969                           tblptru	equ	0xFF8
  3970                           tblptrh	equ	0xFF7
  3971                           tblptrl	equ	0xFF6
  3972                           tablat	equ	0xFF5
  3973                           intcon	equ	0xFF2
  3974                           intcon2	equ	0xFF1
  3975                           postinc0	equ	0xFEE
  3976                           wreg	equ	0xFE8
  3977                           postdec1	equ	0xFE5
  3978                           fsr1l	equ	0xFE1
  3979                           status	equ	0xFD8
  3980                           
  3981 ;; *************** function _ADC_Initialize *****************
  3982 ;; Defined at:
  3983 ;;		line 60 in file "mcc_generated_files/adc.c"
  3984 ;; Parameters:    Size  Location     Type
  3985 ;;		None
  3986 ;; Auto vars:     Size  Location     Type
  3987 ;;		None
  3988 ;; Return value:  Size  Location     Type
  3989 ;;                  1    wreg      void 
  3990 ;; Registers used:
  3991 ;;		wreg, status,2
  3992 ;; Tracked objects:
  3993 ;;		On entry : 0/0
  3994 ;;		On exit  : 0/0
  3995 ;;		Unchanged: 0/0
  3996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3997 ;;      Params:         0       0       0       0       0       0       0
  3998 ;;      Locals:         0       0       0       0       0       0       0
  3999 ;;      Temps:          0       0       0       0       0       0       0
  4000 ;;      Totals:         0       0       0       0       0       0       0
  4001 ;;Total ram usage:        0 bytes
  4002 ;; Hardware stack levels used:    1
  4003 ;; Hardware stack levels required when called:    4
  4004 ;; This function calls:
  4005 ;;		Nothing
  4006 ;; This function is called by:
  4007 ;;		_SYSTEM_Initialize
  4008 ;; This function uses a non-reentrant model
  4009 ;;
  4010                           
  4011                           	psect	text30
  4012  000CE8                     __ptext30:
  4013                           	opt stack 0
  4014  000CE8                     _ADC_Initialize:
  4015                           	opt stack 25
  4016                           
  4017                           ;adc.c: 65: ADCON0 = 0x01;
  4018                           
  4019                           ;incstack = 0
  4020  000CE8  0E01               	movlw	1
  4021  000CEA  6EC2               	movwf	4034,c	;volatile
  4022                           
  4023                           ;adc.c: 68: ADCON1 = 0x00;
  4024  000CEC  0E00               	movlw	0
  4025  000CEE  6EC1               	movwf	4033,c	;volatile
  4026                           
  4027                           ;adc.c: 71: ADCON2 = 0x06;
  4028  000CF0  0E06               	movlw	6
  4029  000CF2  6EC0               	movwf	4032,c	;volatile
  4030                           
  4031                           ;adc.c: 74: ADRESL = 0x00;
  4032  000CF4  0E00               	movlw	0
  4033  000CF6  6EC3               	movwf	4035,c	;volatile
  4034                           
  4035                           ;adc.c: 77: ADRESH = 0x00;
  4036  000CF8  0E00               	movlw	0
  4037  000CFA  6EC4               	movwf	4036,c	;volatile
  4038  000CFC  0012               	return		;funcret
  4039  000CFE                     __end_of_ADC_Initialize:
  4040                           	opt stack 0
  4041                           tblptru	equ	0xFF8
  4042                           tblptrh	equ	0xFF7
  4043                           tblptrl	equ	0xFF6
  4044                           tablat	equ	0xFF5
  4045                           intcon	equ	0xFF2
  4046                           intcon2	equ	0xFF1
  4047                           postinc0	equ	0xFEE
  4048                           wreg	equ	0xFE8
  4049                           postdec1	equ	0xFE5
  4050                           fsr1l	equ	0xFE1
  4051                           status	equ	0xFD8
  4052                           
  4053 ;; *************** function _INTERRUPT_InterruptManager *****************
  4054 ;; Defined at:
  4055 ;;		line 58 in file "mcc_generated_files/interrupt_manager.c"
  4056 ;; Parameters:    Size  Location     Type
  4057 ;;		None
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;		None
  4060 ;; Return value:  Size  Location     Type
  4061 ;;                  1    wreg      void 
  4062 ;; Registers used:
  4063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4064 ;; Tracked objects:
  4065 ;;		On entry : 0/0
  4066 ;;		On exit  : 0/0
  4067 ;;		Unchanged: 0/0
  4068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4069 ;;      Params:         0       0       0       0       0       0       0
  4070 ;;      Locals:         0       0       0       0       0       0       0
  4071 ;;      Temps:         18       0       0       0       0       0       0
  4072 ;;      Totals:        18       0       0       0       0       0       0
  4073 ;;Total ram usage:       18 bytes
  4074 ;; Hardware stack levels used:    1
  4075 ;; Hardware stack levels required when called:    3
  4076 ;; This function calls:
  4077 ;;		Absolute function
  4078 ;;		_EUSART1_Receive_ISR
  4079 ;;		_EUSART1_Transmit_ISR
  4080 ;; This function is called by:
  4081 ;;		Interrupt level 2
  4082 ;; This function uses a non-reentrant model
  4083 ;;
  4084                           
  4085                           	psect	intcode
  4086  000008                     __pintcode:
  4087                           	opt stack 0
  4088  000008                     _INTERRUPT_InterruptManager:
  4089                           	opt stack 24
  4090                           
  4091                           ;incstack = 0
  4092  000008  824D               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4093  00000A  CFFA F001          	movff	pclath,??_INTERRUPT_InterruptManager
  4094  00000E  CFFB F002          	movff	pclatu,??_INTERRUPT_InterruptManager+1
  4095  000012  CFE9 F003          	movff	fsr0l,??_INTERRUPT_InterruptManager+2
  4096  000016  CFEA F004          	movff	fsr0h,??_INTERRUPT_InterruptManager+3
  4097  00001A  CFE1 F005          	movff	fsr1l,??_INTERRUPT_InterruptManager+4
  4098  00001E  CFE2 F006          	movff	fsr1h,??_INTERRUPT_InterruptManager+5
  4099  000022  CFD9 F007          	movff	fsr2l,??_INTERRUPT_InterruptManager+6
  4100  000026  CFDA F008          	movff	fsr2h,??_INTERRUPT_InterruptManager+7
  4101  00002A  CFF3 F009          	movff	prodl,??_INTERRUPT_InterruptManager+8
  4102  00002E  CFF4 F00A          	movff	prodh,??_INTERRUPT_InterruptManager+9
  4103  000032  CFF6 F00B          	movff	tblptrl,??_INTERRUPT_InterruptManager+10
  4104  000036  CFF7 F00C          	movff	tblptrh,??_INTERRUPT_InterruptManager+11
  4105  00003A  CFF8 F00D          	movff	tblptru,??_INTERRUPT_InterruptManager+12
  4106  00003E  CFF5 F00E          	movff	tablat,??_INTERRUPT_InterruptManager+13
  4107  000042  C04D  F00F         	movff	btemp,??_INTERRUPT_InterruptManager+14
  4108  000046  C04E  F010         	movff	btemp+1,??_INTERRUPT_InterruptManager+15
  4109  00004A  C04F  F011         	movff	btemp+2,??_INTERRUPT_InterruptManager+16
  4110  00004E  C050  F012         	movff	btemp+3,??_INTERRUPT_InterruptManager+17
  4111                           
  4112                           ;interrupt_manager.c: 61: if(INTCONbits.PEIE == 1)
  4113  000052  ACF2               	btfss	intcon,6,c	;volatile
  4114  000054  D01A               	goto	i2u192_49
  4115                           
  4116                           ;interrupt_manager.c: 62: {
  4117                           ;interrupt_manager.c: 63: if(PIE1bits.TX1IE == 1 && PIR1bits.TX1IF == 1)
  4118  000056  B89D               	btfsc	3997,4,c	;volatile
  4119  000058  A89E               	btfss	3998,4,c	;volatile
  4120  00005A  D008               	goto	i2l496
  4121                           
  4122                           ;interrupt_manager.c: 64: {
  4123                           ;interrupt_manager.c: 65: EUSART1_TxDefaultInterruptHandler();
  4124  00005C  D801               	call	i2u189_48
  4125  00005E  D015               	goto	i2u192_49
  4126  000060                     i2u189_48:
  4127  000060  0005               	push	
  4128  000062  6EFA               	movwf	pclath,c
  4129  000064  5043               	movf	_EUSART1_TxDefaultInterruptHandler,w,c
  4130  000066  6EFD               	movwf	tosl,c
  4131  000068  5044               	movf	_EUSART1_TxDefaultInterruptHandler+1,w,c
  4132  00006A  D00A               	goto	L4
  4133  00006C                     i2l496:
  4134                           
  4135                           ;interrupt_manager.c: 67: else if(PIE1bits.RC1IE == 1 && PIR1bits.RC1IF == 1)
  4136  00006C  BA9D               	btfsc	3997,5,c	;volatile
  4137  00006E  AA9E               	btfss	3998,5,c	;volatile
  4138  000070  D00C               	goto	i2u192_49
  4139                           
  4140                           ;interrupt_manager.c: 68: {
  4141                           ;interrupt_manager.c: 69: EUSART1_RxDefaultInterruptHandler();
  4142  000072  D801               	call	i2u192_48
  4143  000074  D00A               	goto	i2u192_49
  4144  000076                     i2u192_48:
  4145  000076  0005               	push	
  4146  000078  6EFA               	movwf	pclath,c
  4147  00007A  5041               	movf	_EUSART1_RxDefaultInterruptHandler,w,c
  4148  00007C  6EFD               	movwf	tosl,c
  4149  00007E  5042               	movf	_EUSART1_RxDefaultInterruptHandler+1,w,c
  4150  000080                     L4:
  4151  000080  6EFE               	movwf	tosh,c
  4152  000082  50F8               	movf	tblptru,w,c
  4153  000084  6EFF               	movwf	tosu,c
  4154  000086  50FA               	movf	pclath,w,c
  4155  000088  0012               	return		;indir
  4156  00008A                     i2u192_49:
  4157                           
  4158                           ;interrupt_manager.c: 76: else
  4159                           ;interrupt_manager.c: 77: {
  4160                           
  4161                           ;interrupt_manager.c: 74: }
  4162                           ;interrupt_manager.c: 75: }
  4163                           
  4164                           ;interrupt_manager.c: 71: else
  4165                           ;interrupt_manager.c: 72: {
  4166                           
  4167                           ;interrupt_manager.c: 70: }
  4168  00008A  C012  F050         	movff	??_INTERRUPT_InterruptManager+17,btemp+3
  4169  00008E  C011  F04F         	movff	??_INTERRUPT_InterruptManager+16,btemp+2
  4170  000092  C010  F04E         	movff	??_INTERRUPT_InterruptManager+15,btemp+1
  4171  000096  C00F  F04D         	movff	??_INTERRUPT_InterruptManager+14,btemp
  4172  00009A  C00E  FFF5         	movff	??_INTERRUPT_InterruptManager+13,tablat
  4173  00009E  C00D  FFF8         	movff	??_INTERRUPT_InterruptManager+12,tblptru
  4174  0000A2  C00C  FFF7         	movff	??_INTERRUPT_InterruptManager+11,tblptrh
  4175  0000A6  C00B  FFF6         	movff	??_INTERRUPT_InterruptManager+10,tblptrl
  4176  0000AA  C00A  FFF4         	movff	??_INTERRUPT_InterruptManager+9,prodh
  4177  0000AE  C009  FFF3         	movff	??_INTERRUPT_InterruptManager+8,prodl
  4178  0000B2  C008  FFDA         	movff	??_INTERRUPT_InterruptManager+7,fsr2h
  4179  0000B6  C007  FFD9         	movff	??_INTERRUPT_InterruptManager+6,fsr2l
  4180  0000BA  C006  FFE2         	movff	??_INTERRUPT_InterruptManager+5,fsr1h
  4181  0000BE  C005  FFE1         	movff	??_INTERRUPT_InterruptManager+4,fsr1l
  4182  0000C2  C004  FFEA         	movff	??_INTERRUPT_InterruptManager+3,fsr0h
  4183  0000C6  C003  FFE9         	movff	??_INTERRUPT_InterruptManager+2,fsr0l
  4184  0000CA  C002  FFFB         	movff	??_INTERRUPT_InterruptManager+1,pclatu
  4185  0000CE  C001  FFFA         	movff	??_INTERRUPT_InterruptManager,pclath
  4186  0000D2  924D               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4187  0000D4  0011               	retfie		f
  4188  0000D6                     __end_of_INTERRUPT_InterruptManager:
  4189                           	opt stack 0
  4190                           tosu	equ	0xFFF
  4191                           tosh	equ	0xFFE
  4192                           tosl	equ	0xFFD
  4193                           pclatu	equ	0xFFB
  4194                           pclath	equ	0xFFA
  4195                           tblptru	equ	0xFF8
  4196                           tblptrh	equ	0xFF7
  4197                           tblptrl	equ	0xFF6
  4198                           tablat	equ	0xFF5
  4199                           prodh	equ	0xFF4
  4200                           prodl	equ	0xFF3
  4201                           intcon	equ	0xFF2
  4202                           intcon2	equ	0xFF1
  4203                           postinc0	equ	0xFEE
  4204                           fsr0h	equ	0xFEA
  4205                           fsr0l	equ	0xFE9
  4206                           wreg	equ	0xFE8
  4207                           postdec1	equ	0xFE5
  4208                           fsr1h	equ	0xFE2
  4209                           fsr1l	equ	0xFE1
  4210                           fsr2h	equ	0xFDA
  4211                           fsr2l	equ	0xFD9
  4212                           status	equ	0xFD8
  4213                           
  4214 ;; *************** function _EUSART1_Transmit_ISR *****************
  4215 ;; Defined at:
  4216 ;;		line 203 in file "mcc_generated_files/eusart1.c"
  4217 ;; Parameters:    Size  Location     Type
  4218 ;;		None
  4219 ;; Auto vars:     Size  Location     Type
  4220 ;;		None
  4221 ;; Return value:  Size  Location     Type
  4222 ;;                  1    wreg      void 
  4223 ;; Registers used:
  4224 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4225 ;; Tracked objects:
  4226 ;;		On entry : 0/0
  4227 ;;		On exit  : 0/0
  4228 ;;		Unchanged: 0/0
  4229 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4230 ;;      Params:         0       0       0       0       0       0       0
  4231 ;;      Locals:         0       0       0       0       0       0       0
  4232 ;;      Temps:          0       0       0       0       0       0       0
  4233 ;;      Totals:         0       0       0       0       0       0       0
  4234 ;;Total ram usage:        0 bytes
  4235 ;; Hardware stack levels used:    1
  4236 ;; This function calls:
  4237 ;;		Nothing
  4238 ;; This function is called by:
  4239 ;;		_EUSART1_Initialize
  4240 ;;		_INTERRUPT_InterruptManager
  4241 ;; This function uses a non-reentrant model
  4242 ;;
  4243                           
  4244                           	psect	text32
  4245  000C32                     __ptext32:
  4246                           	opt stack 0
  4247  000C32                     _EUSART1_Transmit_ISR:
  4248                           	opt stack 26
  4249                           
  4250                           ;eusart1.c: 207: if(sizeof(eusart1TxBuffer) > eusart1TxBufferRemaining)
  4251                           
  4252                           ;incstack = 0
  4253  000C32  0E08               	movlw	8
  4254  000C34  6049               	cpfslt	_eusart1TxBufferRemaining,c	;volatile
  4255  000C36  D012               	goto	i2l437
  4256                           
  4257                           ;eusart1.c: 208: {
  4258                           ;eusart1.c: 209: TXREG1 = eusart1TxBuffer[eusart1TxTail++];
  4259  000C38  504A               	movf	_eusart1TxTail,w,c	;volatile
  4260  000C3A  0D01               	mullw	1
  4261  000C3C  0E9E               	movlw	low _eusart1TxBuffer
  4262  000C3E  24F3               	addwf	prodl,w,c
  4263  000C40  6ED9               	movwf	fsr2l,c
  4264  000C42  0E00               	movlw	high _eusart1TxBuffer
  4265  000C44  20F4               	addwfc	prodh,w,c
  4266  000C46  6EDA               	movwf	fsr2h,c
  4267  000C48  50DF               	movf	indf2,w,c
  4268  000C4A  6EAD               	movwf	4013,c	;volatile
  4269  000C4C  2A4A               	incf	_eusart1TxTail,f,c	;volatile
  4270                           
  4271                           ;eusart1.c: 210: if(sizeof(eusart1TxBuffer) <= eusart1TxTail)
  4272  000C4E  0E07               	movlw	7
  4273  000C50  644A               	cpfsgt	_eusart1TxTail,c	;volatile
  4274  000C52  D002               	goto	i2l438
  4275                           
  4276                           ;eusart1.c: 211: {
  4277                           ;eusart1.c: 212: eusart1TxTail = 0;
  4278  000C54  0E00               	movlw	0
  4279  000C56  6E4A               	movwf	_eusart1TxTail,c	;volatile
  4280  000C58                     i2l438:
  4281                           
  4282                           ;eusart1.c: 213: }
  4283                           ;eusart1.c: 214: eusart1TxBufferRemaining++;
  4284  000C58  2A49               	incf	_eusart1TxBufferRemaining,f,c	;volatile
  4285                           
  4286                           ;eusart1.c: 215: }
  4287  000C5A  0012               	return	
  4288  000C5C                     i2l437:
  4289                           
  4290                           ;eusart1.c: 216: else
  4291                           ;eusart1.c: 217: {
  4292                           ;eusart1.c: 218: PIE1bits.TX1IE = 0;
  4293  000C5C  989D               	bcf	3997,4,c	;volatile
  4294  000C5E  0012               	return	
  4295  000C60                     __end_of_EUSART1_Transmit_ISR:
  4296                           	opt stack 0
  4297                           tosu	equ	0xFFF
  4298                           tosh	equ	0xFFE
  4299                           tosl	equ	0xFFD
  4300                           pclatu	equ	0xFFB
  4301                           pclath	equ	0xFFA
  4302                           tblptru	equ	0xFF8
  4303                           tblptrh	equ	0xFF7
  4304                           tblptrl	equ	0xFF6
  4305                           tablat	equ	0xFF5
  4306                           prodh	equ	0xFF4
  4307                           prodl	equ	0xFF3
  4308                           intcon	equ	0xFF2
  4309                           intcon2	equ	0xFF1
  4310                           postinc0	equ	0xFEE
  4311                           fsr0h	equ	0xFEA
  4312                           fsr0l	equ	0xFE9
  4313                           wreg	equ	0xFE8
  4314                           postdec1	equ	0xFE5
  4315                           fsr1h	equ	0xFE2
  4316                           fsr1l	equ	0xFE1
  4317                           indf2	equ	0xFDF
  4318                           fsr2h	equ	0xFDA
  4319                           fsr2l	equ	0xFD9
  4320                           status	equ	0xFD8
  4321                           
  4322 ;; *************** function _EUSART1_Receive_ISR *****************
  4323 ;; Defined at:
  4324 ;;		line 222 in file "mcc_generated_files/eusart1.c"
  4325 ;; Parameters:    Size  Location     Type
  4326 ;;		None
  4327 ;; Auto vars:     Size  Location     Type
  4328 ;;		None
  4329 ;; Return value:  Size  Location     Type
  4330 ;;                  1    wreg      void 
  4331 ;; Registers used:
  4332 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
  4333 ;; Tracked objects:
  4334 ;;		On entry : 0/0
  4335 ;;		On exit  : 0/0
  4336 ;;		Unchanged: 0/0
  4337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4338 ;;      Params:         0       0       0       0       0       0       0
  4339 ;;      Locals:         0       0       0       0       0       0       0
  4340 ;;      Temps:          0       0       0       0       0       0       0
  4341 ;;      Totals:         0       0       0       0       0       0       0
  4342 ;;Total ram usage:        0 bytes
  4343 ;; Hardware stack levels used:    1
  4344 ;; Hardware stack levels required when called:    2
  4345 ;; This function calls:
  4346 ;;		Absolute function
  4347 ;;		_EUSART1_DefaultErrorHandler
  4348 ;;		_EUSART1_DefaultFramingErrorHandler
  4349 ;;		_EUSART1_DefaultOverrunErrorHandler
  4350 ;;		_EUSART1_RxDataHandler
  4351 ;; This function is called by:
  4352 ;;		_EUSART1_Initialize
  4353 ;;		_INTERRUPT_InterruptManager
  4354 ;; This function uses a non-reentrant model
  4355 ;;
  4356                           
  4357                           	psect	text33
  4358  00082E                     __ptext33:
  4359                           	opt stack 0
  4360  00082E                     _EUSART1_Receive_ISR:
  4361                           	opt stack 24
  4362                           
  4363                           ;eusart1.c: 225: eusart1RxStatusBuffer[eusart1RxHead].status = 0;
  4364                           
  4365                           ;incstack = 0
  4366  00082E  5048               	movf	_eusart1RxHead,w,c	;volatile
  4367  000830  0D01               	mullw	1
  4368  000832  0E8E               	movlw	low _eusart1RxStatusBuffer
  4369  000834  24F3               	addwf	prodl,w,c
  4370  000836  6ED9               	movwf	fsr2l,c
  4371  000838  0E00               	movlw	high _eusart1RxStatusBuffer
  4372  00083A  20F4               	addwfc	prodh,w,c
  4373  00083C  6EDA               	movwf	fsr2h,c
  4374  00083E  0E00               	movlw	0
  4375  000840  6EDF               	movwf	indf2,c
  4376                           
  4377                           ;eusart1.c: 227: if(RCSTA1bits.FERR){
  4378  000842  A4AB               	btfss	4011,2,c	;volatile
  4379  000844  D016               	goto	i2u152_49
  4380                           
  4381                           ;eusart1.c: 228: eusart1RxStatusBuffer[eusart1RxHead].ferr = 1;
  4382  000846  5048               	movf	_eusart1RxHead,w,c	;volatile
  4383  000848  0D01               	mullw	1
  4384  00084A  0E8E               	movlw	low _eusart1RxStatusBuffer
  4385  00084C  24F3               	addwf	prodl,w,c
  4386  00084E  6ED9               	movwf	fsr2l,c
  4387  000850  0E00               	movlw	high _eusart1RxStatusBuffer
  4388  000852  20F4               	addwfc	prodh,w,c
  4389  000854  6EDA               	movwf	fsr2h,c
  4390  000856  0100               	movlb	0	; () banked
  4391  000858  82DF               	bsf	indf2,1,c
  4392                           
  4393                           ; BSR set to: 0
  4394                           ;eusart1.c: 229: EUSART1_FramingErrorHandler();
  4395  00085A  D801               	call	i2u152_48
  4396  00085C  D00A               	goto	i2u152_49
  4397  00085E                     i2u152_48:
  4398  00085E  0005               	push	
  4399  000860  6EFA               	movwf	pclath,c
  4400  000862  503D               	movf	_EUSART1_FramingErrorHandler,w,c
  4401  000864  6EFD               	movwf	tosl,c
  4402  000866  503E               	movf	_EUSART1_FramingErrorHandler+1,w,c
  4403  000868  6EFE               	movwf	tosh,c
  4404  00086A  50F8               	movf	tblptru,w,c
  4405  00086C  6EFF               	movwf	tosu,c
  4406  00086E  50FA               	movf	pclath,w,c
  4407  000870  0012               	return		;indir
  4408  000872                     i2u152_49:
  4409                           
  4410                           ;eusart1.c: 230: }
  4411                           ;eusart1.c: 232: if(RCSTA1bits.OERR){
  4412  000872  A2AB               	btfss	4011,1,c	;volatile
  4413  000874  D016               	goto	i2u154_49
  4414                           
  4415                           ;eusart1.c: 233: eusart1RxStatusBuffer[eusart1RxHead].oerr = 1;
  4416  000876  5048               	movf	_eusart1RxHead,w,c	;volatile
  4417  000878  0D01               	mullw	1
  4418  00087A  0E8E               	movlw	low _eusart1RxStatusBuffer
  4419  00087C  24F3               	addwf	prodl,w,c
  4420  00087E  6ED9               	movwf	fsr2l,c
  4421  000880  0E00               	movlw	high _eusart1RxStatusBuffer
  4422  000882  20F4               	addwfc	prodh,w,c
  4423  000884  6EDA               	movwf	fsr2h,c
  4424  000886  0100               	movlb	0	; () banked
  4425  000888  84DF               	bsf	indf2,2,c
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;eusart1.c: 234: EUSART1_OverrunErrorHandler();
  4429  00088A  D801               	call	i2u154_48
  4430  00088C  D00A               	goto	i2u154_49
  4431  00088E                     i2u154_48:
  4432  00088E  0005               	push	
  4433  000890  6EFA               	movwf	pclath,c
  4434  000892  503B               	movf	_EUSART1_OverrunErrorHandler,w,c
  4435  000894  6EFD               	movwf	tosl,c
  4436  000896  503C               	movf	_EUSART1_OverrunErrorHandler+1,w,c
  4437  000898  6EFE               	movwf	tosh,c
  4438  00089A  50F8               	movf	tblptru,w,c
  4439  00089C  6EFF               	movwf	tosu,c
  4440  00089E  50FA               	movf	pclath,w,c
  4441  0008A0  0012               	return		;indir
  4442  0008A2                     i2u154_49:
  4443                           
  4444                           ;eusart1.c: 235: }
  4445                           ;eusart1.c: 237: if(eusart1RxStatusBuffer[eusart1RxHead].status){
  4446  0008A2  5048               	movf	_eusart1RxHead,w,c	;volatile
  4447  0008A4  0D01               	mullw	1
  4448  0008A6  0E8E               	movlw	low _eusart1RxStatusBuffer
  4449  0008A8  24F3               	addwf	prodl,w,c
  4450  0008AA  6ED9               	movwf	fsr2l,c
  4451  0008AC  0E00               	movlw	high _eusart1RxStatusBuffer
  4452  0008AE  20F4               	addwfc	prodh,w,c
  4453  0008B0  6EDA               	movwf	fsr2h,c
  4454  0008B2  50DF               	movf	indf2,w,c
  4455  0008B4  B4D8               	btfsc	status,2,c
  4456  0008B6  D00D               	goto	i2l445
  4457                           
  4458                           ;eusart1.c: 238: EUSART1_ErrorHandler();
  4459  0008B8  D801               	call	i2u156_48
  4460  0008BA  0012               	return	
  4461  0008BC                     i2u156_48:
  4462  0008BC  0005               	push	
  4463  0008BE  0100               	movlb	0	; () banked
  4464  0008C0  6EFA               	movwf	pclath,c
  4465  0008C2  51A9               	movf	_EUSART1_ErrorHandler& (0+255),w,b
  4466  0008C4  6EFD               	movwf	tosl,c
  4467  0008C6  51AA               	movf	(_EUSART1_ErrorHandler+1)& (0+255),w,b
  4468  0008C8  6EFE               	movwf	tosh,c
  4469  0008CA  50F8               	movf	tblptru,w,c
  4470  0008CC  6EFF               	movwf	tosu,c
  4471  0008CE  50FA               	movf	pclath,w,c
  4472  0008D0  0012               	return		;indir
  4473  0008D2                     i2l445:
  4474                           
  4475                           ;eusart1.c: 240: EUSART1_RxDataHandler();
  4476  0008D2  EC55  F006         	call	_EUSART1_RxDataHandler	;wreg free
  4477  0008D6  0012               	return	
  4478  0008D8                     __end_of_EUSART1_Receive_ISR:
  4479                           	opt stack 0
  4480                           tosu	equ	0xFFF
  4481                           tosh	equ	0xFFE
  4482                           tosl	equ	0xFFD
  4483                           pclatu	equ	0xFFB
  4484                           pclath	equ	0xFFA
  4485                           tblptru	equ	0xFF8
  4486                           tblptrh	equ	0xFF7
  4487                           tblptrl	equ	0xFF6
  4488                           tablat	equ	0xFF5
  4489                           prodh	equ	0xFF4
  4490                           prodl	equ	0xFF3
  4491                           intcon	equ	0xFF2
  4492                           intcon2	equ	0xFF1
  4493                           postinc0	equ	0xFEE
  4494                           fsr0h	equ	0xFEA
  4495                           fsr0l	equ	0xFE9
  4496                           wreg	equ	0xFE8
  4497                           postdec1	equ	0xFE5
  4498                           fsr1h	equ	0xFE2
  4499                           fsr1l	equ	0xFE1
  4500                           indf2	equ	0xFDF
  4501                           fsr2h	equ	0xFDA
  4502                           fsr2l	equ	0xFD9
  4503                           status	equ	0xFD8
  4504                           
  4505 ;; *************** function _EUSART1_DefaultOverrunErrorHandler *****************
  4506 ;; Defined at:
  4507 ;;		line 258 in file "mcc_generated_files/eusart1.c"
  4508 ;; Parameters:    Size  Location     Type
  4509 ;;		None
  4510 ;; Auto vars:     Size  Location     Type
  4511 ;;		None
  4512 ;; Return value:  Size  Location     Type
  4513 ;;                  1    wreg      void 
  4514 ;; Registers used:
  4515 ;;		None
  4516 ;; Tracked objects:
  4517 ;;		On entry : 0/0
  4518 ;;		On exit  : 0/0
  4519 ;;		Unchanged: 0/0
  4520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4521 ;;      Params:         0       0       0       0       0       0       0
  4522 ;;      Locals:         0       0       0       0       0       0       0
  4523 ;;      Temps:          0       0       0       0       0       0       0
  4524 ;;      Totals:         0       0       0       0       0       0       0
  4525 ;;Total ram usage:        0 bytes
  4526 ;; Hardware stack levels used:    1
  4527 ;; This function calls:
  4528 ;;		Nothing
  4529 ;; This function is called by:
  4530 ;;		_EUSART1_Initialize
  4531 ;;		_EUSART1_Receive_ISR
  4532 ;; This function uses a non-reentrant model
  4533 ;;
  4534                           
  4535                           	psect	text34
  4536  000D90                     __ptext34:
  4537                           	opt stack 0
  4538  000D90                     _EUSART1_DefaultOverrunErrorHandler:
  4539                           	opt stack 25
  4540                           
  4541                           ;eusart1.c: 261: RCSTA1bits.CREN = 0;
  4542                           
  4543                           ;incstack = 0
  4544  000D90  98AB               	bcf	4011,4,c	;volatile
  4545                           
  4546                           ;eusart1.c: 262: RCSTA1bits.CREN = 1;
  4547  000D92  88AB               	bsf	4011,4,c	;volatile
  4548  000D94  0012               	return		;funcret
  4549  000D96                     __end_of_EUSART1_DefaultOverrunErrorHandler:
  4550                           	opt stack 0
  4551                           tosu	equ	0xFFF
  4552                           tosh	equ	0xFFE
  4553                           tosl	equ	0xFFD
  4554                           pclatu	equ	0xFFB
  4555                           pclath	equ	0xFFA
  4556                           tblptru	equ	0xFF8
  4557                           tblptrh	equ	0xFF7
  4558                           tblptrl	equ	0xFF6
  4559                           tablat	equ	0xFF5
  4560                           prodh	equ	0xFF4
  4561                           prodl	equ	0xFF3
  4562                           intcon	equ	0xFF2
  4563                           intcon2	equ	0xFF1
  4564                           postinc0	equ	0xFEE
  4565                           fsr0h	equ	0xFEA
  4566                           fsr0l	equ	0xFE9
  4567                           wreg	equ	0xFE8
  4568                           postdec1	equ	0xFE5
  4569                           fsr1h	equ	0xFE2
  4570                           fsr1l	equ	0xFE1
  4571                           indf2	equ	0xFDF
  4572                           fsr2h	equ	0xFDA
  4573                           fsr2l	equ	0xFD9
  4574                           status	equ	0xFD8
  4575                           
  4576 ;; *************** function _EUSART1_DefaultFramingErrorHandler *****************
  4577 ;; Defined at:
  4578 ;;		line 256 in file "mcc_generated_files/eusart1.c"
  4579 ;; Parameters:    Size  Location     Type
  4580 ;;		None
  4581 ;; Auto vars:     Size  Location     Type
  4582 ;;		None
  4583 ;; Return value:  Size  Location     Type
  4584 ;;                  1    wreg      void 
  4585 ;; Registers used:
  4586 ;;		None
  4587 ;; Tracked objects:
  4588 ;;		On entry : 0/0
  4589 ;;		On exit  : 0/0
  4590 ;;		Unchanged: 0/0
  4591 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4592 ;;      Params:         0       0       0       0       0       0       0
  4593 ;;      Locals:         0       0       0       0       0       0       0
  4594 ;;      Temps:          0       0       0       0       0       0       0
  4595 ;;      Totals:         0       0       0       0       0       0       0
  4596 ;;Total ram usage:        0 bytes
  4597 ;; Hardware stack levels used:    1
  4598 ;; This function calls:
  4599 ;;		Nothing
  4600 ;; This function is called by:
  4601 ;;		_EUSART1_Initialize
  4602 ;;		_EUSART1_Receive_ISR
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	text35
  4607  000DA0                     __ptext35:
  4608                           	opt stack 0
  4609  000DA0                     _EUSART1_DefaultFramingErrorHandler:
  4610                           	opt stack 25
  4611                           
  4612                           ;incstack = 0
  4613  000DA0  0012               	return		;funcret
  4614  000DA2                     __end_of_EUSART1_DefaultFramingErrorHandler:
  4615                           	opt stack 0
  4616                           tosu	equ	0xFFF
  4617                           tosh	equ	0xFFE
  4618                           tosl	equ	0xFFD
  4619                           pclatu	equ	0xFFB
  4620                           pclath	equ	0xFFA
  4621                           tblptru	equ	0xFF8
  4622                           tblptrh	equ	0xFF7
  4623                           tblptrl	equ	0xFF6
  4624                           tablat	equ	0xFF5
  4625                           prodh	equ	0xFF4
  4626                           prodl	equ	0xFF3
  4627                           intcon	equ	0xFF2
  4628                           intcon2	equ	0xFF1
  4629                           postinc0	equ	0xFEE
  4630                           fsr0h	equ	0xFEA
  4631                           fsr0l	equ	0xFE9
  4632                           wreg	equ	0xFE8
  4633                           postdec1	equ	0xFE5
  4634                           fsr1h	equ	0xFE2
  4635                           fsr1l	equ	0xFE1
  4636                           indf2	equ	0xFDF
  4637                           fsr2h	equ	0xFDA
  4638                           fsr2l	equ	0xFD9
  4639                           status	equ	0xFD8
  4640                           
  4641 ;; *************** function _EUSART1_DefaultErrorHandler *****************
  4642 ;; Defined at:
  4643 ;;		line 266 in file "mcc_generated_files/eusart1.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;                  1    wreg      void 
  4650 ;; Registers used:
  4651 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/0
  4654 ;;		On exit  : 0/0
  4655 ;;		Unchanged: 0/0
  4656 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4657 ;;      Params:         0       0       0       0       0       0       0
  4658 ;;      Locals:         0       0       0       0       0       0       0
  4659 ;;      Temps:          0       0       0       0       0       0       0
  4660 ;;      Totals:         0       0       0       0       0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    1
  4664 ;; This function calls:
  4665 ;;		_EUSART1_RxDataHandler
  4666 ;; This function is called by:
  4667 ;;		_EUSART1_Initialize
  4668 ;;		_EUSART1_Receive_ISR
  4669 ;; This function uses a non-reentrant model
  4670 ;;
  4671                           
  4672                           	psect	text36
  4673  000D96                     __ptext36:
  4674                           	opt stack 0
  4675  000D96                     _EUSART1_DefaultErrorHandler:
  4676                           	opt stack 24
  4677                           
  4678                           ;eusart1.c: 267: EUSART1_RxDataHandler();
  4679                           
  4680                           ;incstack = 0
  4681  000D96  EC55  F006         	call	_EUSART1_RxDataHandler	;wreg free
  4682  000D9A  0012               	return		;funcret
  4683  000D9C                     __end_of_EUSART1_DefaultErrorHandler:
  4684                           	opt stack 0
  4685                           tosu	equ	0xFFF
  4686                           tosh	equ	0xFFE
  4687                           tosl	equ	0xFFD
  4688                           pclatu	equ	0xFFB
  4689                           pclath	equ	0xFFA
  4690                           tblptru	equ	0xFF8
  4691                           tblptrh	equ	0xFF7
  4692                           tblptrl	equ	0xFF6
  4693                           tablat	equ	0xFF5
  4694                           prodh	equ	0xFF4
  4695                           prodl	equ	0xFF3
  4696                           intcon	equ	0xFF2
  4697                           intcon2	equ	0xFF1
  4698                           postinc0	equ	0xFEE
  4699                           fsr0h	equ	0xFEA
  4700                           fsr0l	equ	0xFE9
  4701                           wreg	equ	0xFE8
  4702                           postdec1	equ	0xFE5
  4703                           fsr1h	equ	0xFE2
  4704                           fsr1l	equ	0xFE1
  4705                           indf2	equ	0xFDF
  4706                           fsr2h	equ	0xFDA
  4707                           fsr2l	equ	0xFD9
  4708                           status	equ	0xFD8
  4709                           
  4710 ;; *************** function _EUSART1_RxDataHandler *****************
  4711 ;; Defined at:
  4712 ;;		line 246 in file "mcc_generated_files/eusart1.c"
  4713 ;; Parameters:    Size  Location     Type
  4714 ;;		None
  4715 ;; Auto vars:     Size  Location     Type
  4716 ;;		None
  4717 ;; Return value:  Size  Location     Type
  4718 ;;                  1    wreg      void 
  4719 ;; Registers used:
  4720 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  4721 ;; Tracked objects:
  4722 ;;		On entry : 0/0
  4723 ;;		On exit  : 0/0
  4724 ;;		Unchanged: 0/0
  4725 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4726 ;;      Params:         0       0       0       0       0       0       0
  4727 ;;      Locals:         0       0       0       0       0       0       0
  4728 ;;      Temps:          0       0       0       0       0       0       0
  4729 ;;      Totals:         0       0       0       0       0       0       0
  4730 ;;Total ram usage:        0 bytes
  4731 ;; Hardware stack levels used:    1
  4732 ;; This function calls:
  4733 ;;		Nothing
  4734 ;; This function is called by:
  4735 ;;		_EUSART1_Receive_ISR
  4736 ;;		_EUSART1_DefaultErrorHandler
  4737 ;; This function uses a non-reentrant model
  4738 ;;
  4739                           
  4740                           	psect	text37
  4741  000CAA                     __ptext37:
  4742                           	opt stack 0
  4743  000CAA                     _EUSART1_RxDataHandler:
  4744                           	opt stack 25
  4745                           
  4746                           ;eusart1.c: 248: eusart1RxBuffer[eusart1RxHead++] = RCREG1;
  4747                           
  4748                           ;incstack = 0
  4749  000CAA  5048               	movf	_eusart1RxHead,w,c	;volatile
  4750  000CAC  0D01               	mullw	1
  4751  000CAE  0E96               	movlw	low _eusart1RxBuffer
  4752  000CB0  24F3               	addwf	prodl,w,c
  4753  000CB2  6ED9               	movwf	fsr2l,c
  4754  000CB4  0E00               	movlw	high _eusart1RxBuffer
  4755  000CB6  20F4               	addwfc	prodh,w,c
  4756  000CB8  6EDA               	movwf	fsr2h,c
  4757  000CBA  CFAE FFDF          	movff	4014,indf2	;volatile
  4758  000CBE  2A48               	incf	_eusart1RxHead,f,c	;volatile
  4759                           
  4760                           ;eusart1.c: 249: if(sizeof(eusart1RxBuffer) <= eusart1RxHead)
  4761  000CC0  0E07               	movlw	7
  4762  000CC2  6448               	cpfsgt	_eusart1RxHead,c	;volatile
  4763  000CC4  D002               	goto	i2l450
  4764                           
  4765                           ;eusart1.c: 250: {
  4766                           ;eusart1.c: 251: eusart1RxHead = 0;
  4767  000CC6  0E00               	movlw	0
  4768  000CC8  6E48               	movwf	_eusart1RxHead,c	;volatile
  4769  000CCA                     i2l450:
  4770                           
  4771                           ;eusart1.c: 252: }
  4772                           ;eusart1.c: 253: eusart1RxCount++;
  4773  000CCA  2A46               	incf	_eusart1RxCount,f,c	;volatile
  4774  000CCC  0012               	return		;funcret
  4775  000CCE                     __end_of_EUSART1_RxDataHandler:
  4776                           	opt stack 0
  4777  0000                     tosu	equ	0xFFF
  4778                           tosh	equ	0xFFE
  4779                           tosl	equ	0xFFD
  4780                           pclatu	equ	0xFFB
  4781                           pclath	equ	0xFFA
  4782                           tblptru	equ	0xFF8
  4783                           tblptrh	equ	0xFF7
  4784                           tblptrl	equ	0xFF6
  4785                           tablat	equ	0xFF5
  4786                           prodh	equ	0xFF4
  4787                           prodl	equ	0xFF3
  4788                           intcon	equ	0xFF2
  4789                           intcon2	equ	0xFF1
  4790                           postinc0	equ	0xFEE
  4791                           fsr0h	equ	0xFEA
  4792                           fsr0l	equ	0xFE9
  4793                           wreg	equ	0xFE8
  4794                           postdec1	equ	0xFE5
  4795                           fsr1h	equ	0xFE2
  4796                           fsr1l	equ	0xFE1
  4797                           indf2	equ	0xFDF
  4798                           fsr2h	equ	0xFDA
  4799                           fsr2l	equ	0xFD9
  4800                           status	equ	0xFD8
  4801                           tosu	equ	0xFFF
  4802                           tosh	equ	0xFFE
  4803                           tosl	equ	0xFFD
  4804                           pclatu	equ	0xFFB
  4805                           pclath	equ	0xFFA
  4806                           tblptru	equ	0xFF8
  4807                           tblptrh	equ	0xFF7
  4808                           tblptrl	equ	0xFF6
  4809                           tablat	equ	0xFF5
  4810                           prodh	equ	0xFF4
  4811                           prodl	equ	0xFF3
  4812                           intcon	equ	0xFF2
  4813                           intcon2	equ	0xFF1
  4814                           postinc0	equ	0xFEE
  4815                           fsr0h	equ	0xFEA
  4816                           fsr0l	equ	0xFE9
  4817                           wreg	equ	0xFE8
  4818                           postdec1	equ	0xFE5
  4819                           fsr1h	equ	0xFE2
  4820                           fsr1l	equ	0xFE1
  4821                           indf2	equ	0xFDF
  4822                           fsr2h	equ	0xFDA
  4823                           fsr2l	equ	0xFD9
  4824                           status	equ	0xFD8
  4825                           
  4826                           	psect	text38
  4827  000000                     __ptext38:
  4828                           	opt stack 0
  4829                           tosu	equ	0xFFF
  4830                           tosh	equ	0xFFE
  4831                           tosl	equ	0xFFD
  4832                           pclatu	equ	0xFFB
  4833                           pclath	equ	0xFFA
  4834                           tblptru	equ	0xFF8
  4835                           tblptrh	equ	0xFF7
  4836                           tblptrl	equ	0xFF6
  4837                           tablat	equ	0xFF5
  4838                           prodh	equ	0xFF4
  4839                           prodl	equ	0xFF3
  4840                           intcon	equ	0xFF2
  4841                           intcon2	equ	0xFF1
  4842                           postinc0	equ	0xFEE
  4843                           fsr0h	equ	0xFEA
  4844                           fsr0l	equ	0xFE9
  4845                           wreg	equ	0xFE8
  4846                           postdec1	equ	0xFE5
  4847                           fsr1h	equ	0xFE2
  4848                           fsr1l	equ	0xFE1
  4849                           indf2	equ	0xFDF
  4850                           fsr2h	equ	0xFDA
  4851                           fsr2l	equ	0xFD9
  4852                           status	equ	0xFD8
  4853                           
  4854                           	psect	rparam
  4855  0000                     tosu	equ	0xFFF
  4856                           tosh	equ	0xFFE
  4857                           tosl	equ	0xFFD
  4858                           pclatu	equ	0xFFB
  4859                           pclath	equ	0xFFA
  4860                           tblptru	equ	0xFF8
  4861                           tblptrh	equ	0xFF7
  4862                           tblptrl	equ	0xFF6
  4863                           tablat	equ	0xFF5
  4864                           prodh	equ	0xFF4
  4865                           prodl	equ	0xFF3
  4866                           intcon	equ	0xFF2
  4867                           intcon2	equ	0xFF1
  4868                           postinc0	equ	0xFEE
  4869                           fsr0h	equ	0xFEA
  4870                           fsr0l	equ	0xFE9
  4871                           wreg	equ	0xFE8
  4872                           postdec1	equ	0xFE5
  4873                           fsr1h	equ	0xFE2
  4874                           fsr1l	equ	0xFE1
  4875                           indf2	equ	0xFDF
  4876                           fsr2h	equ	0xFDA
  4877                           fsr2l	equ	0xFD9
  4878                           status	equ	0xFD8
  4879                           
  4880                           	psect	temp
  4881  00004D                     btemp:
  4882                           	opt stack 0
  4883  00004D                     	ds	1
  4884  0000                     int$flags	set	btemp
  4885  0000                     wtemp6	set	btemp+1
  4886                           tosu	equ	0xFFF
  4887                           tosh	equ	0xFFE
  4888                           tosl	equ	0xFFD
  4889                           pclatu	equ	0xFFB
  4890                           pclath	equ	0xFFA
  4891                           tblptru	equ	0xFF8
  4892                           tblptrh	equ	0xFF7
  4893                           tblptrl	equ	0xFF6
  4894                           tablat	equ	0xFF5
  4895                           prodh	equ	0xFF4
  4896                           prodl	equ	0xFF3
  4897                           intcon	equ	0xFF2
  4898                           intcon2	equ	0xFF1
  4899                           postinc0	equ	0xFEE
  4900                           fsr0h	equ	0xFEA
  4901                           fsr0l	equ	0xFE9
  4902                           wreg	equ	0xFE8
  4903                           postdec1	equ	0xFE5
  4904                           fsr1h	equ	0xFE2
  4905                           fsr1l	equ	0xFE1
  4906                           indf2	equ	0xFDF
  4907                           fsr2h	equ	0xFDA
  4908                           fsr2l	equ	0xFD9
  4909                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         54
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     58      76
    BANK0           160     46      89
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    EUSART1_SetRxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Receive_ISR(), 

    EUSART1_RxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Receive_ISR(), 

    EUSART1_SetTxInterruptHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_Transmit_ISR(), 

    EUSART1_TxDefaultInterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_Transmit_ISR(), 

    EUSART1_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultErrorHandler(), 

    EUSART1_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART1_DefaultFramingErrorHandler(), 

    EUSART1_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultErrorHandler(), 

    EUSART1_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultOverrunErrorHandler(), 

    EUSART1_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART1_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMRAM

    _main->_calculo_PID
    _moverse->_mover_motor_A
    _moverse->_mover_motor_B
    _mover_motor_B->_PWM4_LoadDutyValue
    _mover_motor_A->_PWM5_LoadDutyValue
    _leer_sensores->_ADC_GetConversion
    _calculo_PID->___ftmul
    ___ftmul->___ftadd
    ___ftadd->___ftpack
    ___awtoft->___ftpack
    ___fttol->_calculo_PID
    _EUSART1_Initialize->_EUSART1_SetErrorHandler
    _EUSART1_Initialize->_EUSART1_SetFramingErrorHandler
    _EUSART1_Initialize->_EUSART1_SetOverrunErrorHandler
    _EUSART1_Initialize->_EUSART1_SetRxInterruptHandler
    _EUSART1_Initialize->_EUSART1_SetTxInterruptHandler

Critical Paths under _INTERRUPT_InterruptManager in COMRAM

    None.

Critical Paths under _main in BANK0

    _main->___fttol
    ___fttol->_calculo_PID

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                19    19      0   16282
                                             27 BANK0     19    19      0
                  _ADC_GetConversion
                  _SYSTEM_Initialize
                            ___awdiv
                            ___fttol
                        _calculo_PID
                      _leer_sensores
                            _moverse
 ---------------------------------------------------------------------------------
 (1) _moverse                                              4     0      4    1118
                                             24 COMRAM     4     0      4
                      _mover_motor_A
                      _mover_motor_B
 ---------------------------------------------------------------------------------
 (2) _mover_motor_B                                        2     0      2     385
                                             22 COMRAM     2     0      2
                 _PWM4_LoadDutyValue
 ---------------------------------------------------------------------------------
 (3) _PWM4_LoadDutyValue                                   4     2      2     196
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _mover_motor_A                                        2     0      2     385
                                             22 COMRAM     2     0      2
                 _PWM5_LoadDutyValue
 ---------------------------------------------------------------------------------
 (3) _PWM5_LoadDutyValue                                   4     2      2     196
                                             18 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _leer_sensores                                       17    17      0      95
                                             23 COMRAM    16    16      0
                  _ADC_GetConversion
 ---------------------------------------------------------------------------------
 (2) _ADC_GetConversion                                    5     3      2      22
                                             18 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 (1) _calculo_PID                                         17    14      3   12139
                                             53 COMRAM     5     2      3
                                              0 BANK0     12    12      0
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___ftneg
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     155
                                             18 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3821
                                             38 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    4698
                                             26 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    3056
                                             26 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2833
                                             18 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     551
                                             12 BANK0     15    11      4
                        _calculo_PID (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     908
                                             18 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     490
                     _ADC_Initialize
                 _EUSART1_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _PWM4_Initialize
                    _PWM5_Initialize
                    _TMR2_Initialize
                    _TMR4_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PWM4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART1_Initialize                                   0     0      0     490
            _EUSART1_SetErrorHandler
     _EUSART1_SetFramingErrorHandler
     _EUSART1_SetOverrunErrorHandler
      _EUSART1_SetRxInterruptHandler
      _EUSART1_SetTxInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetTxInterruptHandler                        2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetRxInterruptHandler                        2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetOverrunErrorHandler                       2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetFramingErrorHandler                       2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART1_SetErrorHandler                              2     0      2      98
                                             18 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (2) _ADC_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _INTERRUPT_InterruptManager                          18    18      0       0
                                              0 COMRAM    18    18      0
                   Absolute function *
                _EUSART1_Receive_ISR *
               _EUSART1_Transmit_ISR *
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Transmit_ISR                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _EUSART1_Receive_ISR                                  0     0      0       0
                   Absolute function *
        _EUSART1_DefaultErrorHandler *
 _EUSART1_DefaultFramingErrorHandler *
 _EUSART1_DefaultOverrunErrorHandler *
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultOverrunErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultFramingErrorHandler                   0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _EUSART1_DefaultErrorHandler                          0     0      0       0
              _EUSART1_RxDataHandler
 ---------------------------------------------------------------------------------
 (6) _EUSART1_RxDataHandler                                0     0      0       0
 ---------------------------------------------------------------------------------
 (6) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_GetConversion
   _SYSTEM_Initialize
     _ADC_Initialize
     _EUSART1_Initialize
       _EUSART1_SetErrorHandler
       _EUSART1_SetFramingErrorHandler
       _EUSART1_SetOverrunErrorHandler
       _EUSART1_SetRxInterruptHandler
       _EUSART1_SetTxInterruptHandler
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PWM4_Initialize
     _PWM5_Initialize
     _TMR2_Initialize
     _TMR4_Initialize
   ___awdiv
   ___fttol
     _calculo_PID (ARG)
       ___awtoft
         ___ftpack
       ___ftadd
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftmul
         ___ftadd (ARG)
           ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg
   _calculo_PID
     ___awtoft
       ___ftpack
     ___ftadd
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftmul
       ___ftadd (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftneg
   _leer_sensores
     _ADC_GetConversion
   _moverse
     _mover_motor_A
       _PWM5_LoadDutyValue
     _mover_motor_B
       _PWM4_LoadDutyValue

 _INTERRUPT_InterruptManager (ROOT)
   Absolute function(Fake) *
   _EUSART1_Receive_ISR *
     Absolute function(Fake) *
     _EUSART1_DefaultErrorHandler *
       _EUSART1_RxDataHandler
     _EUSART1_DefaultFramingErrorHandler *
     _EUSART1_DefaultOverrunErrorHandler *
     _EUSART1_RxDataHandler *
   _EUSART1_Transmit_ISR *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      16        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0     2E      59       4       55.6%
BITCOMRAM           5E      0       1       0        1.1%
COMRAM              5E     3A      4C       1       80.9%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      A5       9        0.0%
DATA                 0      0      A5      17        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Mon Nov 04 09:49:07 2019

                      _eusart1TxBufferRemaining 0049                        main@valor_sensor_derecho 0089  
                                            l37 0D44                                              _KD 00B3  
                                            _KP 00B6                                    ___awdiv@sign 0018  
                                  __CFG_CP0$OFF 000000                                    __CFG_CP1$OFF 000000  
                                  __CFG_CP2$OFF 000000                                    __CFG_CP3$OFF 000000  
                                  ___ftadd@exp1 0026                                    ___ftadd@exp2 0025  
                                   __CFG_LVP$ON 000000                                    ___ftadd@sign 0024  
                                           l140 00EA                                             l141 00F0  
                                           l150 01CA                                             l151 0202  
                                           l143 010A                                             l320 0C1A  
                                           l152 0218                                             l145 013A  
                                           l170 0ABA                                             l154 022E  
                                           l146 0148                                             l171 0AC4  
                                           l155 029A                                             l139 00E2  
                                           l172 0AD0                                             l180 0A82  
                                           l148 016E                                             l149 0186  
                                           l168 0AA4                                             l176 0A56  
                                           l178 0A6C                                             l179 0A76  
                                           l720 07C6                                             l801 064C  
                                           l722 0804                                             l802 065C  
                                           l723 07FA                                             l716 07A8  
                                           l717 079E                                             l670 08FC  
                                           l806 0C9C                                             l719 07DC  
                                           l751 037A                                             l672 091A  
                                           l824 0574                                             l816 04D8  
                                           l673 0912                                             l825 0568  
                                           l761 03D6                                             l818 0550  
                                           l770 0414                                             l762 03CC  
                                           l827 0590                                             l819 0540  
                                           l771 040A                                             l747 0350  
                                           l676 093A                                             l756 03E0  
                                           l677 0944                                             l669 08EC  
                                           l773 0438                                             l678 0952  
                                           l774 0454                                             l775 0484  
                                           l697 0B7A                                             l795 05CA  
                                           l797 05F2                                             l798 0624  
                                           l799 0634                                    __CFG_CPB$OFF 000000  
                                           _PR2 000FBB                                             _PR4 000F52  
                                  __CFG_CPD$OFF 000000                                 _TMR2_Initialize 0D4A  
                               _PWM4_Initialize 0D12                                             prod 000FF3  
                                           tosl 000FFD                                             wreg 000FE8  
                                    _TXSTA1bits 000FAC                          __size_of_leer_sensores 0072  
                                          l2593 0140                                            u2011 030E  
                                          u2021 0322                                            u2110 03AA  
                                          u2050 0342                                            u2301 04BC  
                                          u2221 05B2                                            _LATA 000F89  
                                          u2150 03E8                                            _LATB 000F8A  
                                          _LATC 000F8B                                            u1600 091E  
                                          u2320 04F6                                            u2080 036C  
                                          _LATD 000F8C                                            u2241 05DA  
                                          _LATE 000F8D                                            u2410 0112  
                                          u2180 041C                                            u2325 04EE  
                                          u2360 057A                                            u2425 0114  
                                          u2460 018A                                            u2537 0120  
                                          u1940 0790                                            u1980 080E  
                                          _TMR2 000FBC                                            _TMR4 000F53  
                                          _WPUB 000F61                                            _main 00DA  
                                  ___ftpack@arg 0013                                    ___ftpack@exp 0016  
                                          fsr0h 000FEA                                            fsr1h 000FE2  
                                          fsr2h 000FDA                                            fsr0l 000FE9  
                                          indf2 000FDF                                            fsr1l 000FE1  
                                          fsr2l 000FD9                                            btemp 004D  
                                 __CFG_BORV$190 000000                                            prodh 000FF4  
                                          prodl 000FF3                                            start 00D6  
                                 __CFG_IESO$OFF 000000                                 _PWM5_Initialize 0CFE  
                                  ___ftmul@cntr 0034                                    ___param_bank 000000  
                                  ___ftmul@sign 0035                      __end_of_PWM5_LoadDutyValue 0C02  
                                  ___fttol@exp1 007A                                    ___fttol@lval 0076  
                __size_of_OSCILLATOR_Initialize 0012                   __end_of_OSCILLATOR_Initialize 0D4A  
                         _eusart1RxStatusBuffer 008E                                           ?_main 0001  
                               __end_of___awdiv 095C                                 __end_of___ftadd 04AA  
                               __end_of___ftneg 0CAA                            __size_of_calculo_PID 00EA  
                               __end_of___ftmul 0696                                 ___awdiv@divisor 0015  
                               __end_of___fttol 05A2                                           _T2CON 000FBA  
                                         _LATC1 007C59                                           _LATC2 007C5A  
                                         _LATD0 007C60                                           _LATC3 007C5B  
                                         _LATD2 007C62                                           _LATC7 007C5F  
                                         _T4CON 000F51                                  __CFG_DEBUG$OFF 000000  
                                         i2l450 0CCA                                           i2l445 08D2  
                                         i2l437 0C5C                                           i2l438 0C58  
                                         i2l496 006C                                 ___awdiv@counter 0017  
                            _PWM4_LoadDutyValue 0B9E                                           _TRISA 000F92  
                                         _TRISB 000F93                                           _TRISC 000F94  
                                         _TRISD 000F95                                           _TRISE 000F96  
                                 __CFG_WRT0$OFF 000000                                 _TMR4_Initialize 0D26  
                                 __CFG_WRT1$OFF 000000                                   __CFG_WRT2$OFF 000000  
                                 __CFG_WRT3$OFF 000000                            _EUSART1_Transmit_ISR 0C32  
                                __CFG_EBTR0$OFF 000000                                  __CFG_FCMEN$OFF 000000  
                                __CFG_EBTR1$OFF 000000                                  __CFG_EBTR2$OFF 000000  
                                __CFG_EBTR3$OFF 000000                                   __CFG_WRTB$OFF 000000  
                                 __CFG_WRTC$OFF 000000                                   __CFG_WRTD$OFF 000000  
                                __CFG_EBTRB$OFF 000000                                   ___awtoft@sign 001E  
                           ?_PWM4_LoadDutyValue 0013                              __CFG_MCLRE$EXTMCLR 000000  
                                 ___ftpack@sign 0017                                  __pbitbssCOMRAM 0260  
                                         pclath 000FFA                                           tablat 000FF5  
                               __end_of_moverse 0CE8                                           status 000FD8  
                                         wtemp6 004E                                  __CFG_HFOFST$ON 000000  
    __end_of_EUSART1_DefaultFramingErrorHandler 0DA2     __size_of_EUSART1_DefaultFramingErrorHandler 0002  
          ??_EUSART1_DefaultFramingErrorHandler 0001             ?_EUSART1_DefaultFramingErrorHandler 0001  
            _EUSART1_DefaultFramingErrorHandler 0DA0                                  __CFG_PBADEN$ON 000000  
                               __initialization 0ADE                      __end_of_EUSART1_Initialize 09D0  
                                  __end_of_main 02FE              main@valor_sensor_derecho_delantero 007F  
                          ??_PWM4_LoadDutyValue 0015                                   _leer_sensores 09D0  
                       __end_of_PWM4_Initialize 0D26                         __end_of_TMR2_Initialize 0D58  
                   ?_INTERRUPT_InterruptManager 0001                                          ??_main 007B  
                                 ___fttol@sign1 0075                                   __activetblptr 000002  
                         ?_EUSART1_Transmit_ISR 0001                                          _ADCON0 000FC2  
                                        _ADCON1 000FC1                                          _ADCON2 000FC0  
                                        _ADRESH 000FC4                                          _ADRESL 000FC3  
                                        _CCPR4H 000F59                                          _CCPR5H 000F56  
                                        _CCPR4L 000F58                                          _CCPR5L 000F55  
                              ___awdiv@dividend 0013                                __end_of___awtoft 0B9E  
                                        _ANSELA 000F38                                          _ANSELB 000F39  
                                        _ANSELC 000F3A                                          _ANSELD 000F3B  
                                        _ANSELE 000F3C                                __end_of___ftpack 082E  
          main@valor_sensor_izquierdo_delantero 007D                         __end_of_PWM5_Initialize 0D12  
                                __CFG_WDTEN$OFF 000000                                          _RCREG1 000FAE  
                                        _RCSTA1 000FAB                                          _OSCCON 000FD3  
                                        _PLLRDY 007E97                                          _SPBRG1 000FAF  
                                        _TXREG1 000FAD                                          _TXSTA1 000FAC  
                                __CFG_XINST$OFF 000000                                    _CCPTMRS1bits 000F48  
                                ?_leer_sensores 0001                                       ??___awdiv 0017  
                                     ??___ftadd 0021                                  __CFG_STVREN$ON 000000  
                                     ??___ftneg 0016                                       ??___ftmul 002D  
                                     ??___fttol 0070                        ?_EUSART1_SetErrorHandler 0013  
                       __end_of_TMR4_Initialize 0D38                                          clear_0 0B04  
                                        clear_1 0B12                                ___awdiv@quotient 0019  
              ??_EUSART1_SetOverrunErrorHandler 0015                 ?_EUSART1_SetOverrunErrorHandler 0013  
                         ___ftmul@f3_as_product 0031                                          tblptrh 000FF7  
                                        tblptrl 000FF6                                          tblptru 000FF8  
                                     ??_moverse 001D                        ADC_GetConversion@channel 0017  
                               _eusart1RxBuffer 0096                   __size_of_INTERRUPT_Initialize 0004  
                               _eusart1TxBuffer 009E                               _SYSTEM_Initialize 0C60  
                                    __accesstop 0060                         __end_of__initialization 0B18  
                                    ___ftadd@f1 001B                                      ___ftadd@f2 001E  
                            ?_SYSTEM_Initialize 0001                                   ___rparam_used 000001  
                                    ___ftneg@f1 0013                                      ___awtoft@c 001B  
                __size_of_EUSART1_RxDataHandler 0024                   __end_of_EUSART1_RxDataHandler 0CCE  
                                    ___ftmul@f1 0027                                      ___ftmul@f2 002A  
                                    ___fttol@f1 006C                                  __pcstackCOMRAM 0001  
                                  __pidataBANK0 0D8A                             ??_SYSTEM_Initialize 0015  
                              ?_TMR2_Initialize 0001                                ?_PWM4_Initialize 0001  
                   PWM4_LoadDutyValue@dutyValue 0013                          ??_EUSART1_Transmit_ISR 0001  
                   __end_of_EUSART1_Receive_ISR 08D8                           __end_of_mover_motor_A 0ADE  
                         __end_of_mover_motor_B 0A90                       __end_of_SYSTEM_Initialize 0C86  
                                 _eusart1RxHead 0048                                   _eusart1TxHead 004B  
                                 _eusart1RxTail 0047                                      __pbssBANK0 008E  
                                 _eusart1TxTail 004A               _EUSART1_TxDefaultInterruptHandler 0043  
               ??_EUSART1_SetRxInterruptHandler 0015                                ?_PWM5_Initialize 0001  
                               __CFG_PLLCFG$OFF 000000                      _sensor_izquierdo_delantero 00AF  
                               ??_leer_sensores 0018                 __end_of_EUSART1_SetErrorHandler 0D8A  
                            __CFG_CCP2MX$PORTC1 000000                              __CFG_CCP3MX$PORTB5 000000  
                                       _CCP4CON 000F57                                         _CCP5CON 000F54  
                              ?_TMR4_Initialize 0001                                       ?___awtoft 001B  
                                     ?___ftpack 0013                                  main@correccion 008B  
                       __size_of_ADC_Initialize 0016          __end_of_EUSART1_SetFramingErrorHandler 0D80  
       __size_of_EUSART1_SetFramingErrorHandler 000A                  _EUSART1_SetFramingErrorHandler 0D76  
                  ?_EUSART1_DefaultErrorHandler 0001                              _PWM5_LoadDutyValue 0BD0  
                                       _OSCCON2 000FD2                                         _OSCTUNE 000F9B  
                                       _SPBRGH1 000FB0                                calculo_PID@error 0069  
                           leer_sensores@sensor 0018                             ?_PWM5_LoadDutyValue 0013  
                               __CFG_PWRTEN$OFF 000000                                         __Hparam 0000  
                                       __Lparam 0000                                         ___awdiv 08D8  
                                       ___ftadd 02FE                                         ___ftneg 0C86  
                                       ___ftmul 05A2                                         ___fttol 04AA  
                                 ??_calculo_PID 0039                            ??_PWM5_LoadDutyValue 0015  
                                       __pcinit 0ADE                                      ??___awtoft 001E  
                                    ??___ftpack 0018                                         __ramtop 0600  
                                       __ptext0 00DA                                         __ptext1 0CCE  
                                       __ptext2 0A42                                         __ptext3 0B9E  
                                       __ptext4 0A90                                         __ptext5 0BD0  
                                       __ptext6 09D0                                         __ptext7 0C02  
                                       __ptext8 0696                                         __ptext9 0C86  
                         _OSCILLATOR_Initialize 0D38                                       _T2CONbits 000FBA  
                                     _T4CONbits 000F51                              _EUSART1_Initialize 095C  
                      ??_PIN_MANAGER_Initialize 0013                                         _moverse 0CCE  
                 ??_EUSART1_DefaultErrorHandler 0001                      __size_of_SYSTEM_Initialize 0026  
                          end_of_initialization 0B18                             ?_EUSART1_Initialize 0001  
                        mover_motor_A@velocidad 0017                                   __Lmediumconst 0000  
                   _EUSART1_OverrunErrorHandler 003B           __end_of_EUSART1_SetRxInterruptHandler 0D6C  
        __size_of_EUSART1_SetRxInterruptHandler 000A                   _EUSART1_SetRxInterruptHandler 0D62  
                        mover_motor_B@velocidad 0017                                         postdec1 000FE5  
                                       postinc0 000FEE                     __size_of_PWM4_LoadDutyValue 0032  
                          ??_EUSART1_Initialize 0015                                       _PORTBbits 000F81  
                           __end_of_calculo_PID 0780                __size_of_EUSART1_SetErrorHandler 000A  
                                    main@inicio 0085                        _sensor_derecho_delantero 00AD  
          __size_of_EUSART1_DefaultErrorHandler 0006                                     ___ftmul@exp 0030  
                  __end_of_INTERRUPT_Initialize 0DA0                                  _ADC_Initialize 0CE8  
                        ?_OSCILLATOR_Initialize 0001                             start_initialization 0ADE  
               __size_of_PIN_MANAGER_Initialize 0040   EUSART1_SetRxInterruptHandler@interruptHandler 0013  
 EUSART1_SetTxInterruptHandler@interruptHandler 0013                           _EUSART1_RxDataHandler 0CAA  
                ?_EUSART1_SetRxInterruptHandler 0013                          __end_of_ADC_Initialize 0CFE  
                                   __pdataBANK0 00B3                              moverse@velocidad_A 0019  
                            moverse@velocidad_B 001B                                     _calculo_PID 0696  
                                _eusart1RxCount 0046                               __size_of___awtoft 0038  
                             __size_of___ftpack 00AE                     PWM5_LoadDutyValue@dutyValue 0013  
                                   __pbssCOMRAM 003B               _EUSART1_RxDefaultInterruptHandler 0041  
                 __size_of_EUSART1_Transmit_ISR 002E                                   __pcstackBANK0 0060  
                      __size_of_PWM4_Initialize 0014                        __size_of_TMR2_Initialize 000E  
                            main@media_sensores 0086                 ??_EUSART1_SetTxInterruptHandler 0015  
              ??_EUSART1_SetFramingErrorHandler 0015                 ?_EUSART1_SetFramingErrorHandler 0013  
                  __size_of_EUSART1_Receive_ISR 00AA                                  _sensor_derecho 00AB  
                        _PIN_MANAGER_Initialize 0B26                        __size_of_PWM5_Initialize 0014  
                                     __pintcode 0008                           __end_of_leer_sensores 0A42  
                        __size_of_mover_motor_A 004E                          __size_of_mover_motor_B 004E  
                                      ?___awdiv 0013                                        ?___ftadd 001B  
                                      ?___ftneg 0013                                        ?___ftmul 0027  
                                      ?___fttol 006C                                 ?_ADC_Initialize 0001  
                              _sensor_izquierdo 00B1                    ??_INTERRUPT_InterruptManager 0001  
                              __CFG_PRICLKEN$ON 000000                         calculo_PID@valor_sensor 0036  
                                      _BAUDCON1 000FB8      __end_of_EUSART1_DefaultOverrunErrorHandler 0D96  
   __size_of_EUSART1_DefaultOverrunErrorHandler 0006            ??_EUSART1_DefaultOverrunErrorHandler 0001  
           ?_EUSART1_DefaultOverrunErrorHandler 0001              _EUSART1_DefaultOverrunErrorHandler 0D90  
                          _EUSART1_ErrorHandler 00A9                                     _flag_inicio 0260  
                       _EUSART1_SetErrorHandler 0D80                                        ?_moverse 0019  
                      __size_of_TMR4_Initialize 0012                            _INTERRUPT_Initialize 0D9C  
       EUSART1_SetErrorHandler@interruptHandler 0013                                        _PIE1bits 000F9D  
           __size_of_INTERRUPT_InterruptManager 00CE                                        i2u152_48 085E  
                                      i2u152_49 0872                                        i2u154_48 088E  
                                      i2u154_49 08A2                                        i2u156_48 08BC  
                                      i2u192_48 0076                                        i2u192_49 008A  
                                      _PIR1bits 000F9E                                        i2u189_48 0060  
                                      _PIR5bits 000F7E                          ?_EUSART1_RxDataHandler 0001  
                                     _set_point 003F                                        _RCONbits 000FD0  
                              __CFG_WDTPS$32768 000000                     __size_of_PWM5_LoadDutyValue 0032  
                                    _ADCON0bits 000FC2                                   _mover_motor_A 0A90  
                                 _mover_motor_B 0A42                                     _INTCON2bits 000FF1  
                                     copy_data0 0AF2                           ?_INTERRUPT_Initialize 0001  
                             ??_TMR2_Initialize 0013                               ??_PWM4_Initialize 0013  
         __end_of_EUSART1_SetTxInterruptHandler 0D62          __size_of_EUSART1_SetTxInterruptHandler 000A  
                 _EUSART1_SetTxInterruptHandler 0D58                                        __Hrparam 0000  
                    __end_of_PWM4_LoadDutyValue 0BD0                                        __Lrparam 0000  
                             _ADC_GetConversion 0C02                              __CFG_BOREN$SBORDIS 000000  
                             __CFG_P2BMX$PORTD2 000000                         ??_OSCILLATOR_Initialize 0013  
                            ?_ADC_GetConversion 0013                                __size_of___awdiv 0084  
                              __size_of___ftadd 01AC                                __size_of___ftneg 0024  
                              __size_of___ftmul 00F4                                __size_of___fttol 00F8  
                   __size_of_EUSART1_Initialize 0074                                        ___awtoft 0B66  
                                      ___ftpack 0780                               ??_PWM5_Initialize 0013  
                     ??_EUSART1_SetErrorHandler 0015             __end_of_EUSART1_DefaultErrorHandler 0D9C  
                   _EUSART1_DefaultErrorHandler 0D96                             ??_ADC_GetConversion 0015  
                         calculo_PID@correccion 0060                                  ?_mover_motor_A 0017  
                                ?_mover_motor_B 0017                    calculo_PID@valor_diferencial 0066  
                                      __ptext10 05A2                                        __ptext11 02FE  
                                      __ptext20 0D12                                        __ptext12 0B66  
                                      __ptext21 0B26                                        __ptext13 0780  
                                      __ptext30 0CE8                                        __ptext22 0D38  
                                      __ptext14 04AA                                        __ptext23 0D9C  
                                      __ptext15 08D8                                        __ptext32 0C32  
                                      __ptext24 095C                                        __ptext16 0C60  
                                      __ptext33 082E                                        __ptext25 0D58  
                                      __ptext17 0D26                                        __ptext34 0D90  
                                      __ptext26 0D62                                        __ptext18 0D4A  
                                      __ptext35 0DA0                                        __ptext27 0D6C  
                                      __ptext19 0CFE                                        __ptext36 0D96  
                                      __ptext28 0D76                                        __ptext37 0CAA  
                                      __ptext29 0D80                                        __ptext38 0000  
                              __size_of_moverse 001A                           calculo_PID@last_error 00A6  
                             ??_TMR4_Initialize 0013                                   __size_of_main 0224  
                     __end_of_ADC_GetConversion 0C32  EUSART1_SetOverrunErrorHandler@interruptHandler 0013  
                                      int$flags 004D                      main@valor_sensor_izquierdo 0087  
            __end_of_INTERRUPT_InterruptManager 00D6                      _INTERRUPT_InterruptManager 0008  
                                  ?_calculo_PID 0036                                        main@mano 008D  
                   _EUSART1_FramingErrorHandler 003D                             _EUSART1_Receive_ISR 082E  
                                    _INTCONbits 000FF2                          ??_INTERRUPT_Initialize 0013  
                                      intlevel2 0000                            ?_EUSART1_Receive_ISR 0001  
                       ?_PIN_MANAGER_Initialize 0001          __end_of_EUSART1_SetOverrunErrorHandler 0D76  
       __size_of_EUSART1_SetOverrunErrorHandler 000A                  _EUSART1_SetOverrunErrorHandler 0D6C  
                                    _RCSTA1bits 000FAB                    __end_of_EUSART1_Transmit_ISR 0C60  
                              ??_ADC_Initialize 0013  EUSART1_SetFramingErrorHandler@interruptHandler 0013  
                ?_EUSART1_SetTxInterruptHandler 0013                   calculo_PID@valor_proporcional 0063  
                            _eusart1RxLastError 0045                                 ??_mover_motor_A 0019  
                               ??_mover_motor_B 0019                               __CFG_T3CMX$PORTC0 000000  
                         ??_EUSART1_Receive_ISR 0001                  __end_of_PIN_MANAGER_Initialize 0B66  
                             __CFG_FOSC$INTIO67 000000                         ??_EUSART1_RxDataHandler 0001  
                    __size_of_ADC_GetConversion 0030                           main@velocidad_motor_A 0081  
                         main@velocidad_motor_B 0083  
